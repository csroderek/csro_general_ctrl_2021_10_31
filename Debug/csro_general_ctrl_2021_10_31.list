
csro_general_ctrl_2021_10_31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018050  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032f8  080181e0  080181e0  000281e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4d8  0801b4d8  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801b4d8  0801b4d8  0002b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4e0  0801b4e0  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b4e0  0801b4e0  0002b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b4e4  0801b4e4  0002b4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801b4e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000bb6c  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  2000bbf0  2000bbf0  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004d8f5  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008edb  00000000  00000000  0007d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027e0  00000000  00000000  00086888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002638  00000000  00000000  00089068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034710  00000000  00000000  0008b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eb49  00000000  00000000  000bfdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102366  00000000  00000000  000fe8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00200c5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ad94  00000000  00000000  00200cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080181c8 	.word	0x080181c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080181c8 	.word	0x080181c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057a:	4b75      	ldr	r3, [pc, #468]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800057c:	4a75      	ldr	r2, [pc, #468]	; (8000754 <MX_ADC1_Init+0x1ec>)
 800057e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000580:	4b73      	ldr	r3, [pc, #460]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000588:	4b71      	ldr	r3, [pc, #452]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800058e:	4b70      	ldr	r3, [pc, #448]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000594:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000596:	2201      	movs	r2, #1
 8000598:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b6b      	ldr	r3, [pc, #428]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a8:	4b69      	ldr	r3, [pc, #420]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005aa:	4a6b      	ldr	r2, [pc, #428]	; (8000758 <MX_ADC1_Init+0x1f0>)
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b68      	ldr	r3, [pc, #416]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 80005b4:	4b66      	ldr	r3, [pc, #408]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005b6:	220d      	movs	r2, #13
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ba:	4b65      	ldr	r3, [pc, #404]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c8:	4861      	ldr	r0, [pc, #388]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005ca:	f001 fd57 	bl	800207c <HAL_ADC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005d4:	f000 fd34 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005d8:	2305      	movs	r3, #5
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80005e0:	2306      	movs	r3, #6
 80005e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4859      	ldr	r0, [pc, #356]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005ea:	f001 fd8b 	bl	8002104 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005f4:	f000 fd24 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005f8:	2306      	movs	r3, #6
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4852      	ldr	r0, [pc, #328]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000606:	f001 fd7d 	bl	8002104 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000610:	f000 fd16 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000614:	2308      	movs	r3, #8
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	484b      	ldr	r0, [pc, #300]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000622:	f001 fd6f 	bl	8002104 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800062c:	f000 fd08 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000630:	230a      	movs	r3, #10
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4844      	ldr	r0, [pc, #272]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800063e:	f001 fd61 	bl	8002104 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000648:	f000 fcfa 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800064c:	230c      	movs	r3, #12
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000650:	2305      	movs	r3, #5
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	483d      	ldr	r0, [pc, #244]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800065a:	f001 fd53 	bl	8002104 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000664:	f000 fcec 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000668:	230d      	movs	r3, #13
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800066c:	2306      	movs	r3, #6
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4836      	ldr	r0, [pc, #216]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000676:	f001 fd45 	bl	8002104 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000680:	f000 fcde 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	482f      	ldr	r0, [pc, #188]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000692:	f001 fd37 	bl	8002104 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800069c:	f000 fcd0 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80006ae:	f001 fd29 	bl	8002104 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80006b8:	f000 fcc2 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006bc:	2304      	movs	r3, #4
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80006c0:	2309      	movs	r3, #9
 80006c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4821      	ldr	r0, [pc, #132]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80006ca:	f001 fd1b 	bl	8002104 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80006d4:	f000 fcb4 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d8:	2309      	movs	r3, #9
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80006dc:	230a      	movs	r3, #10
 80006de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80006e6:	f001 fd0d 	bl	8002104 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80006f0:	f000 fca6 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006f4:	2310      	movs	r3, #16
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80006f8:	230b      	movs	r3, #11
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000702:	f001 fcff 	bl	8002104 <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800070c:	f000 fc98 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000710:	2311      	movs	r3, #17
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8000714:	230c      	movs	r3, #12
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800071e:	f001 fcf1 	bl	8002104 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000728:	f000 fc8a 	bl	8001040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800072c:	2312      	movs	r3, #18
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8000730:	230d      	movs	r3, #13
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800073a:	f001 fce3 	bl	8002104 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8000744:	f000 fc7c 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20004c20 	.word	0x20004c20
 8000754:	40012000 	.word	0x40012000
 8000758:	0f000001 	.word	0x0f000001

0800075c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a49      	ldr	r2, [pc, #292]	; (80008a0 <HAL_ADC_MspInit+0x144>)
 800077a:	4293      	cmp	r3, r2
 800077c:	f040 808c 	bne.w	8000898 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000788:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6453      	str	r3, [r2, #68]	; 0x44
 8000790:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a3f      	ldr	r2, [pc, #252]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a38      	ldr	r2, [pc, #224]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NTC_01_Pin|NTC_02_Pin|NTC_03_Pin;
 80007f0:	230d      	movs	r3, #13
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4829      	ldr	r0, [pc, #164]	; (80008a8 <HAL_ADC_MspInit+0x14c>)
 8000804:	f003 fc0e 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_04_Pin|NTC_05_Pin|NTC_06_Pin|DP_01_Pin
 8000808:	2379      	movs	r3, #121	; 0x79
 800080a:	61fb      	str	r3, [r7, #28]
                          |DP_02_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4824      	ldr	r0, [pc, #144]	; (80008ac <HAL_ADC_MspInit+0x150>)
 800081c:	f003 fc02 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DP_03_Pin|VAL_FB_Pin;
 8000820:	2303      	movs	r3, #3
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481f      	ldr	r0, [pc, #124]	; (80008b0 <HAL_ADC_MspInit+0x154>)
 8000834:	f003 fbf6 	bl	8004024 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_MspInit+0x15c>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000856:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800085a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800086a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800087e:	f001 ff41 	bl	8002704 <HAL_DMA_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000888:	f000 fbda 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	; 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40012000 	.word	0x40012000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020400 	.word	0x40020400
 80008b4:	20004c68 	.word	0x20004c68
 80008b8:	40026410 	.word	0x40026410

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <MX_DMA_Init+0xd8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <MX_DMA_Init+0xd8>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <MX_DMA_Init+0xd8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <MX_DMA_Init+0xd8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <MX_DMA_Init+0xd8>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <MX_DMA_Init+0xd8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2105      	movs	r1, #5
 80008fe:	200c      	movs	r0, #12
 8000900:	f001 fed6 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000904:	200c      	movs	r0, #12
 8000906:	f001 feef 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2105      	movs	r1, #5
 800090e:	200e      	movs	r0, #14
 8000910:	f001 fece 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000914:	200e      	movs	r0, #14
 8000916:	f001 fee7 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	2010      	movs	r0, #16
 8000920:	f001 fec6 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000924:	2010      	movs	r0, #16
 8000926:	f001 fedf 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2011      	movs	r0, #17
 8000930:	f001 febe 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000934:	2011      	movs	r0, #17
 8000936:	f001 fed7 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2038      	movs	r0, #56	; 0x38
 8000940:	f001 feb6 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000944:	2038      	movs	r0, #56	; 0x38
 8000946:	f001 fecf 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	2039      	movs	r0, #57	; 0x39
 8000950:	f001 feae 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000954:	2039      	movs	r0, #57	; 0x39
 8000956:	f001 fec7 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	203a      	movs	r0, #58	; 0x3a
 8000960:	f001 fea6 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000964:	203a      	movs	r0, #58	; 0x3a
 8000966:	f001 febf 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2045      	movs	r0, #69	; 0x45
 8000970:	f001 fe9e 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000974:	2045      	movs	r0, #69	; 0x45
 8000976:	f001 feb7 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	2046      	movs	r0, #70	; 0x46
 8000980:	f001 fe96 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000984:	2046      	movs	r0, #70	; 0x46
 8000986:	f001 feaf 	bl	80026e8 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 800099c:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <MX_FREERTOS_Init+0x98>)
 800099e:	2100      	movs	r1, #0
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <MX_FREERTOS_Init+0x9c>)
 80009a2:	f006 fbc4 	bl	800712e <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_FREERTOS_Init+0xa0>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80009ac:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_FREERTOS_Init+0xa4>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4823      	ldr	r0, [pc, #140]	; (8000a40 <MX_FREERTOS_Init+0xa8>)
 80009b2:	f006 fbbc 	bl	800712e <osThreadNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <MX_FREERTOS_Init+0xac>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <MX_FREERTOS_Init+0xb0>)
 80009be:	2100      	movs	r1, #0
 80009c0:	4822      	ldr	r0, [pc, #136]	; (8000a4c <MX_FREERTOS_Init+0xb4>)
 80009c2:	f006 fbb4 	bl	800712e <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <MX_FREERTOS_Init+0xb8>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_FREERTOS_Init+0xbc>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4821      	ldr	r0, [pc, #132]	; (8000a58 <MX_FREERTOS_Init+0xc0>)
 80009d2:	f006 fbac 	bl	800712e <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <MX_FREERTOS_Init+0xc4>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <MX_FREERTOS_Init+0xc8>)
 80009de:	2100      	movs	r1, #0
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <MX_FREERTOS_Init+0xcc>)
 80009e2:	f006 fba4 	bl	800712e <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <MX_FREERTOS_Init+0xd0>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <MX_FREERTOS_Init+0xd4>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	481f      	ldr	r0, [pc, #124]	; (8000a70 <MX_FREERTOS_Init+0xd8>)
 80009f2:	f006 fb9c 	bl	800712e <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <MX_FREERTOS_Init+0xdc>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <MX_FREERTOS_Init+0xe0>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	481e      	ldr	r0, [pc, #120]	; (8000a7c <MX_FREERTOS_Init+0xe4>)
 8000a02:	f006 fb94 	bl	800712e <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <MX_FREERTOS_Init+0xe8>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of myTask08 */
  myTask08Handle = osThreadNew(StartTask08, NULL, &myTask08_attributes);
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <MX_FREERTOS_Init+0xec>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	481d      	ldr	r0, [pc, #116]	; (8000a88 <MX_FREERTOS_Init+0xf0>)
 8000a12:	f006 fb8c 	bl	800712e <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_FREERTOS_Init+0xf4>)
 8000a1a:	6013      	str	r3, [r2, #0]

  /* creation of myTask09 */
  myTask09Handle = osThreadNew(StartTask09, NULL, &myTask09_attributes);
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <MX_FREERTOS_Init+0xf8>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_FREERTOS_Init+0xfc>)
 8000a22:	f006 fb84 	bl	800712e <osThreadNew>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_FREERTOS_Init+0x100>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	0801b0f0 	.word	0x0801b0f0
 8000a34:	08000a9d 	.word	0x08000a9d
 8000a38:	20004ce0 	.word	0x20004ce0
 8000a3c:	0801b114 	.word	0x0801b114
 8000a40:	08000ab1 	.word	0x08000ab1
 8000a44:	20004cd4 	.word	0x20004cd4
 8000a48:	0801b138 	.word	0x0801b138
 8000a4c:	08000ac1 	.word	0x08000ac1
 8000a50:	20004cd8 	.word	0x20004cd8
 8000a54:	0801b15c 	.word	0x0801b15c
 8000a58:	08000ad1 	.word	0x08000ad1
 8000a5c:	20004ccc 	.word	0x20004ccc
 8000a60:	0801b180 	.word	0x0801b180
 8000a64:	08000ae1 	.word	0x08000ae1
 8000a68:	20004cc8 	.word	0x20004cc8
 8000a6c:	0801b1a4 	.word	0x0801b1a4
 8000a70:	08000af1 	.word	0x08000af1
 8000a74:	20004ce8 	.word	0x20004ce8
 8000a78:	0801b1c8 	.word	0x0801b1c8
 8000a7c:	08000b01 	.word	0x08000b01
 8000a80:	20004cdc 	.word	0x20004cdc
 8000a84:	0801b1ec 	.word	0x0801b1ec
 8000a88:	08000b11 	.word	0x08000b11
 8000a8c:	20004cd0 	.word	0x20004cd0
 8000a90:	0801b210 	.word	0x0801b210
 8000a94:	08000b21 	.word	0x08000b21
 8000a98:	20004ce4 	.word	0x20004ce4

08000a9c <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000aa4:	f005 fe20 	bl	80066e8 <MX_LWIP_Init>
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f006 fbd2 	bl	8007252 <osDelay>
 8000aae:	e7fb      	b.n	8000aa8 <StartTask01+0xc>

08000ab0 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f006 fbca 	bl	8007252 <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <StartTask02+0x8>

08000ac0 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f006 fbc2 	bl	8007252 <osDelay>
 8000ace:	e7fb      	b.n	8000ac8 <StartTask03+0x8>

08000ad0 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f006 fbba 	bl	8007252 <osDelay>
 8000ade:	e7fb      	b.n	8000ad8 <StartTask04+0x8>

08000ae0 <StartTask05>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f006 fbb2 	bl	8007252 <osDelay>
 8000aee:	e7fb      	b.n	8000ae8 <StartTask05+0x8>

08000af0 <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f006 fbaa 	bl	8007252 <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <StartTask06+0x8>

08000b00 <StartTask07>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f006 fba2 	bl	8007252 <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <StartTask07+0x8>

08000b10 <StartTask08>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f006 fb9a 	bl	8007252 <osDelay>
 8000b1e:	e7fb      	b.n	8000b18 <StartTask08+0x8>

08000b20 <StartTask09>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask09 */
void StartTask09(void *argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask09 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f006 fb92 	bl	8007252 <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <StartTask09+0x1c>)
 8000b34:	f003 fc2b 	bl	800438e <HAL_GPIO_TogglePin>
    osDelay(100);
 8000b38:	e7f6      	b.n	8000b28 <StartTask09+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	40020800 	.word	0x40020800

08000b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a63      	ldr	r2, [pc, #396]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b61      	ldr	r3, [pc, #388]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a5c      	ldr	r2, [pc, #368]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a55      	ldr	r2, [pc, #340]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b53      	ldr	r3, [pc, #332]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b4f      	ldr	r3, [pc, #316]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a4e      	ldr	r2, [pc, #312]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b4c      	ldr	r3, [pc, #304]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b48      	ldr	r3, [pc, #288]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a47      	ldr	r2, [pc, #284]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b45      	ldr	r3, [pc, #276]	; (8000cec <MX_GPIO_Init+0x1ac>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 8000be2:	2200      	movs	r2, #0
 8000be4:	f24f 51ef 	movw	r1, #62959	; 0xf5ef
 8000be8:	4841      	ldr	r0, [pc, #260]	; (8000cf0 <MX_GPIO_Init+0x1b0>)
 8000bea:	f003 fbb7 	bl	800435c <HAL_GPIO_WritePin>
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 8000bf4:	483f      	ldr	r0, [pc, #252]	; (8000cf4 <MX_GPIO_Init+0x1b4>)
 8000bf6:	f003 fbb1 	bl	800435c <HAL_GPIO_WritePin>
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RS485_EN3_Pin
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f24c 7104 	movw	r1, #50948	; 0xc704
 8000c00:	483d      	ldr	r0, [pc, #244]	; (8000cf8 <MX_GPIO_Init+0x1b8>)
 8000c02:	f003 fbab 	bl	800435c <HAL_GPIO_WritePin>
                          |RLY_01_Pin|RLY_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin
 8000c06:	2200      	movs	r2, #0
 8000c08:	f64b 4110 	movw	r1, #48144	; 0xbc10
 8000c0c:	483b      	ldr	r0, [pc, #236]	; (8000cfc <MX_GPIO_Init+0x1bc>)
 8000c0e:	f003 fba5 	bl	800435c <HAL_GPIO_WritePin>
                          |RS485_EN4_Pin|RS485_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN1_GPIO_Port, RS485_EN1_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	4839      	ldr	r0, [pc, #228]	; (8000d00 <MX_GPIO_Init+0x1c0>)
 8000c1a:	f003 fb9f 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 8000c1e:	f24f 53ef 	movw	r3, #62959	; 0xf5ef
 8000c22:	617b      	str	r3, [r7, #20]
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <MX_GPIO_Init+0x1b0>)
 8000c38:	f003 f9f4 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_DATA_Pin;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ID_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <MX_GPIO_Init+0x1b0>)
 8000c50:	f003 f9e8 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 8000c54:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000c58:	617b      	str	r3, [r7, #20]
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <MX_GPIO_Init+0x1b4>)
 8000c6e:	f003 f9d9 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RS485_EN3_Pin
 8000c72:	f24c 7304 	movw	r3, #50948	; 0xc704
 8000c76:	617b      	str	r3, [r7, #20]
                          |RLY_01_Pin|RLY_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481b      	ldr	r0, [pc, #108]	; (8000cf8 <MX_GPIO_Init+0x1b8>)
 8000c8c:	f003 f9ca 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin
 8000c90:	f64b 4310 	movw	r3, #48144	; 0xbc10
 8000c94:	617b      	str	r3, [r7, #20]
                          |RS485_EN4_Pin|RS485_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_GPIO_Init+0x1bc>)
 8000caa:	f003 f9bb 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN1_Pin;
 8000cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN1_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_GPIO_Init+0x1c0>)
 8000cc8:	f003 f9ac 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_04_Pin|DI_03_Pin|DI_02_Pin|DI_01_Pin;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_GPIO_Init+0x1bc>)
 8000ce0:	f003 f9a0 	bl	8004024 <HAL_GPIO_Init>

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40020c00 	.word	0x40020c00
 8000d00:	40020000 	.word	0x40020000

08000d04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C1_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_I2C1_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d42:	f003 fb3f 	bl	80043c4 <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 f978 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20004d40 	.word	0x20004d40
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	000186a0 	.word	0x000186a0

08000d60 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_I2C3_Init+0x54>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d6c:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_I2C3_Init+0x58>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d82:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_I2C3_Init+0x50>)
 8000d9e:	f003 fb11 	bl	80043c4 <HAL_I2C_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000da8:	f000 f94a 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20004cec 	.word	0x20004cec
 8000db4:	40005c00 	.word	0x40005c00
 8000db8:	000186a0 	.word	0x000186a0

08000dbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a42      	ldr	r2, [pc, #264]	; (8000ee4 <HAL_I2C_MspInit+0x128>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a40      	ldr	r2, [pc, #256]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TH_SCL1_Pin|TH_SDA1_Pin;
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfe:	2312      	movs	r3, #18
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <HAL_I2C_MspInit+0x130>)
 8000e16:	f003 f905 	bl	8004024 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000e36:	e050      	b.n	8000eda <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <HAL_I2C_MspInit+0x134>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d14b      	bne.n	8000eda <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a27      	ldr	r2, [pc, #156]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TH_SDA2_Pin;
 8000e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SDA2_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <HAL_I2C_MspInit+0x138>)
 8000e98:	f003 f8c4 	bl	8004024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TH_SCL2_Pin;
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SCL2_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <HAL_I2C_MspInit+0x13c>)
 8000eba:	f003 f8b3 	bl	8004024 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_I2C_MspInit+0x12c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	; 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40005c00 	.word	0x40005c00
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020000 	.word	0x40020000

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f001 f856 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f820 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f7ff fe1a 	bl	8000b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0c:	f7ff fcd6 	bl	80008bc <MX_DMA_Init>
  MX_ADC1_Init();
 8000f10:	f7ff fb2a 	bl	8000568 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f14:	f000 fcf4 	bl	8001900 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 fd1c 	bl	8001954 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f1c:	f000 fd44 	bl	80019a8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000f20:	f000 fd6c 	bl	80019fc <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000f24:	f7ff feee 	bl	8000d04 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000f28:	f7ff ff1a 	bl	8000d60 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000f2c:	f000 fa74 	bl	8001418 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f30:	f000 fb22 	bl	8001578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f34:	f000 fb96 	bl	8001664 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f38:	f006 f89a 	bl	8007070 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f3c:	f7ff fd2c 	bl	8000998 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f40:	f006 f8ba 	bl	80070b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x48>
	...

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f016 f9a1 	bl	801729e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <SystemClock_Config+0xd0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2310      	movs	r3, #16
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fbc:	23a8      	movs	r3, #168	; 0xa8
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fb3d 	bl	800464c <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd8:	f000 f832 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fd9e 	bl	8004b3c <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001006:	f000 f81b 	bl	8001040 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	; 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800102e:	f000 ffe1 	bl	8001ff4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40002000 	.word	0x40002000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_MspInit+0x54>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <HAL_MspInit+0x54>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x54>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_MspInit+0x54>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_MspInit+0x54>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_MspInit+0x54>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	210f      	movs	r1, #15
 800108e:	f06f 0001 	mvn.w	r0, #1
 8001092:	f001 fb0d 	bl	80026b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	202d      	movs	r0, #45	; 0x2d
 80010ba:	f001 faf9 	bl	80026b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80010be:	202d      	movs	r0, #45	; 0x2d
 80010c0:	f001 fb12 	bl	80026e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_InitTick+0xa4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_InitTick+0xa4>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_InitTick+0xa4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	f107 0210 	add.w	r2, r7, #16
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fef6 	bl	8004edc <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010f0:	f003 fecc 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80010f4:	4603      	mov	r3, r0
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_InitTick+0xa8>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_InitTick+0xac>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_InitTick+0xb0>)
 800110c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_InitTick+0xac>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_InitTick+0xac>)
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_InitTick+0xac>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_InitTick+0xac>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <HAL_InitTick+0xac>)
 800112a:	f003 ff09 	bl	8004f40 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_InitTick+0xac>)
 8001136:	f003 ff53 	bl	8004fe0 <HAL_TIM_Base_Start_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	431bde83 	.word	0x431bde83
 8001150:	20004d94 	.word	0x20004d94
 8001154:	40002000 	.word	0x40002000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <DMA1_Stream1_IRQHandler+0x10>)
 800118a:	f001 fb69 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20004f74 	.word	0x20004f74

08001198 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA1_Stream3_IRQHandler+0x10>)
 800119e:	f001 fb5f 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20005018 	.word	0x20005018

080011ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Stream5_IRQHandler+0x10>)
 80011b2:	f001 fb55 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20004eb4 	.word	0x20004eb4

080011c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Stream6_IRQHandler+0x10>)
 80011c6:	f001 fb4b 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20005198 	.word	0x20005198

080011d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011da:	f004 f823 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20004d94 	.word	0x20004d94

080011e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA2_Stream0_IRQHandler+0x10>)
 80011ee:	f001 fb37 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20004c68 	.word	0x20004c68

080011fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DMA2_Stream1_IRQHandler+0x10>)
 8001202:	f001 fb2d 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20004f14 	.word	0x20004f14

08001210 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA2_Stream2_IRQHandler+0x10>)
 8001216:	f001 fb23 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20005138 	.word	0x20005138

08001224 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <ETH_IRQHandler+0x10>)
 800122a:	f002 f939 	bl	80034a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20006c08 	.word	0x20006c08

08001238 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <DMA2_Stream6_IRQHandler+0x10>)
 800123e:	f001 fb0f 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200050d8 	.word	0x200050d8

0800124c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA2_Stream7_IRQHandler+0x10>)
 8001252:	f001 fb05 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20005078 	.word	0x20005078

08001260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_kill>:

int _kill(int pid, int sig)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_kill+0x20>)
 800127c:	2216      	movs	r2, #22
 800127e:	601a      	str	r2, [r3, #0]
	return -1;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	2000bbdc 	.word	0x2000bbdc

08001294 <_exit>:

void _exit (int status)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ffe5 	bl	8001270 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012a6:	e7fe      	b.n	80012a6 <_exit+0x12>

080012a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
	}

return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
	}
	return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001342:	605a      	str	r2, [r3, #4]
	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d205      	bcs.n	80013c0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <_sbrk+0x6c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e009      	b.n	80013d4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000800 	.word	0x00000800
 80013e8:	200000a0 	.word	0x200000a0
 80013ec:	2000bbf0 	.word	0x2000bbf0
 80013f0:	2000bbdc 	.word	0x2000bbdc

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b096      	sub	sp, #88	; 0x58
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2220      	movs	r2, #32
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f015 ff24 	bl	801729e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001456:	4b46      	ldr	r3, [pc, #280]	; (8001570 <MX_TIM1_Init+0x158>)
 8001458:	4a46      	ldr	r2, [pc, #280]	; (8001574 <MX_TIM1_Init+0x15c>)
 800145a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <MX_TIM1_Init+0x158>)
 800145e:	22a7      	movs	r2, #167	; 0xa7
 8001460:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <MX_TIM1_Init+0x158>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <MX_TIM1_Init+0x158>)
 800146a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <MX_TIM1_Init+0x158>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <MX_TIM1_Init+0x158>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <MX_TIM1_Init+0x158>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001482:	483b      	ldr	r0, [pc, #236]	; (8001570 <MX_TIM1_Init+0x158>)
 8001484:	f003 fd5c 	bl	8004f40 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800148e:	f7ff fdd7 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001498:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800149c:	4619      	mov	r1, r3
 800149e:	4834      	ldr	r0, [pc, #208]	; (8001570 <MX_TIM1_Init+0x158>)
 80014a0:	f004 f926 	bl	80056f0 <HAL_TIM_ConfigClockSource>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014aa:	f7ff fdc9 	bl	8001040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ae:	4830      	ldr	r0, [pc, #192]	; (8001570 <MX_TIM1_Init+0x158>)
 80014b0:	f003 fe06 	bl	80050c0 <HAL_TIM_PWM_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014ba:	f7ff fdc1 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ca:	4619      	mov	r1, r3
 80014cc:	4828      	ldr	r0, [pc, #160]	; (8001570 <MX_TIM1_Init+0x158>)
 80014ce:	f004 fe13 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014d8:	f7ff fdb2 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 199;
 80014e0:	23c7      	movs	r3, #199	; 0xc7
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	481b      	ldr	r0, [pc, #108]	; (8001570 <MX_TIM1_Init+0x158>)
 8001502:	f004 f833 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800150c:	f7ff fd98 	bl	8001040 <Error_Handler>
  }
  sConfigOC.Pulse = 399;
 8001510:	f240 138f 	movw	r3, #399	; 0x18f
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2204      	movs	r2, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_TIM1_Init+0x158>)
 8001520:	f004 f824 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800152a:	f7ff fd89 	bl	8001040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001546:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x158>)
 8001552:	f004 fe4d 	bl	80061f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800155c:	f7ff fd70 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x158>)
 8001562:	f000 f96d 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8001566:	bf00      	nop
 8001568:	3758      	adds	r7, #88	; 0x58
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004e24 	.word	0x20004e24
 8001574:	40010000 	.word	0x40010000

08001578 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015b2:	22a7      	movs	r2, #167	; 0xa7
 80015b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d0:	4823      	ldr	r0, [pc, #140]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015d2:	f003 fcb5 	bl	8004f40 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015dc:	f7ff fd30 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	4619      	mov	r1, r3
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015ee:	f004 f87f 	bl	80056f0 <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015f8:	f7ff fd22 	bl	8001040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_TIM2_Init+0xe8>)
 80015fe:	f003 fd5f 	bl	80050c0 <HAL_TIM_PWM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001608:	f7ff fd1a 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4619      	mov	r1, r3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_TIM2_Init+0xe8>)
 800161c:	f004 fd6c 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001626:	f7ff fd0b 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 599;
 800162e:	f240 2357 	movw	r3, #599	; 0x257
 8001632:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2204      	movs	r2, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM2_Init+0xe8>)
 8001644:	f003 ff92 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800164e:	f7ff fcf7 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM2_Init+0xe8>)
 8001654:	f000 f8f4 	bl	8001840 <HAL_TIM_MspPostInit>

}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20004e6c 	.word	0x20004e6c

08001664 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <MX_TIM3_Init+0xf0>)
 8001690:	4a31      	ldr	r2, [pc, #196]	; (8001758 <MX_TIM3_Init+0xf4>)
 8001692:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <MX_TIM3_Init+0xf0>)
 8001696:	22a7      	movs	r2, #167	; 0xa7
 8001698:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <MX_TIM3_Init+0xf0>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_TIM3_Init+0xf0>)
 80016a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <MX_TIM3_Init+0xf0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_TIM3_Init+0xf0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b4:	4827      	ldr	r0, [pc, #156]	; (8001754 <MX_TIM3_Init+0xf0>)
 80016b6:	f003 fc43 	bl	8004f40 <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80016c0:	f7ff fcbe 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4820      	ldr	r0, [pc, #128]	; (8001754 <MX_TIM3_Init+0xf0>)
 80016d2:	f004 f80d 	bl	80056f0 <HAL_TIM_ConfigClockSource>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f7ff fcb0 	bl	8001040 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016e0:	481c      	ldr	r0, [pc, #112]	; (8001754 <MX_TIM3_Init+0xf0>)
 80016e2:	f003 fd46 	bl	8005172 <HAL_TIM_IC_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f7ff fca8 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <MX_TIM3_Init+0xf0>)
 8001700:	f004 fcfa 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800170a:	f7ff fc99 	bl	8001040 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001712:	2301      	movs	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <MX_TIM3_Init+0xf0>)
 8001726:	f003 fe85 	bl	8005434 <HAL_TIM_IC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001730:	f7ff fc86 	bl	8001040 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	2204      	movs	r2, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_TIM3_Init+0xf0>)
 800173c:	f003 fe7a 	bl	8005434 <HAL_TIM_IC_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001746:	f7ff fc7b 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20004ddc 	.word	0x20004ddc
 8001758:	40000400 	.word	0x40000400

0800175c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_TIM_Base_MspInit+0xd4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10e      	bne.n	800179c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800179a:	e044      	b.n	8001826 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a21      	ldr	r2, [pc, #132]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
}
 80017c2:	e030      	b.n	8001826 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_TIM_Base_MspInit+0xdc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12b      	bne.n	8001826 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_TIM_Base_MspInit+0xd8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 8001806:	2330      	movs	r3, #48	; 0x30
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001816:	2302      	movs	r3, #2
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4806      	ldr	r0, [pc, #24]	; (800183c <HAL_TIM_Base_MspInit+0xe0>)
 8001822:	f002 fbff 	bl	8004024 <HAL_GPIO_Init>
}
 8001826:	bf00      	nop
 8001828:	3730      	adds	r7, #48	; 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40010000 	.word	0x40010000
 8001834:	40023800 	.word	0x40023800
 8001838:	40000400 	.word	0x40000400
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_TIM_MspPostInit+0xb0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11f      	bne.n	80018a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 800187e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001890:	2301      	movs	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4817      	ldr	r0, [pc, #92]	; (80018f8 <HAL_TIM_MspPostInit+0xb8>)
 800189c:	f002 fbc2 	bl	8004024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018a0:	e022      	b.n	80018e8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018aa:	d11d      	bne.n	80018e8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	6313      	str	r3, [r2, #48]	; 0x30
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_TIM_MspPostInit+0xb4>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VAL_PWM_Pin;
 80018c8:	2308      	movs	r3, #8
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d8:	2301      	movs	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VAL_PWM_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <HAL_TIM_MspPostInit+0xbc>)
 80018e4:	f002 fb9e 	bl	8004024 <HAL_GPIO_Init>
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40010000 	.word	0x40010000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40020400 	.word	0x40020400

08001900 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART1_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800190c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001938:	f004 fcc0 	bl	80062bc <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f7ff fb7d 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200051f8 	.word	0x200051f8
 8001950:	40011000 	.word	0x40011000

08001954 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART2_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001960:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800198c:	f004 fc96 	bl	80062bc <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001996:	f7ff fb53 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20005280 	.word	0x20005280
 80019a4:	40004400 	.word	0x40004400

080019a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <MX_USART3_UART_Init+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019e0:	f004 fc6c 	bl	80062bc <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ea:	f7ff fb29 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20004fd4 	.word	0x20004fd4
 80019f8:	40004800 	.word	0x40004800

080019fc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART6_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a34:	f004 fc42 	bl	80062bc <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f7ff faff 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000523c 	.word	0x2000523c
 8001a4c:	40011400 	.word	0x40011400

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b090      	sub	sp, #64	; 0x40
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a8f      	ldr	r2, [pc, #572]	; (8001cac <HAL_UART_MspInit+0x25c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	f040 808b 	bne.w	8001b8a <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a78:	4b8d      	ldr	r3, [pc, #564]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	4a8c      	ldr	r2, [pc, #560]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6453      	str	r3, [r2, #68]	; 0x44
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	4b86      	ldr	r3, [pc, #536]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a85      	ldr	r2, [pc, #532]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	487a      	ldr	r0, [pc, #488]	; (8001cb4 <HAL_UART_MspInit+0x264>)
 8001aca:	f002 faab 	bl	8004024 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ace:	4b7a      	ldr	r3, [pc, #488]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001ad0:	4a7a      	ldr	r2, [pc, #488]	; (8001cbc <HAL_UART_MspInit+0x26c>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ad4:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af0:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001afc:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b10:	4869      	ldr	r0, [pc, #420]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001b12:	f000 fdf7 	bl	8002704 <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001b1c:	f7ff fa90 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
 8001b26:	4a64      	ldr	r2, [pc, #400]	; (8001cb8 <HAL_UART_MspInit+0x268>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b2e:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_UART_MspInit+0x274>)
 8001b30:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b40:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b46:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b60:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b6c:	4854      	ldr	r0, [pc, #336]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b6e:	f000 fdc9 	bl	8002704 <HAL_DMA_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001b78:	f7ff fa62 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
 8001b82:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <HAL_UART_MspInit+0x270>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b88:	e1ca      	b.n	8001f20 <HAL_UART_MspInit+0x4d0>
  else if(uartHandle->Instance==USART2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_UART_MspInit+0x278>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	f040 80a5 	bne.w	8001ce0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a3d      	ldr	r2, [pc, #244]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_UART_MspInit+0x260>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bce:	2360      	movs	r3, #96	; 0x60
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bde:	2307      	movs	r3, #7
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be6:	4619      	mov	r1, r3
 8001be8:	4838      	ldr	r0, [pc, #224]	; (8001ccc <HAL_UART_MspInit+0x27c>)
 8001bea:	f002 fa1b 	bl	8004024 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001bf0:	4a38      	ldr	r2, [pc, #224]	; (8001cd4 <HAL_UART_MspInit+0x284>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c22:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c30:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c32:	f000 fd67 	bl	8002704 <HAL_DMA_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001c3c:	f7ff fa00 	bl	8001040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
 8001c46:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <HAL_UART_MspInit+0x280>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c4e:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_UART_MspInit+0x28c>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c58:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c5c:	2240      	movs	r2, #64	; 0x40
 8001c5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c8c:	4812      	ldr	r0, [pc, #72]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001c8e:	f000 fd39 	bl	8002704 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8001c98:	f7ff f9d2 	bl	8001040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_UART_MspInit+0x288>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ca8:	e13a      	b.n	8001f20 <HAL_UART_MspInit+0x4d0>
 8001caa:	bf00      	nop
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	20005138 	.word	0x20005138
 8001cbc:	40026440 	.word	0x40026440
 8001cc0:	20005078 	.word	0x20005078
 8001cc4:	400264b8 	.word	0x400264b8
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	20004eb4 	.word	0x20004eb4
 8001cd4:	40026088 	.word	0x40026088
 8001cd8:	20005198 	.word	0x20005198
 8001cdc:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a90      	ldr	r2, [pc, #576]	; (8001f28 <HAL_UART_MspInit+0x4d8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f040 808b 	bne.w	8001e02 <HAL_UART_MspInit+0x3b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a8d      	ldr	r2, [pc, #564]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	4b87      	ldr	r3, [pc, #540]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a86      	ldr	r2, [pc, #536]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b84      	ldr	r3, [pc, #528]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d36:	2307      	movs	r3, #7
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	487b      	ldr	r0, [pc, #492]	; (8001f30 <HAL_UART_MspInit+0x4e0>)
 8001d42:	f002 f96f 	bl	8004024 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d46:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d48:	4a7b      	ldr	r2, [pc, #492]	; (8001f38 <HAL_UART_MspInit+0x4e8>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d4c:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d54:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d68:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	4b71      	ldr	r3, [pc, #452]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d74:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d88:	486a      	ldr	r0, [pc, #424]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d8a:	f000 fcbb 	bl	8002704 <HAL_DMA_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8001d94:	f7ff f954 	bl	8001040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a66      	ldr	r2, [pc, #408]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d9e:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <HAL_UART_MspInit+0x4e4>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001da6:	4a66      	ldr	r2, [pc, #408]	; (8001f40 <HAL_UART_MspInit+0x4f0>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001daa:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd8:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001de4:	4855      	ldr	r0, [pc, #340]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001de6:	f000 fc8d 	bl	8002704 <HAL_DMA_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8001df0:	f7ff f926 	bl	8001040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dfa:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <HAL_UART_MspInit+0x4ec>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e00:	e08e      	b.n	8001f20 <HAL_UART_MspInit+0x4d0>
  else if(uartHandle->Instance==USART6)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_UART_MspInit+0x4f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f040 8089 	bne.w	8001f20 <HAL_UART_MspInit+0x4d0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <HAL_UART_MspInit+0x4dc>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e56:	2308      	movs	r3, #8
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4839      	ldr	r0, [pc, #228]	; (8001f48 <HAL_UART_MspInit+0x4f8>)
 8001e62:	f002 f8df 	bl	8004024 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e68:	4a39      	ldr	r2, [pc, #228]	; (8001f50 <HAL_UART_MspInit+0x500>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e6e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e86:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e8e:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001ea8:	4828      	ldr	r0, [pc, #160]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001eaa:	f000 fc2b 	bl	8002704 <HAL_DMA_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x468>
      Error_Handler();
 8001eb4:	f7ff f8c4 	bl	8001040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <HAL_UART_MspInit+0x4fc>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_UART_MspInit+0x508>)
 8001ec8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001ecc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ed0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001f04:	4813      	ldr	r0, [pc, #76]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001f06:	f000 fbfd 	bl	8002704 <HAL_DMA_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8001f10:	f7ff f896 	bl	8001040 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_UART_MspInit+0x504>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f20:	bf00      	nop
 8001f22:	3740      	adds	r7, #64	; 0x40
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40004800 	.word	0x40004800
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	20004f74 	.word	0x20004f74
 8001f38:	40026028 	.word	0x40026028
 8001f3c:	20005018 	.word	0x20005018
 8001f40:	40026058 	.word	0x40026058
 8001f44:	40011400 	.word	0x40011400
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	20004f14 	.word	0x20004f14
 8001f50:	40026428 	.word	0x40026428
 8001f54:	200050d8 	.word	0x200050d8
 8001f58:	400264a0 	.word	0x400264a0

08001f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f62:	490e      	ldr	r1, [pc, #56]	; (8001f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f78:	4c0b      	ldr	r4, [pc, #44]	; (8001fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f86:	f7ff fa35 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f015 f945 	bl	8017218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8e:	f7fe ffb5 	bl	8000efc <main>
  bx  lr    
 8001f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001fa0:	0801b4e8 	.word	0x0801b4e8
  ldr r2, =_sbss
 8001fa4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001fa8:	2000bbf0 	.word	0x2000bbf0

08001fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC_IRQHandler>
	...

08001fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_Init+0x40>)
 8001fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_Init+0x40>)
 8001fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_Init+0x40>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 fb5e 	bl	800269a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f7ff f860 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7ff f832 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	200052c4 	.word	0x200052c4

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200052c4 	.word	0x200052c4

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e033      	b.n	80020fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fb5e 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c2:	f023 0302 	bic.w	r3, r3, #2
 80020c6:	f043 0202 	orr.w	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f93a 	bl	8002348 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ea:	e001      	b.n	80020f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1c>
 800211c:	2302      	movs	r3, #2
 800211e:	e105      	b.n	800232c <HAL_ADC_ConfigChannel+0x228>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b09      	cmp	r3, #9
 800212e:	d925      	bls.n	800217c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	3b1e      	subs	r3, #30
 8002146:	2207      	movs	r2, #7
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43da      	mvns	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	4603      	mov	r3, r0
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4403      	add	r3, r0
 800216e:	3b1e      	subs	r3, #30
 8002170:	409a      	lsls	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e022      	b.n	80021c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	2207      	movs	r2, #7
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4403      	add	r3, r0
 80021b8:	409a      	lsls	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d824      	bhi.n	8002214 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b05      	subs	r3, #5
 80021dc:	221f      	movs	r2, #31
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b05      	subs	r3, #5
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
 8002212:	e04c      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d824      	bhi.n	8002266 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b23      	subs	r3, #35	; 0x23
 800222e:	221f      	movs	r2, #31
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43da      	mvns	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	400a      	ands	r2, r1
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b23      	subs	r3, #35	; 0x23
 8002258:	fa00 f203 	lsl.w	r2, r0, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
 8002264:	e023      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	221f      	movs	r2, #31
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	400a      	ands	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b41      	subs	r3, #65	; 0x41
 80022a2:	fa00 f203 	lsl.w	r2, r0, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_ADC_ConfigChannel+0x234>)
 80022b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a21      	ldr	r2, [pc, #132]	; (800233c <HAL_ADC_ConfigChannel+0x238>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d109      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1cc>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b12      	cmp	r3, #18
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_ADC_ConfigChannel+0x238>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d123      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x21e>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d003      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x1e6>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b11      	cmp	r3, #17
 80022e8:	d11b      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d111      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_ADC_ConfigChannel+0x23c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <HAL_ADC_ConfigChannel+0x240>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9a      	lsrs	r2, r3, #18
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002314:	e002      	b.n	800231c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40012300 	.word	0x40012300
 800233c:	40012000 	.word	0x40012000
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83

08002348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002350:	4b79      	ldr	r3, [pc, #484]	; (8002538 <ADC_Init+0x1f0>)
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	021a      	lsls	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <ADC_Init+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	e00f      	b.n	8002446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0202 	bic.w	r2, r2, #2
 8002454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7e1b      	ldrb	r3, [r3, #24]
 8002460:	005a      	lsls	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	3b01      	subs	r3, #1
 80024a0:	035a      	lsls	r2, r3, #13
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	e007      	b.n	80024bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	051a      	lsls	r2, r3, #20
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024fe:	025a      	lsls	r2, r3, #9
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	029a      	lsls	r2, r3, #10
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40012300 	.word	0x40012300
 800253c:	0f000001 	.word	0x0f000001

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff4c 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c2:	f7ff ff61 	bl	8002588 <__NVIC_GetPriorityGrouping>
 80026c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f7ff ffb1 	bl	8002634 <NVIC_EncodePriority>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff80 	bl	80025e0 <__NVIC_SetPriority>
}
 80026e0:	bf00      	nop
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff54 	bl	80025a4 <__NVIC_EnableIRQ>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff fc84 	bl	800201c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e099      	b.n	8002854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	e00f      	b.n	8002762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002742:	f7ff fc6b 	bl	800201c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b05      	cmp	r3, #5
 800274e:	d908      	bls.n	8002762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e078      	b.n	8002854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e8      	bne.n	8002742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_DMA_Init+0x158>)
 800277c:	4013      	ands	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d117      	bne.n	8002826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9e9 	bl	8002be0 <DMA_CheckFifoParam>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002822:	2301      	movs	r3, #1
 8002824:	e016      	b.n	8002854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f9a0 	bl	8002b74 <DMA_CalcBaseAndBitshift>
 8002834:	4603      	mov	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	223f      	movs	r2, #63	; 0x3f
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	f010803f 	.word	0xf010803f

08002860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800286c:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_DMA_IRQHandler+0x258>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a92      	ldr	r2, [pc, #584]	; (8002abc <HAL_DMA_IRQHandler+0x25c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0204 	bic.w	r2, r2, #4
 80028b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2208      	movs	r2, #8
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2201      	movs	r2, #1
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2201      	movs	r2, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2204      	movs	r2, #4
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2204      	movs	r2, #4
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2210      	movs	r2, #16
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d043      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03c      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2210      	movs	r2, #16
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d018      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d108      	bne.n	8002990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d024      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
 800298e:	e01f      	b.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0208 	bic.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2220      	movs	r2, #32
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 808e 	beq.w	8002afe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8086 	beq.w	8002afe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	2220      	movs	r2, #32
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d136      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x1da>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	223f      	movs	r2, #63	; 0x3f
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d07d      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
        }
        return;
 8002a76:	e078      	b.n	8002b6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01c      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d030      	beq.n	8002afe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e02b      	b.n	8002afe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d027      	beq.n	8002afe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
 8002ab6:	e022      	b.n	8002afe <HAL_DMA_IRQHandler+0x29e>
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0210 	bic.w	r2, r2, #16
 8002adc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d032      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2205      	movs	r2, #5
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d307      	bcc.n	8002b46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f2      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x2ca>
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b46:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	e000      	b.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b6a:	bf00      	nop
    }
  }
}
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop

08002b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b10      	subs	r3, #16
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d909      	bls.n	8002bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb4:	e007      	b.n	8002bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	aaaaaaab 	.word	0xaaaaaaab
 8002bdc:	0801b24c 	.word	0x0801b24c

08002be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0x5a>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d856      	bhi.n	8002cae <DMA_CheckFifoParam+0xce>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <DMA_CheckFifoParam+0x28>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c2b 	.word	0x08002c2b
 8002c10:	08002c19 	.word	0x08002c19
 8002c14:	08002caf 	.word	0x08002caf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d046      	beq.n	8002cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e043      	b.n	8002cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c32:	d140      	bne.n	8002cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e03d      	b.n	8002cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	d121      	bne.n	8002c88 <DMA_CheckFifoParam+0xa8>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d837      	bhi.n	8002cba <DMA_CheckFifoParam+0xda>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <DMA_CheckFifoParam+0x70>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c67 	.word	0x08002c67
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002c79 	.word	0x08002c79
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e030      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d025      	beq.n	8002cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e022      	b.n	8002cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c80:	d11f      	bne.n	8002cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c86:	e01c      	b.n	8002cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d903      	bls.n	8002c96 <DMA_CheckFifoParam+0xb6>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d003      	beq.n	8002c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c94:	e018      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9a:	e015      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00e      	beq.n	8002cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e00b      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e00a      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e008      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e006      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop

08002cd8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002ce8:	4baa      	ldr	r3, [pc, #680]	; (8002f94 <HAL_ETH_Init+0x2bc>)
 8002cea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e183      	b.n	8003006 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f003 fd5c 	bl	80067d0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_ETH_Init+0x2c0>)
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	4a9d      	ldr	r2, [pc, #628]	; (8002f98 <HAL_ETH_Init+0x2c0>)
 8002d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d26:	6453      	str	r3, [r2, #68]	; 0x44
 8002d28:	4b9b      	ldr	r3, [pc, #620]	; (8002f98 <HAL_ETH_Init+0x2c0>)
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d34:	4b99      	ldr	r3, [pc, #612]	; (8002f9c <HAL_ETH_Init+0x2c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a98      	ldr	r2, [pc, #608]	; (8002f9c <HAL_ETH_Init+0x2c4>)
 8002d3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d3e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d40:	4b96      	ldr	r3, [pc, #600]	; (8002f9c <HAL_ETH_Init+0x2c4>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4994      	ldr	r1, [pc, #592]	; (8002f9c <HAL_ETH_Init+0x2c4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d64:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d66:	f7ff f959 	bl	800201c <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d6c:	e011      	b.n	8002d92 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002d6e:	f7ff f955 	bl	800201c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d7c:	d909      	bls.n	8002d92 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2203      	movs	r2, #3
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e139      	b.n	8003006 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e4      	bne.n	8002d6e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f023 031c 	bic.w	r3, r3, #28
 8002db2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002db4:	f002 f85e 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8002db8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	; (8002fa0 <HAL_ETH_Init+0x2c8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_ETH_Init+0xfc>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4a77      	ldr	r2, [pc, #476]	; (8002fa4 <HAL_ETH_Init+0x2cc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d804      	bhi.n	8002dd4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e027      	b.n	8002e24 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_ETH_Init+0x2cc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d908      	bls.n	8002dee <HAL_ETH_Init+0x116>
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4a6d      	ldr	r2, [pc, #436]	; (8002f94 <HAL_ETH_Init+0x2bc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d204      	bcs.n	8002dee <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f043 030c 	orr.w	r3, r3, #12
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e01a      	b.n	8002e24 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4a68      	ldr	r2, [pc, #416]	; (8002f94 <HAL_ETH_Init+0x2bc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d303      	bcc.n	8002dfe <HAL_ETH_Init+0x126>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4a6b      	ldr	r2, [pc, #428]	; (8002fa8 <HAL_ETH_Init+0x2d0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d911      	bls.n	8002e22 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_ETH_Init+0x2d0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d908      	bls.n	8002e18 <HAL_ETH_Init+0x140>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_ETH_Init+0x2d4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d804      	bhi.n	8002e18 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e005      	b.n	8002e24 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	e000      	b.n	8002e24 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e22:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fc17 	bl	8003666 <HAL_ETH_WritePHYRegister>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002e42:	6939      	ldr	r1, [r7, #16]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fdcd 	bl	80039e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0d7      	b.n	8003006 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002e56:	20ff      	movs	r0, #255	; 0xff
 8002e58:	f7ff f8ec 	bl	8002034 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a5 	beq.w	8002fb0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e66:	f7ff f8d9 	bl	800201c <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	461a      	mov	r2, r3
 8002e72:	2101      	movs	r1, #1
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fb8e 	bl	8003596 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002e7a:	f7ff f8cf 	bl	800201c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d90f      	bls.n	8002eac <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fda6 	bl	80039e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0ac      	b.n	8003006 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0da      	beq.n	8002e6c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eba:	2100      	movs	r1, #0
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fbd2 	bl	8003666 <HAL_ETH_WritePHYRegister>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ecc:	6939      	ldr	r1, [r7, #16]
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fd88 	bl	80039e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002edc:	2301      	movs	r3, #1
 8002ede:	e092      	b.n	8003006 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7ff f89c 	bl	800201c <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	461a      	mov	r2, r3
 8002eec:	2101      	movs	r1, #1
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fb51 	bl	8003596 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002ef4:	f7ff f892 	bl	800201c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d90f      	bls.n	8002f26 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f0a:	6939      	ldr	r1, [r7, #16]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fd69 	bl	80039e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e06f      	b.n	8003006 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0da      	beq.n	8002ee6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	461a      	mov	r2, r3
 8002f36:	2110      	movs	r1, #16
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb2c 	bl	8003596 <HAL_ETH_ReadPHYRegister>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f48:	6939      	ldr	r1, [r7, #16]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fd4a 	bl	80039e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e054      	b.n	8003006 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	e002      	b.n	8002f76 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	e035      	b.n	8002ff4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e030      	b.n	8002ff4 <HAL_ETH_Init+0x31c>
 8002f92:	bf00      	nop
 8002f94:	03938700 	.word	0x03938700
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	01312cff 	.word	0x01312cff
 8002fa4:	02160ebf 	.word	0x02160ebf
 8002fa8:	05f5e0ff 	.word	0x05f5e0ff
 8002fac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb4c 	bl	8003666 <HAL_ETH_WritePHYRegister>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fd8:	6939      	ldr	r1, [r7, #16]
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fd02 	bl	80039e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e00c      	b.n	8003006 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002fec:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002ff0:	f7ff f820 	bl	8002034 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fcf4 	bl	80039e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop

08003010 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ETH_DMATxDescListInit+0x20>
 800302c:	2302      	movs	r3, #2
 800302e:	e052      	b.n	80030d6 <HAL_ETH_DMATxDescListInit+0xc6>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e030      	b.n	80030ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	015b      	lsls	r3, r3, #5
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	4413      	add	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800305c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	461a      	mov	r2, r3
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	d208      	bcs.n	80030a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3301      	adds	r3, #1
 8003094:	015b      	lsls	r3, r3, #5
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	461a      	mov	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	e002      	b.n	80030a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3301      	adds	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3ca      	bcc.n	800304c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c0:	3310      	adds	r3, #16
 80030c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ETH_DMARxDescListInit+0x20>
 80030fe:	2302      	movs	r3, #2
 8003100:	e056      	b.n	80031b0 <HAL_ETH_DMARxDescListInit+0xce>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e034      	b.n	8003188 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	015b      	lsls	r3, r3, #5
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800312e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003136:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	461a      	mov	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	3b01      	subs	r3, #1
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	429a      	cmp	r2, r3
 8003168:	d208      	bcs.n	800317c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	015b      	lsls	r3, r3, #5
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	4413      	add	r3, r2
 8003174:	461a      	mov	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e002      	b.n	8003182 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3c6      	bcc.n	800311e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319a:	330c      	adds	r3, #12
 800319c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_ETH_TransmitFrame+0x24>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0cd      	b.n	800337c <HAL_ETH_TransmitFrame+0x1c0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003206:	2301      	movs	r3, #1
 8003208:	e0b8      	b.n	800337c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da09      	bge.n	8003228 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2212      	movs	r2, #18
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0a9      	b.n	800337c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800322e:	4293      	cmp	r3, r2
 8003230:	d915      	bls.n	800325e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_ETH_TransmitFrame+0x1cc>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_ETH_TransmitFrame+0x1cc>)
 8003242:	fba3 1302 	umull	r1, r3, r3, r2
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e001      	b.n	8003262 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800325e:	2301      	movs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d11c      	bne.n	80032a2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003276:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003282:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003292:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a0:	e04b      	b.n	800333a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	e044      	b.n	8003332 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032b6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032cc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032d6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3b01      	subs	r3, #1
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d116      	bne.n	8003310 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80032f0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <HAL_ETH_TransmitFrame+0x1d0>)
 80032f6:	fb02 f203 	mul.w	r2, r2, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003302:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800330e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800331e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	3301      	adds	r3, #1
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3b6      	bcc.n	80032a8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	3314      	adds	r3, #20
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003356:	3314      	adds	r3, #20
 8003358:	2204      	movs	r2, #4
 800335a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003364:	3304      	adds	r3, #4
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	ac02b00b 	.word	0xac02b00b
 800338c:	fffffa0c 	.word	0xfffffa0c

08003390 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e074      	b.n	8003494 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80033ba:	e05a      	b.n	8003472 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d10d      	bne.n	80033ee <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
 80033ec:	e041      	b.n	8003472 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	461a      	mov	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
 8003412:	e02e      	b.n	8003472 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	2b01      	cmp	r3, #1
 800342c:	d103      	bne.n	8003436 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003442:	1f1a      	subs	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	461a      	mov	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e010      	b.n	8003494 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	db02      	blt.n	8003482 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d99c      	bls.n	80033bc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b0:	3314      	adds	r3, #20
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d112      	bne.n	80034e2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f003 fa35 	bl	800692c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ca:	3314      	adds	r3, #20
 80034cc:	2240      	movs	r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e0:	e01b      	b.n	800351a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ea:	3314      	adds	r3, #20
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d111      	bne.n	800351a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f839 	bl	800356e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003504:	3314      	adds	r3, #20
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003522:	3314      	adds	r3, #20
 8003524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003528:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003532:	3314      	adds	r3, #20
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d112      	bne.n	8003566 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f81e 	bl	8003582 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	3314      	adds	r3, #20
 8003550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003554:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	460b      	mov	r3, r1
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b82      	cmp	r3, #130	; 0x82
 80035b6:	d101      	bne.n	80035bc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
 80035ba:	e050      	b.n	800365e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2282      	movs	r2, #130	; 0x82
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 031c 	and.w	r3, r3, #28
 80035d2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8a1b      	ldrh	r3, [r3, #16]
 80035d8:	02db      	lsls	r3, r3, #11
 80035da:	b29b      	uxth	r3, r3
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0302 	bic.w	r3, r3, #2
 80035f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003608:	f7fe fd08 	bl	800201c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800360e:	e015      	b.n	800363c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003610:	f7fe fd04 	bl	800201c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361e:	d309      	bcc.n	8003634 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e014      	b.n	800365e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e4      	bne.n	8003610 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	b29b      	uxth	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	460b      	mov	r3, r1
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b42      	cmp	r3, #66	; 0x42
 8003686:	d101      	bne.n	800368c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
 800368a:	e04e      	b.n	800372a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2242      	movs	r2, #66	; 0x42
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 031c 	and.w	r3, r3, #28
 80036a2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8a1b      	ldrh	r3, [r3, #16]
 80036a8:	02db      	lsls	r3, r3, #11
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80036e2:	f7fe fc9b 	bl	800201c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036e8:	e015      	b.n	8003716 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80036ea:	f7fe fc97 	bl	800201c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d309      	bcc.n	800370e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00d      	b.n	800372a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e4      	bne.n	80036ea <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_ETH_Start+0x16>
 8003744:	2302      	movs	r3, #2
 8003746:	e01f      	b.n	8003788 <HAL_ETH_Start+0x56>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fb45 	bl	8003de8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fb7c 	bl	8003e5c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fc13 	bl	8003f90 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fbb0 	bl	8003ed0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fbdd 	bl	8003f30 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_ETH_Stop+0x16>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e01f      	b.n	80037e6 <HAL_ETH_Stop+0x56>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fba2 	bl	8003f00 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fbcf 	bl	8003f60 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fb67 	bl	8003e96 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fbe1 	bl	8003f90 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb27 	bl	8003e22 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ETH_ConfigMAC+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e0e4      	b.n	80039d6 <HAL_ETH_ConfigMAC+0x1e6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80b1 	beq.w	8003986 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <HAL_ETH_ConfigMAC+0x1f0>)
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800383c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003842:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003848:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800384e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003854:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800385a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003860:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003866:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800386c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003872:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003878:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800387e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003896:	2001      	movs	r0, #1
 8003898:	f7fe fbcc 	bl	8002034 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80038ac:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80038b2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80038b8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80038be:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80038c4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80038d6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80038d8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7fe fba6 	bl	8002034 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038f8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003902:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003912:	4013      	ands	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003920:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003926:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800392c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003932:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003938:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003950:	2001      	movs	r0, #1
 8003952:	f7fe fb6f 	bl	8002034 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003976:	2001      	movs	r0, #1
 8003978:	f7fe fb5c 	bl	8002034 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	61da      	str	r2, [r3, #28]
 8003984:	e01e      	b.n	80039c4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003994:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7fe fb3c 	bl	8002034 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	ff20810f 	.word	0xff20810f

080039e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b0b0      	sub	sp, #192	; 0xc0
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a00:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003a12:	2300      	movs	r3, #0
 8003a14:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a30:	e001      	b.n	8003a36 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a3a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a40:	2300      	movs	r3, #0
 8003a42:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003a50:	2340      	movs	r3, #64	; 0x40
 8003a52:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003ab8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003abc:	4bac      	ldr	r3, [pc, #688]	; (8003d70 <ETH_MACDMAConfig+0x38c>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003ac8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003acc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003ad0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003ad6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003ada:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003ade:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003ae4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003ae8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003aec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003af0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003af4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003af8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003afa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b0c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f7fe fa8b 	bl	8002034 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b26:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003b28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003b2c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003b2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003b30:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003b36:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003b3c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003b42:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003b4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003b54:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003b56:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fe fa66 	bl	8002034 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b70:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b7a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b84:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b94:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ba2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003ba4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003ba8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003baa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003bae:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003bb4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003bba:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003bc0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bd4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003be0:	2001      	movs	r0, #1
 8003be2:	f7fe fa27 	bl	8002034 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bee:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003bf0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003bf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7fe fa12 	bl	8002034 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c18:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c22:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c2c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003c3e:	2304      	movs	r3, #4
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c58:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c62:	2300      	movs	r3, #0
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6e:	3318      	adds	r3, #24
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <ETH_MACDMAConfig+0x390>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c82:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003c84:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c86:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003c88:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003c8a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003c8c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003c8e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003c90:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003c92:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003c94:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003c96:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003c98:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003c9a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003c9e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003ca2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cbc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc6:	3318      	adds	r3, #24
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7fe f9b0 	bl	8002034 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	3318      	adds	r3, #24
 8003cde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ce2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ce8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003cec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003cf0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003cf4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003cfa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003cfe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d0c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f7fe f989 	bl	8002034 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d2e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10f      	bne.n	8003d58 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	331c      	adds	r3, #28
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d54:	331c      	adds	r3, #28
 8003d56:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f809 	bl	8003d78 <ETH_MACAddressConfig>
}
 8003d66:	bf00      	nop
 8003d68:	37c0      	adds	r7, #192	; 0xc0
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	ff20810f 	.word	0xff20810f
 8003d74:	f8de3f23 	.word	0xf8de3f23

08003d78 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3305      	adds	r3, #5
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	3204      	adds	r2, #4
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <ETH_MACAddressConfig+0x68>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3303      	adds	r3, #3
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	061a      	lsls	r2, r3, #24
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3302      	adds	r3, #2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3301      	adds	r3, #1
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <ETH_MACAddressConfig+0x6c>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40028040 	.word	0x40028040
 8003de4:	40028044 	.word	0x40028044

08003de8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f000 f8e9 	bl	8003fe4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0208 	bic.w	r2, r2, #8
 8003e3c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f000 f8cc 	bl	8003fe4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0204 	orr.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e80:	2001      	movs	r0, #1
 8003e82:	f000 f8af 	bl	8003fe4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0204 	bic.w	r2, r2, #4
 8003eb0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f000 f892 	bl	8003fe4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef0:	3318      	adds	r3, #24
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f10:	3318      	adds	r3, #24
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f20:	3318      	adds	r3, #24
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f40:	3318      	adds	r3, #24
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0202 	orr.w	r2, r2, #2
 8003f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f50:	3318      	adds	r3, #24
 8003f52:	601a      	str	r2, [r3, #0]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	3318      	adds	r3, #24
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0202 	bic.w	r2, r2, #2
 8003f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f80:	3318      	adds	r3, #24
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f000 f80c 	bl	8003fe4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd6:	3318      	adds	r3, #24
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <ETH_Delay+0x38>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <ETH_Delay+0x3c>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0a5b      	lsrs	r3, r3, #9
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004000:	bf00      	nop
  } 
  while (Delay --);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1e5a      	subs	r2, r3, #1
 8004006:	60fa      	str	r2, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f9      	bne.n	8004000 <ETH_Delay+0x1c>
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000000 	.word	0x20000000
 8004020:	10624dd3 	.word	0x10624dd3

08004024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e16b      	b.n	8004318 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	429a      	cmp	r2, r3
 800405a:	f040 815a 	bne.w	8004312 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d005      	beq.n	8004076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004072:	2b02      	cmp	r3, #2
 8004074:	d130      	bne.n	80040d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ac:	2201      	movs	r2, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 0201 	and.w	r2, r3, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d017      	beq.n	8004114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d123      	bne.n	8004168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	220f      	movs	r2, #15
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0203 	and.w	r2, r3, #3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80b4 	beq.w	8004312 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	4b60      	ldr	r3, [pc, #384]	; (8004330 <HAL_GPIO_Init+0x30c>)
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	4a5f      	ldr	r2, [pc, #380]	; (8004330 <HAL_GPIO_Init+0x30c>)
 80041b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ba:	4b5d      	ldr	r3, [pc, #372]	; (8004330 <HAL_GPIO_Init+0x30c>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041c6:	4a5b      	ldr	r2, [pc, #364]	; (8004334 <HAL_GPIO_Init+0x310>)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	3302      	adds	r3, #2
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	220f      	movs	r2, #15
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a52      	ldr	r2, [pc, #328]	; (8004338 <HAL_GPIO_Init+0x314>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02b      	beq.n	800424a <HAL_GPIO_Init+0x226>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a51      	ldr	r2, [pc, #324]	; (800433c <HAL_GPIO_Init+0x318>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d025      	beq.n	8004246 <HAL_GPIO_Init+0x222>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a50      	ldr	r2, [pc, #320]	; (8004340 <HAL_GPIO_Init+0x31c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01f      	beq.n	8004242 <HAL_GPIO_Init+0x21e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a4f      	ldr	r2, [pc, #316]	; (8004344 <HAL_GPIO_Init+0x320>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d019      	beq.n	800423e <HAL_GPIO_Init+0x21a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a4e      	ldr	r2, [pc, #312]	; (8004348 <HAL_GPIO_Init+0x324>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_GPIO_Init+0x216>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a4d      	ldr	r2, [pc, #308]	; (800434c <HAL_GPIO_Init+0x328>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00d      	beq.n	8004236 <HAL_GPIO_Init+0x212>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a4c      	ldr	r2, [pc, #304]	; (8004350 <HAL_GPIO_Init+0x32c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <HAL_GPIO_Init+0x20e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a4b      	ldr	r2, [pc, #300]	; (8004354 <HAL_GPIO_Init+0x330>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_GPIO_Init+0x20a>
 800422a:	2307      	movs	r3, #7
 800422c:	e00e      	b.n	800424c <HAL_GPIO_Init+0x228>
 800422e:	2308      	movs	r3, #8
 8004230:	e00c      	b.n	800424c <HAL_GPIO_Init+0x228>
 8004232:	2306      	movs	r3, #6
 8004234:	e00a      	b.n	800424c <HAL_GPIO_Init+0x228>
 8004236:	2305      	movs	r3, #5
 8004238:	e008      	b.n	800424c <HAL_GPIO_Init+0x228>
 800423a:	2304      	movs	r3, #4
 800423c:	e006      	b.n	800424c <HAL_GPIO_Init+0x228>
 800423e:	2303      	movs	r3, #3
 8004240:	e004      	b.n	800424c <HAL_GPIO_Init+0x228>
 8004242:	2302      	movs	r3, #2
 8004244:	e002      	b.n	800424c <HAL_GPIO_Init+0x228>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_GPIO_Init+0x228>
 800424a:	2300      	movs	r3, #0
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	f002 0203 	and.w	r2, r2, #3
 8004252:	0092      	lsls	r2, r2, #2
 8004254:	4093      	lsls	r3, r2
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800425c:	4935      	ldr	r1, [pc, #212]	; (8004334 <HAL_GPIO_Init+0x310>)
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	3302      	adds	r3, #2
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_GPIO_Init+0x334>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800428e:	4a32      	ldr	r2, [pc, #200]	; (8004358 <HAL_GPIO_Init+0x334>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004294:	4b30      	ldr	r3, [pc, #192]	; (8004358 <HAL_GPIO_Init+0x334>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b8:	4a27      	ldr	r2, [pc, #156]	; (8004358 <HAL_GPIO_Init+0x334>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042be:	4b26      	ldr	r3, [pc, #152]	; (8004358 <HAL_GPIO_Init+0x334>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_GPIO_Init+0x334>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_GPIO_Init+0x334>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800430c:	4a12      	ldr	r2, [pc, #72]	; (8004358 <HAL_GPIO_Init+0x334>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3301      	adds	r3, #1
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	f67f ae90 	bls.w	8004040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3724      	adds	r7, #36	; 0x24
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	40013800 	.word	0x40013800
 8004338:	40020000 	.word	0x40020000
 800433c:	40020400 	.word	0x40020400
 8004340:	40020800 	.word	0x40020800
 8004344:	40020c00 	.word	0x40020c00
 8004348:	40021000 	.word	0x40021000
 800434c:	40021400 	.word	0x40021400
 8004350:	40021800 	.word	0x40021800
 8004354:	40021c00 	.word	0x40021c00
 8004358:	40013c00 	.word	0x40013c00

0800435c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
 8004368:	4613      	mov	r3, r2
 800436a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800436c:	787b      	ldrb	r3, [r7, #1]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004378:	e003      	b.n	8004382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	041a      	lsls	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043a0:	887a      	ldrh	r2, [r7, #2]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4013      	ands	r3, r2
 80043a6:	041a      	lsls	r2, r3, #16
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	400b      	ands	r3, r1
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e12b      	b.n	800462e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fce6 	bl	8000dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004428:	f000 fd30 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4a81      	ldr	r2, [pc, #516]	; (8004638 <HAL_I2C_Init+0x274>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d807      	bhi.n	8004448 <HAL_I2C_Init+0x84>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a80      	ldr	r2, [pc, #512]	; (800463c <HAL_I2C_Init+0x278>)
 800443c:	4293      	cmp	r3, r2
 800443e:	bf94      	ite	ls
 8004440:	2301      	movls	r3, #1
 8004442:	2300      	movhi	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e006      	b.n	8004456 <HAL_I2C_Init+0x92>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a7d      	ldr	r2, [pc, #500]	; (8004640 <HAL_I2C_Init+0x27c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	bf94      	ite	ls
 8004450:	2301      	movls	r3, #1
 8004452:	2300      	movhi	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0e7      	b.n	800462e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a78      	ldr	r2, [pc, #480]	; (8004644 <HAL_I2C_Init+0x280>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0c9b      	lsrs	r3, r3, #18
 8004468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a6a      	ldr	r2, [pc, #424]	; (8004638 <HAL_I2C_Init+0x274>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d802      	bhi.n	8004498 <HAL_I2C_Init+0xd4>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	e009      	b.n	80044ac <HAL_I2C_Init+0xe8>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	4a69      	ldr	r2, [pc, #420]	; (8004648 <HAL_I2C_Init+0x284>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	3301      	adds	r3, #1
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	495c      	ldr	r1, [pc, #368]	; (8004638 <HAL_I2C_Init+0x274>)
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d819      	bhi.n	8004500 <HAL_I2C_Init+0x13c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e59      	subs	r1, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044da:	1c59      	adds	r1, r3, #1
 80044dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044e0:	400b      	ands	r3, r1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_I2C_Init+0x138>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e59      	subs	r1, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fa:	e051      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 80044fc:	2304      	movs	r3, #4
 80044fe:	e04f      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d111      	bne.n	800452c <HAL_I2C_Init+0x168>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e012      	b.n	8004552 <HAL_I2C_Init+0x18e>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1e58      	subs	r0, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	0099      	lsls	r1, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Init+0x196>
 8004556:	2301      	movs	r3, #1
 8004558:	e022      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_I2C_Init+0x1bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1e58      	subs	r0, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	440b      	add	r3, r1
 8004570:	fbb0 f3f3 	udiv	r3, r0, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	e00f      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	0099      	lsls	r1, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6809      	ldr	r1, [r1, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6911      	ldr	r1, [r2, #16]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	000186a0 	.word	0x000186a0
 800463c:	001e847f 	.word	0x001e847f
 8004640:	003d08ff 	.word	0x003d08ff
 8004644:	431bde83 	.word	0x431bde83
 8004648:	10624dd3 	.word	0x10624dd3

0800464c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e264      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d075      	beq.n	8004756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466a:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d112      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d10b      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05b      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d157      	bne.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e23f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x74>
 80046b2:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a90      	ldr	r2, [pc, #576]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e01d      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x98>
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046e4:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a83      	ldr	r2, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd fc8a 	bl	800201c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd fc86 	bl	800201c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e204      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xc0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fd fc76 	bl	800201c <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004734:	f7fd fc72 	bl	800201c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e1f0      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d063      	beq.n	800482a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1c4      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4952      	ldr	r1, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd fc2b 	bl	800201c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fd fc27 	bl	800201c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1a5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4940      	ldr	r1, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fc0a 	bl	800201c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fd fc06 	bl	800201c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e184      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d030      	beq.n	8004898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fbea 	bl	800201c <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7fd fbe6 	bl	800201c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e164      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x200>
 800486a:	e015      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fd fbd3 	bl	800201c <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fd fbcf 	bl	800201c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e14d      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a0 	beq.w	80049e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd fb95 	bl	800201c <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e011      	b.n	800491a <HAL_RCC_OscConfig+0x2ce>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
 8004904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004908:	f7fd fb88 	bl	800201c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e106      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x4e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x2f0>
 800492e:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x312>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800495e:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fb4d 	bl	800201c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fd fb49 	bl	800201c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0c5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x33a>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fb37 	bl	800201c <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fd fb33 	bl	800201c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0af      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 809b 	beq.w	8004b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d05c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d141      	bne.n	8004a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd fb07 	bl	800201c <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fd fb03 	bl	800201c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e081      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	019b      	lsls	r3, r3, #6
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fd fadc 	bl	800201c <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fd fad8 	bl	800201c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e056      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x41c>
 8004a86:	e04e      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fac5 	bl	800201c <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd fac1 	bl	800201c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e03f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x44a>
 8004ab4:	e037      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e032      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d028      	beq.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11a      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40007000 	.word	0x40007000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	42470060 	.word	0x42470060

08004b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cc      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90c      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d044      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fd f9f6 	bl	800201c <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fd f9f2 	bl	800201c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d20c      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc f9de 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	0801b234 	.word	0x0801b234
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6079      	str	r1, [r7, #4]
 8004d12:	2100      	movs	r1, #0
 8004d14:	60f9      	str	r1, [r7, #12]
 8004d16:	2100      	movs	r1, #0
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1e:	4952      	ldr	r1, [pc, #328]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d20:	6889      	ldr	r1, [r1, #8]
 8004d22:	f001 010c 	and.w	r1, r1, #12
 8004d26:	2908      	cmp	r1, #8
 8004d28:	d00d      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0x3e>
 8004d2a:	2908      	cmp	r1, #8
 8004d2c:	f200 8094 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x150>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x32>
 8004d34:	2904      	cmp	r1, #4
 8004d36:	d003      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x38>
 8004d38:	e08e      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3a:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004d3c:	60bb      	str	r3, [r7, #8]
       break;
 8004d3e:	e08e      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d40:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d42:	60bb      	str	r3, [r7, #8]
      break;
 8004d44:	e08b      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d46:	4948      	ldr	r1, [pc, #288]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d48:	6849      	ldr	r1, [r1, #4]
 8004d4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d50:	4945      	ldr	r1, [pc, #276]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d52:	6849      	ldr	r1, [r1, #4]
 8004d54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d024      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4942      	ldr	r1, [pc, #264]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d5e:	6849      	ldr	r1, [r1, #4]
 8004d60:	0989      	lsrs	r1, r1, #6
 8004d62:	4608      	mov	r0, r1
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d6c:	f04f 0500 	mov.w	r5, #0
 8004d70:	ea00 0204 	and.w	r2, r0, r4
 8004d74:	ea01 0305 	and.w	r3, r1, r5
 8004d78:	493d      	ldr	r1, [pc, #244]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d7a:	fb01 f003 	mul.w	r0, r1, r3
 8004d7e:	2100      	movs	r1, #0
 8004d80:	fb01 f102 	mul.w	r1, r1, r2
 8004d84:	1844      	adds	r4, r0, r1
 8004d86:	493a      	ldr	r1, [pc, #232]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d88:	fba2 0101 	umull	r0, r1, r2, r1
 8004d8c:	1863      	adds	r3, r4, r1
 8004d8e:	4619      	mov	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f7fb fa6a 	bl	8000270 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e04a      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	461a      	mov	r2, r3
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	ea02 0400 	and.w	r4, r2, r0
 8004dbe:	ea03 0501 	and.w	r5, r3, r1
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	014b      	lsls	r3, r1, #5
 8004dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd4:	0142      	lsls	r2, r0, #5
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	1b00      	subs	r0, r0, r4
 8004ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	018b      	lsls	r3, r1, #6
 8004dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dee:	0182      	lsls	r2, r0, #6
 8004df0:	1a12      	subs	r2, r2, r0
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e04:	00d0      	lsls	r0, r2, #3
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	1912      	adds	r2, r2, r4
 8004e0c:	eb45 0303 	adc.w	r3, r5, r3
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0299      	lsls	r1, r3, #10
 8004e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e1e:	0290      	lsls	r0, r2, #10
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f7fb fa1e 	bl	8000270 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e5a:	60bb      	str	r3, [r7, #8]
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bdb0      	pop	{r4, r5, r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	017d7840 	.word	0x017d7840

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0801b244 	.word	0x0801b244

08004eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eb8:	f7ff ffdc 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0b5b      	lsrs	r3, r3, #13
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0801b244 	.word	0x0801b244

08004edc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	220f      	movs	r2, #15
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCC_GetClockConfig+0x60>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0207 	and.w	r2, r3, #7
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	40023c00 	.word	0x40023c00

08004f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e041      	b.n	8004fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fbf8 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 fca6 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04e      	b.n	8005096 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005022:	d01d      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a18      	ldr	r2, [pc, #96]	; (80050bc <HAL_TIM_Base_Start_IT+0xdc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d111      	bne.n	8005084 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b06      	cmp	r3, #6
 8005070:	d010      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005082:	e007      	b.n	8005094 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40010400 	.word	0x40010400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40001800 	.word	0x40001800

080050c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e041      	b.n	8005156 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f839 	bl	800515e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f000 fbe6 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e041      	b.n	8005208 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f839 	bl	8005210 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f000 fb8d 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0202 	mvn.w	r2, #2
 8005250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fb13 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fb05 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fb16 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0204 	mvn.w	r2, #4
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fae9 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fadb 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 faec 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d122      	bne.n	8005328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d11b      	bne.n	8005328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0208 	mvn.w	r2, #8
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2204      	movs	r2, #4
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fabf 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fab1 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fac2 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b10      	cmp	r3, #16
 8005334:	d122      	bne.n	800537c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b10      	cmp	r3, #16
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0210 	mvn.w	r2, #16
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2208      	movs	r2, #8
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa95 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa87 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fa98 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d10e      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0201 	mvn.w	r2, #1
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fb fe3a 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d10e      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d107      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 ff6a 	bl	80062a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d10e      	bne.n	8005400 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d107      	bne.n	8005400 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa5d 	bl	80058ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b20      	cmp	r3, #32
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0220 	mvn.w	r2, #32
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 ff34 	bl	8006294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_TIM_IC_ConfigChannel+0x1e>
 800544e:	2302      	movs	r3, #2
 8005450:	e088      	b.n	8005564 <HAL_TIM_IC_ConfigChannel+0x130>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6819      	ldr	r1, [r3, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f000 fc7e 	bl	8005d70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 020c 	bic.w	r2, r2, #12
 8005482:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6999      	ldr	r1, [r3, #24]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	619a      	str	r2, [r3, #24]
 8005496:	e060      	b.n	800555a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b04      	cmp	r3, #4
 800549c:	d11c      	bne.n	80054d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f000 fd02 	bl	8005eb6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6999      	ldr	r1, [r3, #24]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	021a      	lsls	r2, r3, #8
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
 80054d6:	e040      	b.n	800555a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d11b      	bne.n	8005516 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f000 fd4f 	bl	8005f90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 020c 	bic.w	r2, r2, #12
 8005500:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
 8005514:	e021      	b.n	800555a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d11c      	bne.n	8005556 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f000 fd6c 	bl	8006008 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800553e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69d9      	ldr	r1, [r3, #28]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	61da      	str	r2, [r3, #28]
 8005554:	e001      	b.n	800555a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005586:	2302      	movs	r3, #2
 8005588:	e0ae      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	f200 809f 	bhi.w	80056d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	080056d9 	.word	0x080056d9
 80055a8:	080056d9 	.word	0x080056d9
 80055ac:	080056d9 	.word	0x080056d9
 80055b0:	08005615 	.word	0x08005615
 80055b4:	080056d9 	.word	0x080056d9
 80055b8:	080056d9 	.word	0x080056d9
 80055bc:	080056d9 	.word	0x080056d9
 80055c0:	08005657 	.word	0x08005657
 80055c4:	080056d9 	.word	0x080056d9
 80055c8:	080056d9 	.word	0x080056d9
 80055cc:	080056d9 	.word	0x080056d9
 80055d0:	08005697 	.word	0x08005697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa18 	bl	8005a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0208 	orr.w	r2, r2, #8
 80055ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0204 	bic.w	r2, r2, #4
 80055fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	619a      	str	r2, [r3, #24]
      break;
 8005612:	e064      	b.n	80056de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fa68 	bl	8005af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6999      	ldr	r1, [r3, #24]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	619a      	str	r2, [r3, #24]
      break;
 8005654:	e043      	b.n	80056de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fabd 	bl	8005bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0208 	orr.w	r2, r2, #8
 8005670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0204 	bic.w	r2, r2, #4
 8005680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69d9      	ldr	r1, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	61da      	str	r2, [r3, #28]
      break;
 8005694:	e023      	b.n	80056de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fb11 	bl	8005cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69d9      	ldr	r1, [r3, #28]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	021a      	lsls	r2, r3, #8
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	61da      	str	r2, [r3, #28]
      break;
 80056d6:	e002      	b.n	80056de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]
      break;
 80056dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIM_ConfigClockSource+0x1c>
 8005708:	2302      	movs	r3, #2
 800570a:	e0b4      	b.n	8005876 <HAL_TIM_ConfigClockSource+0x186>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800572a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005744:	d03e      	beq.n	80057c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574a:	f200 8087 	bhi.w	800585c <HAL_TIM_ConfigClockSource+0x16c>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	f000 8086 	beq.w	8005862 <HAL_TIM_ConfigClockSource+0x172>
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575a:	d87f      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d01a      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0xa6>
 8005760:	2b70      	cmp	r3, #112	; 0x70
 8005762:	d87b      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b60      	cmp	r3, #96	; 0x60
 8005766:	d050      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x11a>
 8005768:	2b60      	cmp	r3, #96	; 0x60
 800576a:	d877      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b50      	cmp	r3, #80	; 0x50
 800576e:	d03c      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0xfa>
 8005770:	2b50      	cmp	r3, #80	; 0x50
 8005772:	d873      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d058      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x13a>
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d86f      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b30      	cmp	r3, #48	; 0x30
 800577e:	d064      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x15a>
 8005780:	2b30      	cmp	r3, #48	; 0x30
 8005782:	d86b      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b20      	cmp	r3, #32
 8005786:	d060      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x15a>
 8005788:	2b20      	cmp	r3, #32
 800578a:	d867      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05c      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x15a>
 8005790:	2b10      	cmp	r3, #16
 8005792:	d05a      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x15a>
 8005794:	e062      	b.n	800585c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6899      	ldr	r1, [r3, #8]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f000 fc87 	bl	80060b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	609a      	str	r2, [r3, #8]
      break;
 80057c2:	e04f      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6899      	ldr	r1, [r3, #8]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f000 fc70 	bl	80060b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057e6:	609a      	str	r2, [r3, #8]
      break;
 80057e8:	e03c      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 fb2e 	bl	8005e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2150      	movs	r1, #80	; 0x50
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fc3d 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 8005808:	e02c      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	f000 fb8a 	bl	8005f30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2160      	movs	r1, #96	; 0x60
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc2d 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 8005828:	e01c      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fb0e 	bl	8005e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2140      	movs	r1, #64	; 0x40
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fc1d 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 8005848:	e00c      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f000 fc14 	bl	8006082 <TIM_ITRx_SetConfig>
      break;
 800585a:	e003      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	73fb      	strb	r3, [r7, #15]
      break;
 8005860:	e000      	b.n	8005864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a40      	ldr	r2, [pc, #256]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3d      	ldr	r2, [pc, #244]	; (80059e8 <TIM_Base_SetConfig+0x118>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <TIM_Base_SetConfig+0x11c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <TIM_Base_SetConfig+0x120>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d02b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d027      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2c      	ldr	r2, [pc, #176]	; (80059e8 <TIM_Base_SetConfig+0x118>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d023      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <TIM_Base_SetConfig+0x11c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <TIM_Base_SetConfig+0x120>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d017      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <TIM_Base_SetConfig+0x128>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <TIM_Base_SetConfig+0x12c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <TIM_Base_SetConfig+0x130>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a25      	ldr	r2, [pc, #148]	; (8005a04 <TIM_Base_SetConfig+0x134>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <TIM_Base_SetConfig+0x138>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <TIM_Base_SetConfig+0x13c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <TIM_Base_SetConfig+0x114>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_Base_SetConfig+0xf8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <TIM_Base_SetConfig+0x124>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d103      	bne.n	80059d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	40001800 	.word	0x40001800
 8005a08:	40001c00 	.word	0x40001c00
 8005a0c:	40002000 	.word	0x40002000

08005a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0302 	bic.w	r3, r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <TIM_OC1_SetConfig+0xd8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC1_SetConfig+0x64>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <TIM_OC1_SetConfig+0xdc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10c      	bne.n	8005a8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0308 	bic.w	r3, r3, #8
 8005a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <TIM_OC1_SetConfig+0xd8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC1_SetConfig+0x8e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a14      	ldr	r2, [pc, #80]	; (8005aec <TIM_OC1_SetConfig+0xdc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d111      	bne.n	8005ac2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40010400 	.word	0x40010400

08005af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0320 	bic.w	r3, r3, #32
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <TIM_OC2_SetConfig+0xe4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC2_SetConfig+0x68>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <TIM_OC2_SetConfig+0xe8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10d      	bne.n	8005b74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <TIM_OC2_SetConfig+0xe4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC2_SetConfig+0x94>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <TIM_OC2_SetConfig+0xe8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d113      	bne.n	8005bac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40010400 	.word	0x40010400

08005bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <TIM_OC3_SetConfig+0xe0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC3_SetConfig+0x66>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <TIM_OC3_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10d      	bne.n	8005c5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <TIM_OC3_SetConfig+0xe0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC3_SetConfig+0x92>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <TIM_OC3_SetConfig+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d113      	bne.n	8005c96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	621a      	str	r2, [r3, #32]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40010400 	.word	0x40010400

08005cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <TIM_OC4_SetConfig+0xa4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC4_SetConfig+0x68>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <TIM_OC4_SetConfig+0xa8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d109      	bne.n	8005d40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	019b      	lsls	r3, r3, #6
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40010400 	.word	0x40010400

08005d70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0201 	bic.w	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a28      	ldr	r2, [pc, #160]	; (8005e3c <TIM_TI1_SetConfig+0xcc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01b      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d017      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <TIM_TI1_SetConfig+0xd0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a24      	ldr	r2, [pc, #144]	; (8005e44 <TIM_TI1_SetConfig+0xd4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00f      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <TIM_TI1_SetConfig+0xd8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <TIM_TI1_SetConfig+0xdc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <TIM_TI1_SetConfig+0xe0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_TI1_SetConfig+0x66>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4a20      	ldr	r2, [pc, #128]	; (8005e54 <TIM_TI1_SetConfig+0xe4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <TIM_TI1_SetConfig+0x6a>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <TIM_TI1_SetConfig+0x6c>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e003      	b.n	8005dfa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f023 030a 	bic.w	r3, r3, #10
 8005e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f003 030a 	and.w	r3, r3, #10
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40001800 	.word	0x40001800

08005e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0201 	bic.w	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f023 030a 	bic.w	r3, r3, #10
 8005e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b087      	sub	sp, #28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f023 0210 	bic.w	r2, r3, #16
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	031b      	lsls	r3, r3, #12
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	031b      	lsls	r3, r3, #12
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006046:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	031b      	lsls	r3, r3, #12
 800604c:	b29b      	uxth	r3, r3
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800605a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	031b      	lsls	r3, r3, #12
 8006060:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	f043 0307 	orr.w	r3, r3, #7
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	021a      	lsls	r2, r3, #8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	431a      	orrs	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4313      	orrs	r3, r2
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e05a      	b.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a21      	ldr	r2, [pc, #132]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d022      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d01d      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1d      	ldr	r2, [pc, #116]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d018      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00e      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a15      	ldr	r2, [pc, #84]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d10c      	bne.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40000c00 	.word	0x40000c00
 80061e4:	40010400 	.word	0x40010400
 80061e8:	40014000 	.word	0x40014000
 80061ec:	40001800 	.word	0x40001800

080061f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006208:	2302      	movs	r3, #2
 800620a:	e03d      	b.n	8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e03f      	b.n	800634e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fbb4 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f829 	bl	8006358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	b09f      	sub	sp, #124	; 0x7c
 800635e:	af00      	add	r7, sp, #0
 8006360:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	68d9      	ldr	r1, [r3, #12]
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	ea40 0301 	orr.w	r3, r0, r1
 8006378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	431a      	orrs	r2, r3
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	431a      	orrs	r2, r3
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	4313      	orrs	r3, r2
 8006390:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800639c:	f021 010c 	bic.w	r1, r1, #12
 80063a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063a6:	430b      	orrs	r3, r1
 80063a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	6999      	ldr	r1, [r3, #24]
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	ea40 0301 	orr.w	r3, r0, r1
 80063c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4bc5      	ldr	r3, [pc, #788]	; (80066dc <UART_SetConfig+0x384>)
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d004      	beq.n	80063d6 <UART_SetConfig+0x7e>
 80063cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4bc3      	ldr	r3, [pc, #780]	; (80066e0 <UART_SetConfig+0x388>)
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d103      	bne.n	80063de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063d6:	f7fe fd6d 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 80063da:	6778      	str	r0, [r7, #116]	; 0x74
 80063dc:	e002      	b.n	80063e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063de:	f7fe fd55 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80063e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ec:	f040 80b6 	bne.w	800655c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063f2:	461c      	mov	r4, r3
 80063f4:	f04f 0500 	mov.w	r5, #0
 80063f8:	4622      	mov	r2, r4
 80063fa:	462b      	mov	r3, r5
 80063fc:	1891      	adds	r1, r2, r2
 80063fe:	6439      	str	r1, [r7, #64]	; 0x40
 8006400:	415b      	adcs	r3, r3
 8006402:	647b      	str	r3, [r7, #68]	; 0x44
 8006404:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006408:	1912      	adds	r2, r2, r4
 800640a:	eb45 0303 	adc.w	r3, r5, r3
 800640e:	f04f 0000 	mov.w	r0, #0
 8006412:	f04f 0100 	mov.w	r1, #0
 8006416:	00d9      	lsls	r1, r3, #3
 8006418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800641c:	00d0      	lsls	r0, r2, #3
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	1911      	adds	r1, r2, r4
 8006424:	6639      	str	r1, [r7, #96]	; 0x60
 8006426:	416b      	adcs	r3, r5
 8006428:	667b      	str	r3, [r7, #100]	; 0x64
 800642a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	461a      	mov	r2, r3
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	1891      	adds	r1, r2, r2
 8006436:	63b9      	str	r1, [r7, #56]	; 0x38
 8006438:	415b      	adcs	r3, r3
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006440:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006444:	f7f9 ff14 	bl	8000270 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4ba5      	ldr	r3, [pc, #660]	; (80066e4 <UART_SetConfig+0x38c>)
 800644e:	fba3 2302 	umull	r2, r3, r3, r2
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	011e      	lsls	r6, r3, #4
 8006456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006458:	461c      	mov	r4, r3
 800645a:	f04f 0500 	mov.w	r5, #0
 800645e:	4622      	mov	r2, r4
 8006460:	462b      	mov	r3, r5
 8006462:	1891      	adds	r1, r2, r2
 8006464:	6339      	str	r1, [r7, #48]	; 0x30
 8006466:	415b      	adcs	r3, r3
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800646e:	1912      	adds	r2, r2, r4
 8006470:	eb45 0303 	adc.w	r3, r5, r3
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f04f 0100 	mov.w	r1, #0
 800647c:	00d9      	lsls	r1, r3, #3
 800647e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006482:	00d0      	lsls	r0, r2, #3
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	1911      	adds	r1, r2, r4
 800648a:	65b9      	str	r1, [r7, #88]	; 0x58
 800648c:	416b      	adcs	r3, r5
 800648e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	1891      	adds	r1, r2, r2
 800649c:	62b9      	str	r1, [r7, #40]	; 0x28
 800649e:	415b      	adcs	r3, r3
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064aa:	f7f9 fee1 	bl	8000270 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4b8c      	ldr	r3, [pc, #560]	; (80066e4 <UART_SetConfig+0x38c>)
 80064b4:	fba3 1302 	umull	r1, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	2164      	movs	r1, #100	; 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	3332      	adds	r3, #50	; 0x32
 80064c6:	4a87      	ldr	r2, [pc, #540]	; (80066e4 <UART_SetConfig+0x38c>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064d4:	441e      	add	r6, r3
 80064d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d8:	4618      	mov	r0, r3
 80064da:	f04f 0100 	mov.w	r1, #0
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	1894      	adds	r4, r2, r2
 80064e4:	623c      	str	r4, [r7, #32]
 80064e6:	415b      	adcs	r3, r3
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064ee:	1812      	adds	r2, r2, r0
 80064f0:	eb41 0303 	adc.w	r3, r1, r3
 80064f4:	f04f 0400 	mov.w	r4, #0
 80064f8:	f04f 0500 	mov.w	r5, #0
 80064fc:	00dd      	lsls	r5, r3, #3
 80064fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006502:	00d4      	lsls	r4, r2, #3
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	1814      	adds	r4, r2, r0
 800650a:	653c      	str	r4, [r7, #80]	; 0x50
 800650c:	414b      	adcs	r3, r1
 800650e:	657b      	str	r3, [r7, #84]	; 0x54
 8006510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	461a      	mov	r2, r3
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	1891      	adds	r1, r2, r2
 800651c:	61b9      	str	r1, [r7, #24]
 800651e:	415b      	adcs	r3, r3
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006526:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800652a:	f7f9 fea1 	bl	8000270 <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4b6c      	ldr	r3, [pc, #432]	; (80066e4 <UART_SetConfig+0x38c>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	; 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	3332      	adds	r3, #50	; 0x32
 8006546:	4a67      	ldr	r2, [pc, #412]	; (80066e4 <UART_SetConfig+0x38c>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 0207 	and.w	r2, r3, #7
 8006552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4432      	add	r2, r6
 8006558:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800655a:	e0b9      	b.n	80066d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655e:	461c      	mov	r4, r3
 8006560:	f04f 0500 	mov.w	r5, #0
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	1891      	adds	r1, r2, r2
 800656a:	6139      	str	r1, [r7, #16]
 800656c:	415b      	adcs	r3, r3
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006574:	1912      	adds	r2, r2, r4
 8006576:	eb45 0303 	adc.w	r3, r5, r3
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	00d9      	lsls	r1, r3, #3
 8006584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006588:	00d0      	lsls	r0, r2, #3
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	eb12 0804 	adds.w	r8, r2, r4
 8006592:	eb43 0905 	adc.w	r9, r3, r5
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4618      	mov	r0, r3
 800659c:	f04f 0100 	mov.w	r1, #0
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	008b      	lsls	r3, r1, #2
 80065aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065ae:	0082      	lsls	r2, r0, #2
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7f9 fe5c 	bl	8000270 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4b49      	ldr	r3, [pc, #292]	; (80066e4 <UART_SetConfig+0x38c>)
 80065be:	fba3 2302 	umull	r2, r3, r3, r2
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	011e      	lsls	r6, r3, #4
 80065c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c8:	4618      	mov	r0, r3
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	1894      	adds	r4, r2, r2
 80065d4:	60bc      	str	r4, [r7, #8]
 80065d6:	415b      	adcs	r3, r3
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065de:	1812      	adds	r2, r2, r0
 80065e0:	eb41 0303 	adc.w	r3, r1, r3
 80065e4:	f04f 0400 	mov.w	r4, #0
 80065e8:	f04f 0500 	mov.w	r5, #0
 80065ec:	00dd      	lsls	r5, r3, #3
 80065ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065f2:	00d4      	lsls	r4, r2, #3
 80065f4:	4622      	mov	r2, r4
 80065f6:	462b      	mov	r3, r5
 80065f8:	1814      	adds	r4, r2, r0
 80065fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80065fc:	414b      	adcs	r3, r1
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4618      	mov	r0, r3
 8006606:	f04f 0100 	mov.w	r1, #0
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006618:	0082      	lsls	r2, r0, #2
 800661a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800661e:	f7f9 fe27 	bl	8000270 <__aeabi_uldivmod>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4b2f      	ldr	r3, [pc, #188]	; (80066e4 <UART_SetConfig+0x38c>)
 8006628:	fba3 1302 	umull	r1, r3, r3, r2
 800662c:	095b      	lsrs	r3, r3, #5
 800662e:	2164      	movs	r1, #100	; 0x64
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	3332      	adds	r3, #50	; 0x32
 800663a:	4a2a      	ldr	r2, [pc, #168]	; (80066e4 <UART_SetConfig+0x38c>)
 800663c:	fba2 2303 	umull	r2, r3, r2, r3
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006646:	441e      	add	r6, r3
 8006648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800664a:	4618      	mov	r0, r3
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	1894      	adds	r4, r2, r2
 8006656:	603c      	str	r4, [r7, #0]
 8006658:	415b      	adcs	r3, r3
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006660:	1812      	adds	r2, r2, r0
 8006662:	eb41 0303 	adc.w	r3, r1, r3
 8006666:	f04f 0400 	mov.w	r4, #0
 800666a:	f04f 0500 	mov.w	r5, #0
 800666e:	00dd      	lsls	r5, r3, #3
 8006670:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006674:	00d4      	lsls	r4, r2, #3
 8006676:	4622      	mov	r2, r4
 8006678:	462b      	mov	r3, r5
 800667a:	eb12 0a00 	adds.w	sl, r2, r0
 800667e:	eb43 0b01 	adc.w	fp, r3, r1
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4618      	mov	r0, r3
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	008b      	lsls	r3, r1, #2
 8006696:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800669a:	0082      	lsls	r2, r0, #2
 800669c:	4650      	mov	r0, sl
 800669e:	4659      	mov	r1, fp
 80066a0:	f7f9 fde6 	bl	8000270 <__aeabi_uldivmod>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <UART_SetConfig+0x38c>)
 80066aa:	fba3 1302 	umull	r1, r3, r3, r2
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2164      	movs	r1, #100	; 0x64
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	3332      	adds	r3, #50	; 0x32
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <UART_SetConfig+0x38c>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f003 020f 	and.w	r2, r3, #15
 80066c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4432      	add	r2, r6
 80066ce:	609a      	str	r2, [r3, #8]
}
 80066d0:	bf00      	nop
 80066d2:	377c      	adds	r7, #124	; 0x7c
 80066d4:	46bd      	mov	sp, r7
 80066d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066da:	bf00      	nop
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40011400 	.word	0x40011400
 80066e4:	51eb851f 	.word	0x51eb851f

080066e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80066ee:	2100      	movs	r1, #0
 80066f0:	2000      	movs	r0, #0
 80066f2:	f004 fbfb 	bl	800aeec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80066f6:	4b2a      	ldr	r3, [pc, #168]	; (80067a0 <MX_LWIP_Init+0xb8>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80066fc:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <MX_LWIP_Init+0xbc>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006702:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <MX_LWIP_Init+0xc0>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006708:	4b28      	ldr	r3, [pc, #160]	; (80067ac <MX_LWIP_Init+0xc4>)
 800670a:	9302      	str	r3, [sp, #8]
 800670c:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <MX_LWIP_Init+0xc8>)
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <MX_LWIP_Init+0xc0>)
 8006716:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <MX_LWIP_Init+0xbc>)
 8006718:	4921      	ldr	r1, [pc, #132]	; (80067a0 <MX_LWIP_Init+0xb8>)
 800671a:	4826      	ldr	r0, [pc, #152]	; (80067b4 <MX_LWIP_Init+0xcc>)
 800671c:	f005 f96a 	bl	800b9f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006720:	4824      	ldr	r0, [pc, #144]	; (80067b4 <MX_LWIP_Init+0xcc>)
 8006722:	f005 fb21 	bl	800bd68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006726:	4b23      	ldr	r3, [pc, #140]	; (80067b4 <MX_LWIP_Init+0xcc>)
 8006728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800672c:	089b      	lsrs	r3, r3, #2
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006738:	481e      	ldr	r0, [pc, #120]	; (80067b4 <MX_LWIP_Init+0xcc>)
 800673a:	f005 fb25 	bl	800bd88 <netif_set_up>
 800673e:	e002      	b.n	8006746 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006740:	481c      	ldr	r0, [pc, #112]	; (80067b4 <MX_LWIP_Init+0xcc>)
 8006742:	f005 fb8d 	bl	800be60 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006746:	491c      	ldr	r1, [pc, #112]	; (80067b8 <MX_LWIP_Init+0xd0>)
 8006748:	481a      	ldr	r0, [pc, #104]	; (80067b4 <MX_LWIP_Init+0xcc>)
 800674a:	f005 fc23 	bl	800bf94 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800674e:	2200      	movs	r2, #0
 8006750:	2101      	movs	r1, #1
 8006752:	2001      	movs	r0, #1
 8006754:	f000 fea6 	bl	80074a4 <osSemaphoreNew>
 8006758:	4603      	mov	r3, r0
 800675a:	4a18      	ldr	r2, [pc, #96]	; (80067bc <MX_LWIP_Init+0xd4>)
 800675c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800675e:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <MX_LWIP_Init+0xd8>)
 8006760:	4a14      	ldr	r2, [pc, #80]	; (80067b4 <MX_LWIP_Init+0xcc>)
 8006762:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <MX_LWIP_Init+0xd4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <MX_LWIP_Init+0xd8>)
 800676a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800676c:	2224      	movs	r2, #36	; 0x24
 800676e:	2100      	movs	r1, #0
 8006770:	4814      	ldr	r0, [pc, #80]	; (80067c4 <MX_LWIP_Init+0xdc>)
 8006772:	f010 fd94 	bl	801729e <memset>
  attributes.name = "LinkThr";
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <MX_LWIP_Init+0xdc>)
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <MX_LWIP_Init+0xe0>)
 800677a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <MX_LWIP_Init+0xdc>)
 800677e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006782:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <MX_LWIP_Init+0xdc>)
 8006786:	2210      	movs	r2, #16
 8006788:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800678a:	4a0e      	ldr	r2, [pc, #56]	; (80067c4 <MX_LWIP_Init+0xdc>)
 800678c:	490c      	ldr	r1, [pc, #48]	; (80067c0 <MX_LWIP_Init+0xd8>)
 800678e:	480f      	ldr	r0, [pc, #60]	; (80067cc <MX_LWIP_Init+0xe4>)
 8006790:	f000 fccd 	bl	800712e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006794:	4807      	ldr	r0, [pc, #28]	; (80067b4 <MX_LWIP_Init+0xcc>)
 8006796:	f00c fd5f 	bl	8013258 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800679a:	bf00      	nop
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	2000532c 	.word	0x2000532c
 80067a4:	20005330 	.word	0x20005330
 80067a8:	20005334 	.word	0x20005334
 80067ac:	0800ae29 	.word	0x0800ae29
 80067b0:	08006df9 	.word	0x08006df9
 80067b4:	200052f4 	.word	0x200052f4
 80067b8:	08006edd 	.word	0x08006edd
 80067bc:	200000a4 	.word	0x200000a4
 80067c0:	200052c8 	.word	0x200052c8
 80067c4:	200052d0 	.word	0x200052d0
 80067c8:	0801824c 	.word	0x0801824c
 80067cc:	08006e65 	.word	0x08006e65

080067d0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	609a      	str	r2, [r3, #8]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a4a      	ldr	r2, [pc, #296]	; (8006918 <HAL_ETH_MspInit+0x148>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	f040 808d 	bne.w	800690e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80067f4:	2300      	movs	r3, #0
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	4b48      	ldr	r3, [pc, #288]	; (800691c <HAL_ETH_MspInit+0x14c>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	4a47      	ldr	r2, [pc, #284]	; (800691c <HAL_ETH_MspInit+0x14c>)
 80067fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006802:	6313      	str	r3, [r2, #48]	; 0x30
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	4b41      	ldr	r3, [pc, #260]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	4a40      	ldr	r2, [pc, #256]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800681a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800681e:	6313      	str	r3, [r2, #48]	; 0x30
 8006820:	4b3e      	ldr	r3, [pc, #248]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2300      	movs	r3, #0
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	4b3a      	ldr	r3, [pc, #232]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	4a39      	ldr	r2, [pc, #228]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800683a:	6313      	str	r3, [r2, #48]	; 0x30
 800683c:	4b37      	ldr	r3, [pc, #220]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	4b33      	ldr	r3, [pc, #204]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	4a32      	ldr	r2, [pc, #200]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	6313      	str	r3, [r2, #48]	; 0x30
 8006858:	4b30      	ldr	r3, [pc, #192]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006864:	2300      	movs	r3, #0
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	4b2c      	ldr	r3, [pc, #176]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	4a2b      	ldr	r2, [pc, #172]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	6313      	str	r3, [r2, #48]	; 0x30
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	4b25      	ldr	r3, [pc, #148]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	4a24      	ldr	r2, [pc, #144]	; (800691c <HAL_ETH_MspInit+0x14c>)
 800688a:	f043 0302 	orr.w	r3, r3, #2
 800688e:	6313      	str	r3, [r2, #48]	; 0x30
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <HAL_ETH_MspInit+0x14c>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800689c:	2332      	movs	r3, #50	; 0x32
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068a0:	2302      	movs	r3, #2
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a8:	2303      	movs	r3, #3
 80068aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068ac:	230b      	movs	r3, #11
 80068ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b4:	4619      	mov	r1, r3
 80068b6:	481a      	ldr	r0, [pc, #104]	; (8006920 <HAL_ETH_MspInit+0x150>)
 80068b8:	f7fd fbb4 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80068bc:	2386      	movs	r3, #134	; 0x86
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c0:	2302      	movs	r3, #2
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c8:	2303      	movs	r3, #3
 80068ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068cc:	230b      	movs	r3, #11
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d4:	4619      	mov	r1, r3
 80068d6:	4813      	ldr	r0, [pc, #76]	; (8006924 <HAL_ETH_MspInit+0x154>)
 80068d8:	f7fd fba4 	bl	8004024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80068dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e2:	2302      	movs	r3, #2
 80068e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ea:	2303      	movs	r3, #3
 80068ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068ee:	230b      	movs	r3, #11
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f6:	4619      	mov	r1, r3
 80068f8:	480b      	ldr	r0, [pc, #44]	; (8006928 <HAL_ETH_MspInit+0x158>)
 80068fa:	f7fd fb93 	bl	8004024 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80068fe:	2200      	movs	r2, #0
 8006900:	2105      	movs	r1, #5
 8006902:	203d      	movs	r0, #61	; 0x3d
 8006904:	f7fb fed4 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006908:	203d      	movs	r0, #61	; 0x3d
 800690a:	f7fb feed 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800690e:	bf00      	nop
 8006910:	3738      	adds	r7, #56	; 0x38
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40028000 	.word	0x40028000
 800691c:	40023800 	.word	0x40023800
 8006920:	40020800 	.word	0x40020800
 8006924:	40020000 	.word	0x40020000
 8006928:	40020400 	.word	0x40020400

0800692c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <HAL_ETH_RxCpltCallback+0x1c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fe8f 	bl	800765c <osSemaphoreRelease>
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	200000a8 	.word	0x200000a8

0800694c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b090      	sub	sp, #64	; 0x40
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006958:	4b5d      	ldr	r3, [pc, #372]	; (8006ad0 <low_level_init+0x184>)
 800695a:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <low_level_init+0x188>)
 800695c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800695e:	4b5c      	ldr	r3, [pc, #368]	; (8006ad0 <low_level_init+0x184>)
 8006960:	2201      	movs	r2, #1
 8006962:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006964:	4b5a      	ldr	r3, [pc, #360]	; (8006ad0 <low_level_init+0x184>)
 8006966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800696a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800696c:	4b58      	ldr	r3, [pc, #352]	; (8006ad0 <low_level_init+0x184>)
 800696e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006972:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006974:	4b56      	ldr	r3, [pc, #344]	; (8006ad0 <low_level_init+0x184>)
 8006976:	2201      	movs	r2, #1
 8006978:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800697a:	2300      	movs	r3, #0
 800697c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8006982:	23e1      	movs	r3, #225	; 0xe1
 8006984:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800698a:	2300      	movs	r3, #0
 800698c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800698e:	2300      	movs	r3, #0
 8006990:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8006992:	4a4f      	ldr	r2, [pc, #316]	; (8006ad0 <low_level_init+0x184>)
 8006994:	f107 030c 	add.w	r3, r7, #12
 8006998:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800699a:	4b4d      	ldr	r3, [pc, #308]	; (8006ad0 <low_level_init+0x184>)
 800699c:	2201      	movs	r2, #1
 800699e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80069a0:	4b4b      	ldr	r3, [pc, #300]	; (8006ad0 <low_level_init+0x184>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80069a6:	4b4a      	ldr	r3, [pc, #296]	; (8006ad0 <low_level_init+0x184>)
 80069a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069ac:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80069ae:	4848      	ldr	r0, [pc, #288]	; (8006ad0 <low_level_init+0x184>)
 80069b0:	f7fc f992 	bl	8002cd8 <HAL_ETH_Init>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80069ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069c8:	f043 0304 	orr.w	r3, r3, #4
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80069d4:	2304      	movs	r3, #4
 80069d6:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <low_level_init+0x18c>)
 80069d8:	4940      	ldr	r1, [pc, #256]	; (8006adc <low_level_init+0x190>)
 80069da:	483d      	ldr	r0, [pc, #244]	; (8006ad0 <low_level_init+0x184>)
 80069dc:	f7fc fb18 	bl	8003010 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80069e0:	2304      	movs	r3, #4
 80069e2:	4a3f      	ldr	r2, [pc, #252]	; (8006ae0 <low_level_init+0x194>)
 80069e4:	493f      	ldr	r1, [pc, #252]	; (8006ae4 <low_level_init+0x198>)
 80069e6:	483a      	ldr	r0, [pc, #232]	; (8006ad0 <low_level_init+0x184>)
 80069e8:	f7fc fb7b 	bl	80030e2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2206      	movs	r2, #6
 80069f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80069f4:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <low_level_init+0x184>)
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006a00:	4b33      	ldr	r3, [pc, #204]	; (8006ad0 <low_level_init+0x184>)
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	785a      	ldrb	r2, [r3, #1]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006a0c:	4b30      	ldr	r3, [pc, #192]	; (8006ad0 <low_level_init+0x184>)
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	789a      	ldrb	r2, [r3, #2]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006a18:	4b2d      	ldr	r3, [pc, #180]	; (8006ad0 <low_level_init+0x184>)
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	78da      	ldrb	r2, [r3, #3]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006a24:	4b2a      	ldr	r3, [pc, #168]	; (8006ad0 <low_level_init+0x184>)
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	791a      	ldrb	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <low_level_init+0x184>)
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	795a      	ldrb	r2, [r3, #5]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006a42:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a4a:	f043 030a 	orr.w	r3, r3, #10
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8006a56:	2200      	movs	r2, #0
 8006a58:	2101      	movs	r1, #1
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f000 fd22 	bl	80074a4 <osSemaphoreNew>
 8006a60:	4603      	mov	r3, r0
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <low_level_init+0x19c>)
 8006a64:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006a66:	f107 0314 	add.w	r3, r7, #20
 8006a6a:	2224      	movs	r2, #36	; 0x24
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f010 fc15 	bl	801729e <memset>
  attributes.name = "EthIf";
 8006a74:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <low_level_init+0x1a0>)
 8006a76:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006a78:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8006a7e:	2330      	movs	r3, #48	; 0x30
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006a82:	f107 0314 	add.w	r3, r7, #20
 8006a86:	461a      	mov	r2, r3
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4819      	ldr	r0, [pc, #100]	; (8006af0 <low_level_init+0x1a4>)
 8006a8c:	f000 fb4f 	bl	800712e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006a90:	480f      	ldr	r0, [pc, #60]	; (8006ad0 <low_level_init+0x184>)
 8006a92:	f7fc fe4e 	bl	8003732 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	211d      	movs	r1, #29
 8006a9e:	480c      	ldr	r0, [pc, #48]	; (8006ad0 <low_level_init+0x184>)
 8006aa0:	f7fc fd79 	bl	8003596 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f043 030b 	orr.w	r3, r3, #11
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	461a      	mov	r2, r3
 8006ab0:	211d      	movs	r1, #29
 8006ab2:	4807      	ldr	r0, [pc, #28]	; (8006ad0 <low_level_init+0x184>)
 8006ab4:	f7fc fdd7 	bl	8003666 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006ab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006abc:	461a      	mov	r2, r3
 8006abe:	211d      	movs	r1, #29
 8006ac0:	4803      	ldr	r0, [pc, #12]	; (8006ad0 <low_level_init+0x184>)
 8006ac2:	f7fc fd68 	bl	8003596 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006ac6:	bf00      	nop
 8006ac8:	3740      	adds	r7, #64	; 0x40
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20006c08 	.word	0x20006c08
 8006ad4:	40028000 	.word	0x40028000
 8006ad8:	20006c50 	.word	0x20006c50
 8006adc:	20005338 	.word	0x20005338
 8006ae0:	200053b8 	.word	0x200053b8
 8006ae4:	20006b88 	.word	0x20006b88
 8006ae8:	200000a8 	.word	0x200000a8
 8006aec:	08018254 	.word	0x08018254
 8006af0:	08006d99 	.word	0x08006d99

08006af4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006afe:	4b4b      	ldr	r3, [pc, #300]	; (8006c2c <low_level_output+0x138>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006b16:	4b45      	ldr	r3, [pc, #276]	; (8006c2c <low_level_output+0x138>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	623b      	str	r3, [r7, #32]
 8006b24:	e05a      	b.n	8006bdc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da03      	bge.n	8006b36 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006b2e:	23f8      	movs	r3, #248	; 0xf8
 8006b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006b34:	e05c      	b.n	8006bf0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	895b      	ldrh	r3, [r3, #10]
 8006b3a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006b40:	e02f      	b.n	8006ba2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	18d0      	adds	r0, r2, r3
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	18d1      	adds	r1, r2, r3
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006b56:	3304      	adds	r3, #4
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f010 fb92 	bl	8017282 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da03      	bge.n	8006b74 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006b6c:	23f8      	movs	r3, #248	; 0xf8
 8006b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006b72:	e03d      	b.n	8006bf0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006b84:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006b90:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006b9c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d8c8      	bhi.n	8006b42 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	18d0      	adds	r0, r2, r3
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f010 fb5e 	bl	8017282 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	623b      	str	r3, [r7, #32]
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1a1      	bne.n	8006b26 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006be2:	6979      	ldr	r1, [r7, #20]
 8006be4:	4811      	ldr	r0, [pc, #68]	; (8006c2c <low_level_output+0x138>)
 8006be6:	f7fc fae9 	bl	80031bc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <low_level_output+0x138>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00d      	beq.n	8006c20 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <low_level_output+0x138>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	2220      	movs	r2, #32
 8006c10:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <low_level_output+0x138>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006c20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3728      	adds	r7, #40	; 0x28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20006c08 	.word	0x20006c08

08006c30 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006c54:	484f      	ldr	r0, [pc, #316]	; (8006d94 <low_level_input+0x164>)
 8006c56:	f7fc fb9b 	bl	8003390 <HAL_ETH_GetReceivedFrame_IT>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <low_level_input+0x34>

    return NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e092      	b.n	8006d8a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006c64:	4b4b      	ldr	r3, [pc, #300]	; (8006d94 <low_level_input+0x164>)
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006c6a:	4b4a      	ldr	r3, [pc, #296]	; (8006d94 <low_level_input+0x164>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006c70:	89fb      	ldrh	r3, [r7, #14]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006c76:	89fb      	ldrh	r3, [r7, #14]
 8006c78:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f005 fa52 	bl	800c128 <pbuf_alloc>
 8006c84:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d04b      	beq.n	8006d24 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006c8c:	4b41      	ldr	r3, [pc, #260]	; (8006d94 <low_level_input+0x164>)
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9a:	e040      	b.n	8006d1e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	895b      	ldrh	r3, [r3, #10]
 8006ca0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006ca6:	e021      	b.n	8006cec <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	18d0      	adds	r0, r2, r3
 8006cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	18d1      	adds	r1, r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f010 fadf 	bl	8017282 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006cda:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006ce6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d8d6      	bhi.n	8006ca8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	18d0      	adds	r0, r2, r3
 8006d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f010 fab9 	bl	8017282 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1bb      	bne.n	8006c9c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006d24:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <low_level_input+0x164>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	e00b      	b.n	8006d48 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3301      	adds	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <low_level_input+0x164>)
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3ee      	bcc.n	8006d30 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <low_level_input+0x164>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006d58:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <low_level_input+0x164>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	3314      	adds	r3, #20
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00d      	beq.n	8006d88 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <low_level_input+0x164>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	3314      	adds	r3, #20
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <low_level_input+0x164>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	3308      	adds	r3, #8
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3730      	adds	r7, #48	; 0x30
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20006c08 	.word	0x20006c08

08006d98 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006da4:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <ethernetif_input+0x58>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fc03 	bl	80075b8 <osSemaphoreAcquire>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f5      	bne.n	8006da4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006db8:	480e      	ldr	r0, [pc, #56]	; (8006df4 <ethernetif_input+0x5c>)
 8006dba:	f010 f8dd 	bl	8016f78 <sys_mutex_lock>
        p = low_level_input( netif );
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7ff ff36 	bl	8006c30 <low_level_input>
 8006dc4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	68f9      	ldr	r1, [r7, #12]
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	4798      	blx	r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f005 fc87 	bl	800c6f0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006de2:	4804      	ldr	r0, [pc, #16]	; (8006df4 <ethernetif_input+0x5c>)
 8006de4:	f010 f8d7 	bl	8016f96 <sys_mutex_unlock>
      } while(p!=NULL);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e4      	bne.n	8006db8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006dee:	e7d9      	b.n	8006da4 <ethernetif_input+0xc>
 8006df0:	200000a8 	.word	0x200000a8
 8006df4:	20008460 	.word	0x20008460

08006df8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <ethernetif_init+0x1c>
 8006e06:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <ethernetif_init+0x48>)
 8006e08:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006e0c:	490d      	ldr	r1, [pc, #52]	; (8006e44 <ethernetif_init+0x4c>)
 8006e0e:	480e      	ldr	r0, [pc, #56]	; (8006e48 <ethernetif_init+0x50>)
 8006e10:	f010 faa8 	bl	8017364 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2273      	movs	r2, #115	; 0x73
 8006e18:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2274      	movs	r2, #116	; 0x74
 8006e20:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <ethernetif_init+0x54>)
 8006e28:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a08      	ldr	r2, [pc, #32]	; (8006e50 <ethernetif_init+0x58>)
 8006e2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fd8b 	bl	800694c <low_level_init>

  return ERR_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	0801825c 	.word	0x0801825c
 8006e44:	08018278 	.word	0x08018278
 8006e48:	08018288 	.word	0x08018288
 8006e4c:	08015125 	.word	0x08015125
 8006e50:	08006af5 	.word	0x08006af5

08006e54 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e58:	f7fb f8e0 	bl	800201c <HAL_GetTick>
 8006e5c:	4603      	mov	r3, r0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006e74:	f107 0308 	add.w	r3, r7, #8
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4816      	ldr	r0, [pc, #88]	; (8006ed8 <ethernetif_set_link+0x74>)
 8006e7e:	f7fc fb8a 	bl	8003596 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d108      	bne.n	8006eac <ethernetif_set_link+0x48>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f005 f80d 	bl	800bec4 <netif_set_link_up>
 8006eaa:	e011      	b.n	8006ed0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006eb4:	089b      	lsrs	r3, r3, #2
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <ethernetif_set_link+0x6c>
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f005 f832 	bl	800bf34 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006ed0:	20c8      	movs	r0, #200	; 0xc8
 8006ed2:	f000 f9be 	bl	8007252 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006ed6:	e7cd      	b.n	8006e74 <ethernetif_set_link+0x10>
 8006ed8:	20006c08 	.word	0x20006c08

08006edc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ef2:	089b      	lsrs	r3, r3, #2
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d05d      	beq.n	8006fba <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006efe:	4b34      	ldr	r3, [pc, #208]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d03f      	beq.n	8006f86 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006f06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4830      	ldr	r0, [pc, #192]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f0e:	f7fc fbaa 	bl	8003666 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006f12:	f7fb f883 	bl	800201c <HAL_GetTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006f1a:	f107 0308 	add.w	r3, r7, #8
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2101      	movs	r1, #1
 8006f22:	482b      	ldr	r0, [pc, #172]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f24:	f7fc fb37 	bl	8003596 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006f28:	f7fb f878 	bl	800201c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f36:	d828      	bhi.n	8006f8a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0eb      	beq.n	8006f1a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006f42:	f107 0308 	add.w	r3, r7, #8
 8006f46:	461a      	mov	r2, r3
 8006f48:	2110      	movs	r1, #16
 8006f4a:	4821      	ldr	r0, [pc, #132]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f4c:	f7fc fb23 	bl	8003596 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006f5a:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e002      	b.n	8006f6a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006f64:	4b1a      	ldr	r3, [pc, #104]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006f74:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	609a      	str	r2, [r3, #8]
 8006f7a:	e016      	b.n	8006faa <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006f7c:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	e011      	b.n	8006faa <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <ethernetif_update_config+0xb0>
          goto error;
 8006f8a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006f8c:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	08db      	lsrs	r3, r3, #3
 8006f92:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006f94:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	480a      	ldr	r0, [pc, #40]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006fa6:	f7fc fb5e 	bl	8003666 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006faa:	2100      	movs	r1, #0
 8006fac:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006fae:	f7fc fc1f 	bl	80037f0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006fb2:	4807      	ldr	r0, [pc, #28]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006fb4:	f7fc fbbd 	bl	8003732 <HAL_ETH_Start>
 8006fb8:	e002      	b.n	8006fc0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006fba:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <ethernetif_update_config+0xf4>)
 8006fbc:	f7fc fbe8 	bl	8003790 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f807 	bl	8006fd4 <ethernetif_notify_conn_changed>
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20006c08 	.word	0x20006c08

08006fd4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <__NVIC_SetPriority>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	db0a      	blt.n	8007012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	490c      	ldr	r1, [pc, #48]	; (8007034 <__NVIC_SetPriority+0x4c>)
 8007002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007006:	0112      	lsls	r2, r2, #4
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	440b      	add	r3, r1
 800700c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007010:	e00a      	b.n	8007028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4908      	ldr	r1, [pc, #32]	; (8007038 <__NVIC_SetPriority+0x50>)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	3b04      	subs	r3, #4
 8007020:	0112      	lsls	r2, r2, #4
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	440b      	add	r3, r1
 8007026:	761a      	strb	r2, [r3, #24]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	e000e100 	.word	0xe000e100
 8007038:	e000ed00 	.word	0xe000ed00

0800703c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <SysTick_Handler+0x1c>)
 8007042:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007044:	f002 fc96 	bl	8009974 <xTaskGetSchedulerState>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d001      	beq.n	8007052 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800704e:	f003 fb7b 	bl	800a748 <xPortSysTickHandler>
  }
}
 8007052:	bf00      	nop
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	e000e010 	.word	0xe000e010

0800705c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007060:	2100      	movs	r1, #0
 8007062:	f06f 0004 	mvn.w	r0, #4
 8007066:	f7ff ffbf 	bl	8006fe8 <__NVIC_SetPriority>
#endif
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007076:	f3ef 8305 	mrs	r3, IPSR
 800707a:	603b      	str	r3, [r7, #0]
  return(result);
 800707c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007082:	f06f 0305 	mvn.w	r3, #5
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	e00c      	b.n	80070a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <osKernelInitialize+0x44>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <osKernelInitialize+0x44>)
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007098:	2300      	movs	r3, #0
 800709a:	607b      	str	r3, [r7, #4]
 800709c:	e002      	b.n	80070a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800709e:	f04f 33ff 	mov.w	r3, #4294967295
 80070a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070a4:	687b      	ldr	r3, [r7, #4]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	200000ac 	.word	0x200000ac

080070b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070be:	f3ef 8305 	mrs	r3, IPSR
 80070c2:	603b      	str	r3, [r7, #0]
  return(result);
 80070c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80070ca:	f06f 0305 	mvn.w	r3, #5
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	e010      	b.n	80070f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <osKernelStart+0x48>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d109      	bne.n	80070ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070da:	f7ff ffbf 	bl	800705c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070de:	4b08      	ldr	r3, [pc, #32]	; (8007100 <osKernelStart+0x48>)
 80070e0:	2202      	movs	r2, #2
 80070e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80070e4:	f001 ffc8 	bl	8009078 <vTaskStartScheduler>
      stat = osOK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	e002      	b.n	80070f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070f4:	687b      	ldr	r3, [r7, #4]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200000ac 	.word	0x200000ac

08007104 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710a:	f3ef 8305 	mrs	r3, IPSR
 800710e:	603b      	str	r3, [r7, #0]
  return(result);
 8007110:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007116:	f002 f8db 	bl	80092d0 <xTaskGetTickCountFromISR>
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	e002      	b.n	8007124 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800711e:	f002 f8c7 	bl	80092b0 <xTaskGetTickCount>
 8007122:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007124:	687b      	ldr	r3, [r7, #4]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800712e:	b580      	push	{r7, lr}
 8007130:	b08e      	sub	sp, #56	; 0x38
 8007132:	af04      	add	r7, sp, #16
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800713e:	f3ef 8305 	mrs	r3, IPSR
 8007142:	617b      	str	r3, [r7, #20]
  return(result);
 8007144:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007146:	2b00      	cmp	r3, #0
 8007148:	d17e      	bne.n	8007248 <osThreadNew+0x11a>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d07b      	beq.n	8007248 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007150:	2380      	movs	r3, #128	; 0x80
 8007152:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007154:	2318      	movs	r3, #24
 8007156:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800715c:	f04f 33ff 	mov.w	r3, #4294967295
 8007160:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d045      	beq.n	80071f4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <osThreadNew+0x48>
        name = attr->name;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <osThreadNew+0x6e>
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2b38      	cmp	r3, #56	; 0x38
 800718e:	d805      	bhi.n	800719c <osThreadNew+0x6e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <osThreadNew+0x72>
        return (NULL);
 800719c:	2300      	movs	r3, #0
 800719e:	e054      	b.n	800724a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00e      	beq.n	80071d6 <osThreadNew+0xa8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	2bbb      	cmp	r3, #187	; 0xbb
 80071be:	d90a      	bls.n	80071d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <osThreadNew+0xa8>
        mem = 1;
 80071d0:	2301      	movs	r3, #1
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e010      	b.n	80071f8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10c      	bne.n	80071f8 <osThreadNew+0xca>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d108      	bne.n	80071f8 <osThreadNew+0xca>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <osThreadNew+0xca>
          mem = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	e001      	b.n	80071f8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d110      	bne.n	8007220 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007206:	9202      	str	r2, [sp, #8]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f001 fd43 	bl	8008ca0 <xTaskCreateStatic>
 800721a:	4603      	mov	r3, r0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e013      	b.n	8007248 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d110      	bne.n	8007248 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	b29a      	uxth	r2, r3
 800722a:	f107 0310 	add.w	r3, r7, #16
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 fd8e 	bl	8008d5a <xTaskCreate>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	d001      	beq.n	8007248 <osThreadNew+0x11a>
            hTask = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007248:	693b      	ldr	r3, [r7, #16]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3728      	adds	r7, #40	; 0x28
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800725a:	f3ef 8305 	mrs	r3, IPSR
 800725e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007260:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <osDelay+0x1c>
    stat = osErrorISR;
 8007266:	f06f 0305 	mvn.w	r3, #5
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e007      	b.n	800727e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <osDelay+0x2c>
      vTaskDelay(ticks);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fec9 	bl	8009010 <vTaskDelay>
    }
  }

  return (stat);
 800727e:	68fb      	ldr	r3, [r7, #12]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007294:	f3ef 8305 	mrs	r3, IPSR
 8007298:	60bb      	str	r3, [r7, #8]
  return(result);
 800729a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800729c:	2b00      	cmp	r3, #0
 800729e:	d174      	bne.n	800738a <osMutexNew+0x102>
    if (attr != NULL) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <osMutexNew+0x26>
      type = attr->attr_bits;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e001      	b.n	80072b2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <osMutexNew+0x3a>
      rmtx = 1U;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e001      	b.n	80072c6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d15c      	bne.n	800738a <osMutexNew+0x102>
      mem = -1;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d015      	beq.n	8007308 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <osMutexNew+0x6a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b4f      	cmp	r3, #79	; 0x4f
 80072ea:	d902      	bls.n	80072f2 <osMutexNew+0x6a>
          mem = 1;
 80072ec:	2301      	movs	r3, #1
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	e00c      	b.n	800730c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <osMutexNew+0x84>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <osMutexNew+0x84>
            mem = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e001      	b.n	800730c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d112      	bne.n	8007338 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	4619      	mov	r1, r3
 800731e:	2004      	movs	r0, #4
 8007320:	f000 fd69 	bl	8007df6 <xQueueCreateMutexStatic>
 8007324:	61f8      	str	r0, [r7, #28]
 8007326:	e016      	b.n	8007356 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4619      	mov	r1, r3
 800732e:	2001      	movs	r0, #1
 8007330:	f000 fd61 	bl	8007df6 <xQueueCreateMutexStatic>
 8007334:	61f8      	str	r0, [r7, #28]
 8007336:	e00e      	b.n	8007356 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007344:	2004      	movs	r0, #4
 8007346:	f000 fd3e 	bl	8007dc6 <xQueueCreateMutex>
 800734a:	61f8      	str	r0, [r7, #28]
 800734c:	e003      	b.n	8007356 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800734e:	2001      	movs	r0, #1
 8007350:	f000 fd39 	bl	8007dc6 <xQueueCreateMutex>
 8007354:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <osMutexNew+0xee>
        if (attr != NULL) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <osMutexNew+0xe2>
          name = attr->name;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e001      	b.n	800736e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	69f8      	ldr	r0, [r7, #28]
 8007372:	f001 fc0d 	bl	8008b90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <osMutexNew+0x102>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800738a:	69fb      	ldr	r3, [r7, #28]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b2:	f3ef 8305 	mrs	r3, IPSR
 80073b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80073be:	f06f 0305 	mvn.w	r3, #5
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e02c      	b.n	8007420 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d103      	bne.n	80073d4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80073cc:	f06f 0303 	mvn.w	r3, #3
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	e025      	b.n	8007420 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d011      	beq.n	80073fe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6938      	ldr	r0, [r7, #16]
 80073de:	f000 fd59 	bl	8007e94 <xQueueTakeMutexRecursive>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d01b      	beq.n	8007420 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80073ee:	f06f 0301 	mvn.w	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	e014      	b.n	8007420 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80073f6:	f06f 0302 	mvn.w	r3, #2
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e010      	b.n	8007420 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6938      	ldr	r0, [r7, #16]
 8007402:	f001 f8ed 	bl	80085e0 <xQueueSemaphoreTake>
 8007406:	4603      	mov	r3, r0
 8007408:	2b01      	cmp	r3, #1
 800740a:	d009      	beq.n	8007420 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007412:	f06f 0301 	mvn.w	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e002      	b.n	8007420 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800741a:	f06f 0302 	mvn.w	r3, #2
 800741e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007420:	697b      	ldr	r3, [r7, #20]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007446:	f3ef 8305 	mrs	r3, IPSR
 800744a:	60bb      	str	r3, [r7, #8]
  return(result);
 800744c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <osMutexRelease+0x30>
    stat = osErrorISR;
 8007452:	f06f 0305 	mvn.w	r3, #5
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e01f      	b.n	800749a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007460:	f06f 0303 	mvn.w	r3, #3
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	e018      	b.n	800749a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800746e:	6938      	ldr	r0, [r7, #16]
 8007470:	f000 fcdc 	bl	8007e2c <xQueueGiveMutexRecursive>
 8007474:	4603      	mov	r3, r0
 8007476:	2b01      	cmp	r3, #1
 8007478:	d00f      	beq.n	800749a <osMutexRelease+0x70>
        stat = osErrorResource;
 800747a:	f06f 0302 	mvn.w	r3, #2
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e00b      	b.n	800749a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007482:	2300      	movs	r3, #0
 8007484:	2200      	movs	r2, #0
 8007486:	2100      	movs	r1, #0
 8007488:	6938      	ldr	r0, [r7, #16]
 800748a:	f000 fda3 	bl	8007fd4 <xQueueGenericSend>
 800748e:	4603      	mov	r3, r0
 8007490:	2b01      	cmp	r3, #1
 8007492:	d002      	beq.n	800749a <osMutexRelease+0x70>
        stat = osErrorResource;
 8007494:	f06f 0302 	mvn.w	r3, #2
 8007498:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800749a:	697b      	ldr	r3, [r7, #20]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b4:	f3ef 8305 	mrs	r3, IPSR
 80074b8:	613b      	str	r3, [r7, #16]
  return(result);
 80074ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d175      	bne.n	80075ac <osSemaphoreNew+0x108>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d072      	beq.n	80075ac <osSemaphoreNew+0x108>
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d86e      	bhi.n	80075ac <osSemaphoreNew+0x108>
    mem = -1;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d015      	beq.n	8007506 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <osSemaphoreNew+0x4c>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	2b4f      	cmp	r3, #79	; 0x4f
 80074e8:	d902      	bls.n	80074f0 <osSemaphoreNew+0x4c>
        mem = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	e00c      	b.n	800750a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d108      	bne.n	800750a <osSemaphoreNew+0x66>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <osSemaphoreNew+0x66>
          mem = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	e001      	b.n	800750a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d04c      	beq.n	80075ac <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d128      	bne.n	800756a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d10a      	bne.n	8007534 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2203      	movs	r2, #3
 8007524:	9200      	str	r2, [sp, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	2001      	movs	r0, #1
 800752c:	f000 fb5c 	bl	8007be8 <xQueueGenericCreateStatic>
 8007530:	61f8      	str	r0, [r7, #28]
 8007532:	e005      	b.n	8007540 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007534:	2203      	movs	r2, #3
 8007536:	2100      	movs	r1, #0
 8007538:	2001      	movs	r0, #1
 800753a:	f000 fbcd 	bl	8007cd8 <xQueueGenericCreate>
 800753e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d022      	beq.n	800758c <osSemaphoreNew+0xe8>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01f      	beq.n	800758c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800754c:	2300      	movs	r3, #0
 800754e:	2200      	movs	r2, #0
 8007550:	2100      	movs	r1, #0
 8007552:	69f8      	ldr	r0, [r7, #28]
 8007554:	f000 fd3e 	bl	8007fd4 <xQueueGenericSend>
 8007558:	4603      	mov	r3, r0
 800755a:	2b01      	cmp	r3, #1
 800755c:	d016      	beq.n	800758c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800755e:	69f8      	ldr	r0, [r7, #28]
 8007560:	f001 f9ca 	bl	80088f8 <vQueueDelete>
            hSemaphore = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	e010      	b.n	800758c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d108      	bne.n	8007582 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	461a      	mov	r2, r3
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fcc1 	bl	8007f00 <xQueueCreateCountingSemaphoreStatic>
 800757e:	61f8      	str	r0, [r7, #28]
 8007580:	e004      	b.n	800758c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fcf2 	bl	8007f6e <xQueueCreateCountingSemaphore>
 800758a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00c      	beq.n	80075ac <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e001      	b.n	80075a4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80075a4:	6979      	ldr	r1, [r7, #20]
 80075a6:	69f8      	ldr	r0, [r7, #28]
 80075a8:	f001 faf2 	bl	8008b90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80075ac:	69fb      	ldr	r3, [r7, #28]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3720      	adds	r7, #32
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80075d0:	f06f 0303 	mvn.w	r3, #3
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e039      	b.n	800764c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d8:	f3ef 8305 	mrs	r3, IPSR
 80075dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80075de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d022      	beq.n	800762a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80075ea:	f06f 0303 	mvn.w	r3, #3
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e02c      	b.n	800764c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	461a      	mov	r2, r3
 80075fc:	2100      	movs	r1, #0
 80075fe:	6938      	ldr	r0, [r7, #16]
 8007600:	f001 f8fa 	bl	80087f8 <xQueueReceiveFromISR>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d003      	beq.n	8007612 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800760a:	f06f 0302 	mvn.w	r3, #2
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	e01c      	b.n	800764c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d019      	beq.n	800764c <osSemaphoreAcquire+0x94>
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <osSemaphoreAcquire+0xa0>)
 800761a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	e010      	b.n	800764c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6938      	ldr	r0, [r7, #16]
 800762e:	f000 ffd7 	bl	80085e0 <xQueueSemaphoreTake>
 8007632:	4603      	mov	r3, r0
 8007634:	2b01      	cmp	r3, #1
 8007636:	d009      	beq.n	800764c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800763e:	f06f 0301 	mvn.w	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e002      	b.n	800764c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007646:	f06f 0302 	mvn.w	r3, #2
 800764a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800764c:	697b      	ldr	r3, [r7, #20]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007672:	f06f 0303 	mvn.w	r3, #3
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e02c      	b.n	80076d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800767a:	f3ef 8305 	mrs	r3, IPSR
 800767e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007680:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01a      	beq.n	80076bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4619      	mov	r1, r3
 8007690:	6938      	ldr	r0, [r7, #16]
 8007692:	f000 fe38 	bl	8008306 <xQueueGiveFromISR>
 8007696:	4603      	mov	r3, r0
 8007698:	2b01      	cmp	r3, #1
 800769a:	d003      	beq.n	80076a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800769c:	f06f 0302 	mvn.w	r3, #2
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e017      	b.n	80076d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d014      	beq.n	80076d4 <osSemaphoreRelease+0x78>
 80076aa:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <osSemaphoreRelease+0x84>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	e00b      	b.n	80076d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80076bc:	2300      	movs	r3, #0
 80076be:	2200      	movs	r2, #0
 80076c0:	2100      	movs	r1, #0
 80076c2:	6938      	ldr	r0, [r7, #16]
 80076c4:	f000 fc86 	bl	8007fd4 <xQueueGenericSend>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d002      	beq.n	80076d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80076ce:	f06f 0302 	mvn.w	r3, #2
 80076d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80076d4:	697b      	ldr	r3, [r7, #20]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f4:	f3ef 8305 	mrs	r3, IPSR
 80076f8:	613b      	str	r3, [r7, #16]
  return(result);
 80076fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d15f      	bne.n	80077c0 <osMessageQueueNew+0xdc>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d05c      	beq.n	80077c0 <osMessageQueueNew+0xdc>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d059      	beq.n	80077c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800770c:	f04f 33ff 	mov.w	r3, #4294967295
 8007710:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d029      	beq.n	800776c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d012      	beq.n	8007746 <osMessageQueueNew+0x62>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b4f      	cmp	r3, #79	; 0x4f
 8007726:	d90e      	bls.n	8007746 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695a      	ldr	r2, [r3, #20]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <osMessageQueueNew+0x62>
        mem = 1;
 8007740:	2301      	movs	r3, #1
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	e014      	b.n	8007770 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d110      	bne.n	8007770 <osMessageQueueNew+0x8c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10c      	bne.n	8007770 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800775a:	2b00      	cmp	r3, #0
 800775c:	d108      	bne.n	8007770 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <osMessageQueueNew+0x8c>
          mem = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	e001      	b.n	8007770 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10b      	bne.n	800778e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2100      	movs	r1, #0
 8007780:	9100      	str	r1, [sp, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fa2f 	bl	8007be8 <xQueueGenericCreateStatic>
 800778a:	61f8      	str	r0, [r7, #28]
 800778c:	e008      	b.n	80077a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007794:	2200      	movs	r2, #0
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fa9d 	bl	8007cd8 <xQueueGenericCreate>
 800779e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00c      	beq.n	80077c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	e001      	b.n	80077b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69f8      	ldr	r0, [r7, #28]
 80077bc:	f001 f9e8 	bl	8008b90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80077c0:	69fb      	ldr	r3, [r7, #28]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e4:	f3ef 8305 	mrs	r3, IPSR
 80077e8:	617b      	str	r3, [r7, #20]
  return(result);
 80077ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d028      	beq.n	8007842 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <osMessageQueuePut+0x36>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <osMessageQueuePut+0x36>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007802:	f06f 0303 	mvn.w	r3, #3
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e038      	b.n	800787c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800780e:	f107 0210 	add.w	r2, r7, #16
 8007812:	2300      	movs	r3, #0
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	69b8      	ldr	r0, [r7, #24]
 8007818:	f000 fcda 	bl	80081d0 <xQueueGenericSendFromISR>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d003      	beq.n	800782a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007822:	f06f 0302 	mvn.w	r3, #2
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e028      	b.n	800787c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d025      	beq.n	800787c <osMessageQueuePut+0xb0>
 8007830:	4b15      	ldr	r3, [pc, #84]	; (8007888 <osMessageQueuePut+0xbc>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	e01c      	b.n	800787c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <osMessageQueuePut+0x82>
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d103      	bne.n	8007856 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800784e:	f06f 0303 	mvn.w	r3, #3
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	e012      	b.n	800787c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007856:	2300      	movs	r3, #0
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	69b8      	ldr	r0, [r7, #24]
 800785e:	f000 fbb9 	bl	8007fd4 <xQueueGenericSend>
 8007862:	4603      	mov	r3, r0
 8007864:	2b01      	cmp	r3, #1
 8007866:	d009      	beq.n	800787c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800786e:	f06f 0301 	mvn.w	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	e002      	b.n	800787c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007876:	f06f 0302 	mvn.w	r3, #2
 800787a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800787c:	69fb      	ldr	r3, [r7, #28]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3720      	adds	r7, #32
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a2:	f3ef 8305 	mrs	r3, IPSR
 80078a6:	617b      	str	r3, [r7, #20]
  return(result);
 80078a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d028      	beq.n	8007900 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <osMessageQueueGet+0x34>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <osMessageQueueGet+0x34>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80078c0:	f06f 0303 	mvn.w	r3, #3
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	e037      	b.n	8007938 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80078cc:	f107 0310 	add.w	r3, r7, #16
 80078d0:	461a      	mov	r2, r3
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	69b8      	ldr	r0, [r7, #24]
 80078d6:	f000 ff8f 	bl	80087f8 <xQueueReceiveFromISR>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d003      	beq.n	80078e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80078e0:	f06f 0302 	mvn.w	r3, #2
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	e027      	b.n	8007938 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d024      	beq.n	8007938 <osMessageQueueGet+0xac>
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <osMessageQueueGet+0xb8>)
 80078f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	e01b      	b.n	8007938 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <osMessageQueueGet+0x80>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800790c:	f06f 0303 	mvn.w	r3, #3
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e011      	b.n	8007938 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	69b8      	ldr	r0, [r7, #24]
 800791a:	f000 fd81 	bl	8008420 <xQueueReceive>
 800791e:	4603      	mov	r3, r0
 8007920:	2b01      	cmp	r3, #1
 8007922:	d009      	beq.n	8007938 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800792a:	f06f 0301 	mvn.w	r3, #1
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e002      	b.n	8007938 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007932:	f06f 0302 	mvn.w	r3, #2
 8007936:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007938:	69fb      	ldr	r3, [r7, #28]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4a07      	ldr	r2, [pc, #28]	; (8007974 <vApplicationGetIdleTaskMemory+0x2c>)
 8007958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4a06      	ldr	r2, [pc, #24]	; (8007978 <vApplicationGetIdleTaskMemory+0x30>)
 800795e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2280      	movs	r2, #128	; 0x80
 8007964:	601a      	str	r2, [r3, #0]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	200000b0 	.word	0x200000b0
 8007978:	2000016c 	.word	0x2000016c

0800797c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a07      	ldr	r2, [pc, #28]	; (80079a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800798c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4a06      	ldr	r2, [pc, #24]	; (80079ac <vApplicationGetTimerTaskMemory+0x30>)
 8007992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800799a:	601a      	str	r2, [r3, #0]
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	2000036c 	.word	0x2000036c
 80079ac:	20000428 	.word	0x20000428

080079b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f103 0208 	add.w	r2, r3, #8
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f103 0208 	add.w	r2, r3, #8
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0208 	add.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d103      	bne.n	8007a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e00c      	b.n	8007a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3308      	adds	r3, #8
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e002      	b.n	8007a80 <vListInsert+0x2e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d2f6      	bcs.n	8007a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6892      	ldr	r2, [r2, #8]
 8007ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6852      	ldr	r2, [r2, #4]
 8007ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d103      	bne.n	8007af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	1e5a      	subs	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b42:	f002 fd6f 	bl	800a624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	441a      	add	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b72:	3b01      	subs	r3, #1
 8007b74:	68f9      	ldr	r1, [r7, #12]
 8007b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b78:	fb01 f303 	mul.w	r3, r1, r3
 8007b7c:	441a      	add	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	22ff      	movs	r2, #255	; 0xff
 8007b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d114      	bne.n	8007bc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01a      	beq.n	8007bd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3310      	adds	r3, #16
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fd13 	bl	80095d0 <xTaskRemoveFromEventList>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bb0:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <xQueueGenericReset+0xcc>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	e009      	b.n	8007bd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff fef2 	bl	80079b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3324      	adds	r3, #36	; 0x24
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff feed 	bl	80079b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bd6:	f002 fd55 	bl	800a684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bda:	2301      	movs	r3, #1
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08e      	sub	sp, #56	; 0x38
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c2a:	bf00      	nop
 8007c2c:	e7fe      	b.n	8007c2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <xQueueGenericCreateStatic+0x52>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <xQueueGenericCreateStatic+0x56>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <xQueueGenericCreateStatic+0x58>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	623b      	str	r3, [r7, #32]
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <xQueueGenericCreateStatic+0x7e>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <xQueueGenericCreateStatic+0x82>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueGenericCreateStatic+0x84>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	61fb      	str	r3, [r7, #28]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c86:	2350      	movs	r3, #80	; 0x50
 8007c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b50      	cmp	r3, #80	; 0x50
 8007c8e:	d00a      	beq.n	8007ca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	61bb      	str	r3, [r7, #24]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ca6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00d      	beq.n	8007cce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 f83f 	bl	8007d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3730      	adds	r7, #48	; 0x30
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08a      	sub	sp, #40	; 0x28
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	613b      	str	r3, [r7, #16]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3350      	adds	r3, #80	; 0x50
 8007d10:	4618      	mov	r0, r3
 8007d12:	f002 fda9 	bl	800a868 <pvPortMalloc>
 8007d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d011      	beq.n	8007d42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	3350      	adds	r3, #80	; 0x50
 8007d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d30:	79fa      	ldrb	r2, [r7, #7]
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	4613      	mov	r3, r2
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f805 	bl	8007d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d42:	69bb      	ldr	r3, [r7, #24]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e002      	b.n	8007d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	69b8      	ldr	r0, [r7, #24]
 8007d7e:	f7ff fecb 	bl	8007b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00e      	beq.n	8007dbe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007db2:	2300      	movs	r3, #0
 8007db4:	2200      	movs	r2, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f90b 	bl	8007fd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	4603      	mov	r3, r0
 8007dce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6939      	ldr	r1, [r7, #16]
 8007dde:	6978      	ldr	r0, [r7, #20]
 8007de0:	f7ff ff7a 	bl	8007cd8 <xQueueGenericCreate>
 8007de4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff ffd3 	bl	8007d92 <prvInitialiseMutex>

		return xNewQueue;
 8007dec:	68fb      	ldr	r3, [r7, #12]
	}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b088      	sub	sp, #32
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	6039      	str	r1, [r7, #0]
 8007e00:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e02:	2301      	movs	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	2300      	movs	r3, #0
 8007e08:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2200      	movs	r2, #0
 8007e12:	6939      	ldr	r1, [r7, #16]
 8007e14:	6978      	ldr	r0, [r7, #20]
 8007e16:	f7ff fee7 	bl	8007be8 <xQueueGenericCreateStatic>
 8007e1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff ffb8 	bl	8007d92 <prvInitialiseMutex>

		return xNewQueue;
 8007e22:	68fb      	ldr	r3, [r7, #12]
	}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007e2c:	b590      	push	{r4, r7, lr}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	60fb      	str	r3, [r7, #12]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	689c      	ldr	r4, [r3, #8]
 8007e58:	f001 fd7c 	bl	8009954 <xTaskGetCurrentTaskHandle>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	429c      	cmp	r4, r3
 8007e60:	d111      	bne.n	8007e86 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6938      	ldr	r0, [r7, #16]
 8007e7c:	f000 f8aa 	bl	8007fd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007e80:	2301      	movs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e001      	b.n	8007e8a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007e8a:	697b      	ldr	r3, [r7, #20]
	}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	371c      	adds	r7, #28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd90      	pop	{r4, r7, pc}

08007e94 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	60fb      	str	r3, [r7, #12]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	689c      	ldr	r4, [r3, #8]
 8007ec2:	f001 fd47 	bl	8009954 <xTaskGetCurrentTaskHandle>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	d107      	bne.n	8007edc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	e00c      	b.n	8007ef6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6938      	ldr	r0, [r7, #16]
 8007ee0:	f000 fb7e 	bl	80085e0 <xQueueSemaphoreTake>
 8007ee4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007ef6:	697b      	ldr	r3, [r7, #20]
	}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd90      	pop	{r4, r7, pc}

08007f00 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08a      	sub	sp, #40	; 0x28
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	61bb      	str	r3, [r7, #24]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d90a      	bls.n	8007f46 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	617b      	str	r3, [r7, #20]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f46:	2302      	movs	r3, #2
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fe49 	bl	8007be8 <xQueueGenericCreateStatic>
 8007f56:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f64:	69fb      	ldr	r3, [r7, #28]
	}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3720      	adds	r7, #32
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	613b      	str	r3, [r7, #16]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d90a      	bls.n	8007fb2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60fb      	str	r3, [r7, #12]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fe8e 	bl	8007cd8 <xQueueGenericCreate>
 8007fbc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fca:	697b      	ldr	r3, [r7, #20]
	}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08e      	sub	sp, #56	; 0x38
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueGenericSend+0x32>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <xQueueGenericSend+0x40>
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <xQueueGenericSend+0x44>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <xQueueGenericSend+0x46>
 8008018:	2300      	movs	r3, #0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <xQueueGenericSend+0x60>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x6e>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <xQueueGenericSend+0x72>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <xQueueGenericSend+0x74>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xQueueGenericSend+0x8e>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	623b      	str	r3, [r7, #32]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008062:	f001 fc87 	bl	8009974 <xTaskGetSchedulerState>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <xQueueGenericSend+0x9e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <xQueueGenericSend+0xa2>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericSend+0xa4>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGenericSend+0xbe>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	61fb      	str	r3, [r7, #28]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008092:	f002 fac7 	bl	800a624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	429a      	cmp	r2, r3
 80080a0:	d302      	bcc.n	80080a8 <xQueueGenericSend+0xd4>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d129      	bne.n	80080fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ae:	f000 fc5e 	bl	800896e <prvCopyDataToQueue>
 80080b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d010      	beq.n	80080de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	3324      	adds	r3, #36	; 0x24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fa85 	bl	80095d0 <xTaskRemoveFromEventList>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d013      	beq.n	80080f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080cc:	4b3f      	ldr	r3, [pc, #252]	; (80081cc <xQueueGenericSend+0x1f8>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	e00a      	b.n	80080f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <xQueueGenericSend+0x1f8>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080f4:	f002 fac6 	bl	800a684 <vPortExitCritical>
				return pdPASS;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e063      	b.n	80081c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008102:	f002 fabf 	bl	800a684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008106:	2300      	movs	r3, #0
 8008108:	e05c      	b.n	80081c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008110:	f107 0314 	add.w	r3, r7, #20
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fabf 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800811e:	f002 fab1 	bl	800a684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008122:	f001 f819 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008126:	f002 fa7d 	bl	800a624 <vPortEnterCritical>
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008130:	b25b      	sxtb	r3, r3
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d103      	bne.n	8008140 <xQueueGenericSend+0x16c>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008146:	b25b      	sxtb	r3, r3
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d103      	bne.n	8008156 <xQueueGenericSend+0x182>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008156:	f002 fa95 	bl	800a684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800815a:	1d3a      	adds	r2, r7, #4
 800815c:	f107 0314 	add.w	r3, r7, #20
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f001 faae 	bl	80096c4 <xTaskCheckForTimeOut>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d124      	bne.n	80081b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800816e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008170:	f000 fcf5 	bl	8008b5e <prvIsQueueFull>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d018      	beq.n	80081ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	3310      	adds	r3, #16
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f001 f9d4 	bl	8009530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800818a:	f000 fc80 	bl	8008a8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800818e:	f000 fff1 	bl	8009174 <xTaskResumeAll>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f af7c 	bne.w	8008092 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <xQueueGenericSend+0x1f8>)
 800819c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	e772      	b.n	8008092 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ae:	f000 fc6e 	bl	8008a8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081b2:	f000 ffdf 	bl	8009174 <xTaskResumeAll>
 80081b6:	e76c      	b.n	8008092 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ba:	f000 fc68 	bl	8008a8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081be:	f000 ffd9 	bl	8009174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3738      	adds	r7, #56	; 0x38
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b090      	sub	sp, #64	; 0x40
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081fa:	bf00      	nop
 80081fc:	e7fe      	b.n	80081fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <xQueueGenericSendFromISR+0x3c>
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <xQueueGenericSendFromISR+0x40>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <xQueueGenericSendFromISR+0x42>
 8008210:	2300      	movs	r3, #0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d103      	bne.n	800823a <xQueueGenericSendFromISR+0x6a>
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <xQueueGenericSendFromISR+0x6e>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <xQueueGenericSendFromISR+0x70>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	623b      	str	r3, [r7, #32]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825a:	f002 fac5 	bl	800a7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800825e:	f3ef 8211 	mrs	r2, BASEPRI
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	61fa      	str	r2, [r7, #28]
 8008274:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008276:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <xQueueGenericSendFromISR+0xbc>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d12f      	bne.n	80082ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082a2:	f000 fb64 	bl	800896e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d112      	bne.n	80082d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d016      	beq.n	80082e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	3324      	adds	r3, #36	; 0x24
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 f987 	bl	80095d0 <xTaskRemoveFromEventList>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e007      	b.n	80082e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082da:	3301      	adds	r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	b25a      	sxtb	r2, r3
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082ea:	e001      	b.n	80082f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3740      	adds	r7, #64	; 0x40
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b08e      	sub	sp, #56	; 0x38
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	623b      	str	r3, [r7, #32]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <xQueueGiveFromISR+0x48>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	61fb      	str	r3, [r7, #28]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <xQueueGiveFromISR+0x58>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <xQueueGiveFromISR+0x5c>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueGiveFromISR+0x5e>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <xQueueGiveFromISR+0x78>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	61bb      	str	r3, [r7, #24]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800837e:	f002 fa33 	bl	800a7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8008382:	f3ef 8211 	mrs	r2, BASEPRI
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	617a      	str	r2, [r7, #20]
 8008398:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800839a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d22b      	bcs.n	8008406 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d112      	bne.n	80083f0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	3324      	adds	r3, #36	; 0x24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 f8fa 	bl	80095d0 <xTaskRemoveFromEventList>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e007      	b.n	8008400 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f4:	3301      	adds	r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	b25a      	sxtb	r2, r3
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008400:	2301      	movs	r3, #1
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	e001      	b.n	800840a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008406:	2300      	movs	r3, #0
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f383 8811 	msr	BASEPRI, r3
}
 8008414:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008418:	4618      	mov	r0, r3
 800841a:	3738      	adds	r7, #56	; 0x38
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08c      	sub	sp, #48	; 0x30
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800842c:	2300      	movs	r3, #0
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <xQueueReceive+0x30>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	623b      	str	r3, [r7, #32]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <xQueueReceive+0x3e>
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <xQueueReceive+0x42>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <xQueueReceive+0x44>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueReceive+0x5e>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61fb      	str	r3, [r7, #28]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800847e:	f001 fa79 	bl	8009974 <xTaskGetSchedulerState>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <xQueueReceive+0x6e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <xQueueReceive+0x72>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <xQueueReceive+0x74>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueReceive+0x8e>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61bb      	str	r3, [r7, #24]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ae:	f002 f8b9 	bl	800a624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01f      	beq.n	80084fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c2:	f000 fabe 	bl	8008a42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00f      	beq.n	80084f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	3310      	adds	r3, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f878 	bl	80095d0 <xTaskRemoveFromEventList>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084e6:	4b3d      	ldr	r3, [pc, #244]	; (80085dc <xQueueReceive+0x1bc>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084f6:	f002 f8c5 	bl	800a684 <vPortExitCritical>
				return pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e069      	b.n	80085d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008504:	f002 f8be 	bl	800a684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008508:	2300      	movs	r3, #0
 800850a:	e062      	b.n	80085d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	4618      	mov	r0, r3
 8008518:	f001 f8be 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008520:	f002 f8b0 	bl	800a684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008524:	f000 fe18 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008528:	f002 f87c 	bl	800a624 <vPortEnterCritical>
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008532:	b25b      	sxtb	r3, r3
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <xQueueReceive+0x122>
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008548:	b25b      	sxtb	r3, r3
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d103      	bne.n	8008558 <xQueueReceive+0x138>
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008558:	f002 f894 	bl	800a684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855c:	1d3a      	adds	r2, r7, #4
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f8ad 	bl	80096c4 <xTaskCheckForTimeOut>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d123      	bne.n	80085b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008572:	f000 fade 	bl	8008b32 <prvIsQueueEmpty>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f000 ffd3 	bl	8009530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800858a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858c:	f000 fa7f 	bl	8008a8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008590:	f000 fdf0 	bl	8009174 <xTaskResumeAll>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d189      	bne.n	80084ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <xQueueReceive+0x1bc>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	e780      	b.n	80084ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ae:	f000 fa6e 	bl	8008a8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b2:	f000 fddf 	bl	8009174 <xTaskResumeAll>
 80085b6:	e77a      	b.n	80084ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f000 fa68 	bl	8008a8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085be:	f000 fdd9 	bl	8009174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c4:	f000 fab5 	bl	8008b32 <prvIsQueueEmpty>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f43f af6f 	beq.w	80084ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3730      	adds	r7, #48	; 0x30
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08e      	sub	sp, #56	; 0x38
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	623b      	str	r3, [r7, #32]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	61fb      	str	r3, [r7, #28]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008630:	f001 f9a0 	bl	8009974 <xTaskGetSchedulerState>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <xQueueSemaphoreTake+0x60>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <xQueueSemaphoreTake+0x64>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <xQueueSemaphoreTake+0x66>
 8008644:	2300      	movs	r3, #0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	61bb      	str	r3, [r7, #24]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008660:	f001 ffe0 	bl	800a624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d024      	beq.n	80086ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008680:	f001 faee 	bl	8009c60 <pvTaskIncrementMutexHeldCount>
 8008684:	4602      	mov	r2, r0
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00f      	beq.n	80086b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	3310      	adds	r3, #16
 8008696:	4618      	mov	r0, r3
 8008698:	f000 ff9a 	bl	80095d0 <xTaskRemoveFromEventList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086a2:	4b54      	ldr	r3, [pc, #336]	; (80087f4 <xQueueSemaphoreTake+0x214>)
 80086a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086b2:	f001 ffe7 	bl	800a684 <vPortExitCritical>
				return pdPASS;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e097      	b.n	80087ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d111      	bne.n	80086e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	617b      	str	r3, [r7, #20]
}
 80086d8:	bf00      	nop
 80086da:	e7fe      	b.n	80086da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80086dc:	f001 ffd2 	bl	800a684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e082      	b.n	80087ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086ea:	f107 030c 	add.w	r3, r7, #12
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 ffd2 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086f8:	f001 ffc4 	bl	800a684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086fc:	f000 fd2c 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008700:	f001 ff90 	bl	800a624 <vPortEnterCritical>
 8008704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d103      	bne.n	800871a <xQueueSemaphoreTake+0x13a>
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008720:	b25b      	sxtb	r3, r3
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008726:	d103      	bne.n	8008730 <xQueueSemaphoreTake+0x150>
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008730:	f001 ffa8 	bl	800a684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008734:	463a      	mov	r2, r7
 8008736:	f107 030c 	add.w	r3, r7, #12
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f000 ffc1 	bl	80096c4 <xTaskCheckForTimeOut>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d132      	bne.n	80087ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800874a:	f000 f9f2 	bl	8008b32 <prvIsQueueEmpty>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d026      	beq.n	80087a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d109      	bne.n	8008770 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800875c:	f001 ff62 	bl	800a624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	4618      	mov	r0, r3
 8008766:	f001 f923 	bl	80099b0 <xTaskPriorityInherit>
 800876a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800876c:	f001 ff8a 	bl	800a684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	3324      	adds	r3, #36	; 0x24
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fed9 	bl	8009530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800877e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008780:	f000 f985 	bl	8008a8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008784:	f000 fcf6 	bl	8009174 <xTaskResumeAll>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	f47f af68 	bne.w	8008660 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008790:	4b18      	ldr	r3, [pc, #96]	; (80087f4 <xQueueSemaphoreTake+0x214>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	e75e      	b.n	8008660 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80087a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087a4:	f000 f973 	bl	8008a8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a8:	f000 fce4 	bl	8009174 <xTaskResumeAll>
 80087ac:	e758      	b.n	8008660 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80087ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087b0:	f000 f96d 	bl	8008a8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b4:	f000 fcde 	bl	8009174 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087ba:	f000 f9ba 	bl	8008b32 <prvIsQueueEmpty>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f43f af4d 	beq.w	8008660 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00d      	beq.n	80087e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80087cc:	f001 ff2a 	bl	800a624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80087d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087d2:	f000 f8b4 	bl	800893e <prvGetDisinheritPriorityAfterTimeout>
 80087d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 f9bc 	bl	8009b5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80087e4:	f001 ff4e 	bl	800a684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3738      	adds	r7, #56	; 0x38
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08e      	sub	sp, #56	; 0x38
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	623b      	str	r3, [r7, #32]
}
 8008820:	bf00      	nop
 8008822:	e7fe      	b.n	8008822 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <xQueueReceiveFromISR+0x3a>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xQueueReceiveFromISR+0x3e>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueReceiveFromISR+0x40>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61fb      	str	r3, [r7, #28]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008852:	f001 ffc9 	bl	800a7e8 <vPortValidateInterruptPriority>
	__asm volatile
 8008856:	f3ef 8211 	mrs	r2, BASEPRI
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61ba      	str	r2, [r7, #24]
 800886c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800886e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d02f      	beq.n	80088de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800888c:	f000 f8d9 	bl	8008a42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d112      	bne.n	80088c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d016      	beq.n	80088d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	3310      	adds	r3, #16
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fe8e 	bl	80095d0 <xTaskRemoveFromEventList>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	e007      	b.n	80088d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088cc:	3301      	adds	r3, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	b25a      	sxtb	r2, r3
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088d8:	2301      	movs	r3, #1
 80088da:	637b      	str	r3, [r7, #52]	; 0x34
 80088dc:	e001      	b.n	80088e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f383 8811 	msr	BASEPRI, r3
}
 80088ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3738      	adds	r7, #56	; 0x38
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <vQueueDelete+0x28>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	60bb      	str	r3, [r7, #8]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f95f 	bl	8008be4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f002 f865 	bl	800aa00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d006      	beq.n	800895c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	e001      	b.n	8008960 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008960:	68fb      	ldr	r3, [r7, #12]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b086      	sub	sp, #24
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10d      	bne.n	80089a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d14d      	bne.n	8008a30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4618      	mov	r0, r3
 800899a:	f001 f871 	bl	8009a80 <xTaskPriorityDisinherit>
 800899e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	609a      	str	r2, [r3, #8]
 80089a6:	e043      	b.n	8008a30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d119      	bne.n	80089e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6858      	ldr	r0, [r3, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	461a      	mov	r2, r3
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	f00e fc62 	bl	8017282 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	441a      	add	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d32b      	bcc.n	8008a30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	605a      	str	r2, [r3, #4]
 80089e0:	e026      	b.n	8008a30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68d8      	ldr	r0, [r3, #12]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	461a      	mov	r2, r3
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	f00e fc48 	bl	8017282 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	425b      	negs	r3, r3
 80089fc:	441a      	add	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d207      	bcs.n	8008a1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	425b      	negs	r3, r3
 8008a18:	441a      	add	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d105      	bne.n	8008a30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a38:	697b      	ldr	r3, [r7, #20]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d018      	beq.n	8008a86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	441a      	add	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d303      	bcc.n	8008a76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68d9      	ldr	r1, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	461a      	mov	r2, r3
 8008a80:	6838      	ldr	r0, [r7, #0]
 8008a82:	f00e fbfe 	bl	8017282 <memcpy>
	}
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a96:	f001 fdc5 	bl	800a624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aa0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aa2:	e011      	b.n	8008ac8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d012      	beq.n	8008ad2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3324      	adds	r3, #36	; 0x24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fd8d 	bl	80095d0 <xTaskRemoveFromEventList>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008abc:	f000 fe64 	bl	8009788 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dce9      	bgt.n	8008aa4 <prvUnlockQueue+0x16>
 8008ad0:	e000      	b.n	8008ad4 <prvUnlockQueue+0x46>
					break;
 8008ad2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	22ff      	movs	r2, #255	; 0xff
 8008ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008adc:	f001 fdd2 	bl	800a684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ae0:	f001 fda0 	bl	800a624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aec:	e011      	b.n	8008b12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d012      	beq.n	8008b1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3310      	adds	r3, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fd68 	bl	80095d0 <xTaskRemoveFromEventList>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b06:	f000 fe3f 	bl	8009788 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dce9      	bgt.n	8008aee <prvUnlockQueue+0x60>
 8008b1a:	e000      	b.n	8008b1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	22ff      	movs	r2, #255	; 0xff
 8008b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b26:	f001 fdad 	bl	800a684 <vPortExitCritical>
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b3a:	f001 fd73 	bl	800a624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b46:	2301      	movs	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	e001      	b.n	8008b50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b50:	f001 fd98 	bl	800a684 <vPortExitCritical>

	return xReturn;
 8008b54:	68fb      	ldr	r3, [r7, #12]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b66:	f001 fd5d 	bl	800a624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d102      	bne.n	8008b7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e001      	b.n	8008b80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b80:	f001 fd80 	bl	800a684 <vPortExitCritical>

	return xReturn;
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	e014      	b.n	8008bca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ba0:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <vQueueAddToRegistry+0x50>)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bac:	490c      	ldr	r1, [pc, #48]	; (8008be0 <vQueueAddToRegistry+0x50>)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bb6:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <vQueueAddToRegistry+0x50>)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	4413      	add	r3, r2
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bc2:	e006      	b.n	8008bd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b07      	cmp	r3, #7
 8008bce:	d9e7      	bls.n	8008ba0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20008420 	.word	0x20008420

08008be4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e016      	b.n	8008c20 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008bf2:	4a10      	ldr	r2, [pc, #64]	; (8008c34 <vQueueUnregisterQueue+0x50>)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	4413      	add	r3, r2
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d10b      	bne.n	8008c1a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c02:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <vQueueUnregisterQueue+0x50>)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2100      	movs	r1, #0
 8008c08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c0c:	4a09      	ldr	r2, [pc, #36]	; (8008c34 <vQueueUnregisterQueue+0x50>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4413      	add	r3, r2
 8008c14:	2200      	movs	r2, #0
 8008c16:	605a      	str	r2, [r3, #4]
				break;
 8008c18:	e006      	b.n	8008c28 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b07      	cmp	r3, #7
 8008c24:	d9e5      	bls.n	8008bf2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	20008420 	.word	0x20008420

08008c38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c48:	f001 fcec 	bl	800a624 <vPortEnterCritical>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c52:	b25b      	sxtb	r3, r3
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d103      	bne.n	8008c62 <vQueueWaitForMessageRestricted+0x2a>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d103      	bne.n	8008c78 <vQueueWaitForMessageRestricted+0x40>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c78:	f001 fd04 	bl	800a684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3324      	adds	r3, #36	; 0x24
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fc73 	bl	8009578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c92:	6978      	ldr	r0, [r7, #20]
 8008c94:	f7ff fefb 	bl	8008a8e <prvUnlockQueue>
	}
 8008c98:	bf00      	nop
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08e      	sub	sp, #56	; 0x38
 8008ca4:	af04      	add	r7, sp, #16
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	623b      	str	r3, [r7, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	61fb      	str	r3, [r7, #28]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ce6:	23bc      	movs	r3, #188	; 0xbc
 8008ce8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	2bbc      	cmp	r3, #188	; 0xbc
 8008cee:	d00a      	beq.n	8008d06 <xTaskCreateStatic+0x66>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	61bb      	str	r3, [r7, #24]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d01e      	beq.n	8008d4c <xTaskCreateStatic+0xac>
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01b      	beq.n	8008d4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	2202      	movs	r2, #2
 8008d22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d26:	2300      	movs	r3, #0
 8008d28:	9303      	str	r3, [sp, #12]
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	9302      	str	r3, [sp, #8]
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 f850 	bl	8008de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d46:	f000 f8f3 	bl	8008f30 <prvAddNewTaskToReadyList>
 8008d4a:	e001      	b.n	8008d50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d50:	697b      	ldr	r3, [r7, #20]
	}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3728      	adds	r7, #40	; 0x28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b08c      	sub	sp, #48	; 0x30
 8008d5e:	af04      	add	r7, sp, #16
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	4613      	mov	r3, r2
 8008d68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fd7a 	bl	800a868 <pvPortMalloc>
 8008d74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00e      	beq.n	8008d9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d7c:	20bc      	movs	r0, #188	; 0xbc
 8008d7e:	f001 fd73 	bl	800a868 <pvPortMalloc>
 8008d82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d90:	e005      	b.n	8008d9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f001 fe34 	bl	800aa00 <vPortFree>
 8008d98:	e001      	b.n	8008d9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d017      	beq.n	8008dd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dac:	88fa      	ldrh	r2, [r7, #6]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9303      	str	r3, [sp, #12]
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	9302      	str	r3, [sp, #8]
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f80e 	bl	8008de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dc8:	69f8      	ldr	r0, [r7, #28]
 8008dca:	f000 f8b1 	bl	8008f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	61bb      	str	r3, [r7, #24]
 8008dd2:	e002      	b.n	8008dda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dda:	69bb      	ldr	r3, [r7, #24]
	}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3720      	adds	r7, #32
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	21a5      	movs	r1, #165	; 0xa5
 8008dfe:	f00e fa4e 	bl	801729e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f023 0307 	bic.w	r3, r3, #7
 8008e1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	617b      	str	r3, [r7, #20]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01f      	beq.n	8008e82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e012      	b.n	8008e6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	7819      	ldrb	r1, [r3, #0]
 8008e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	3334      	adds	r3, #52	; 0x34
 8008e58:	460a      	mov	r2, r1
 8008e5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d006      	beq.n	8008e76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	2b0f      	cmp	r3, #15
 8008e72:	d9e9      	bls.n	8008e48 <prvInitialiseNewTask+0x64>
 8008e74:	e000      	b.n	8008e78 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e80:	e003      	b.n	8008e8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	2b37      	cmp	r3, #55	; 0x37
 8008e8e:	d901      	bls.n	8008e94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e90:	2337      	movs	r3, #55	; 0x37
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fda0 	bl	80079f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	3318      	adds	r3, #24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fd9b 	bl	80079f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	3354      	adds	r3, #84	; 0x54
 8008ee4:	2260      	movs	r2, #96	; 0x60
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f00e f9d8 	bl	801729e <memset>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	4a0c      	ldr	r2, [pc, #48]	; (8008f24 <prvInitialiseNewTask+0x140>)
 8008ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <prvInitialiseNewTask+0x144>)
 8008ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	4a0b      	ldr	r2, [pc, #44]	; (8008f2c <prvInitialiseNewTask+0x148>)
 8008efe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	68f9      	ldr	r1, [r7, #12]
 8008f04:	69b8      	ldr	r0, [r7, #24]
 8008f06:	f001 fa61 	bl	800a3cc <pxPortInitialiseStack>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f1c:	bf00      	nop
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	0801b3ac 	.word	0x0801b3ac
 8008f28:	0801b3cc 	.word	0x0801b3cc
 8008f2c:	0801b38c 	.word	0x0801b38c

08008f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f38:	f001 fb74 	bl	800a624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ff4 <prvAddNewTaskToReadyList+0xc4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	4a2c      	ldr	r2, [pc, #176]	; (8008ff4 <prvAddNewTaskToReadyList+0xc4>)
 8008f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f46:	4b2c      	ldr	r3, [pc, #176]	; (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f4e:	4a2a      	ldr	r2, [pc, #168]	; (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f54:	4b27      	ldr	r3, [pc, #156]	; (8008ff4 <prvAddNewTaskToReadyList+0xc4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d110      	bne.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f5c:	f000 fc38 	bl	80097d0 <prvInitialiseTaskLists>
 8008f60:	e00d      	b.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f62:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <prvAddNewTaskToReadyList+0xcc>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f6a:	4b23      	ldr	r3, [pc, #140]	; (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d802      	bhi.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f78:	4a1f      	ldr	r2, [pc, #124]	; (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f7e:	4b20      	ldr	r3, [pc, #128]	; (8009000 <prvAddNewTaskToReadyList+0xd0>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <prvAddNewTaskToReadyList+0xd0>)
 8008f86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f88:	4b1d      	ldr	r3, [pc, #116]	; (8009000 <prvAddNewTaskToReadyList+0xd0>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <prvAddNewTaskToReadyList+0xd4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d903      	bls.n	8008fa4 <prvAddNewTaskToReadyList+0x74>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	4a18      	ldr	r2, [pc, #96]	; (8009004 <prvAddNewTaskToReadyList+0xd4>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4a15      	ldr	r2, [pc, #84]	; (8009008 <prvAddNewTaskToReadyList+0xd8>)
 8008fb2:	441a      	add	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f7fe fd25 	bl	8007a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fc0:	f001 fb60 	bl	800a684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <prvAddNewTaskToReadyList+0xcc>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00e      	beq.n	8008fea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d207      	bcs.n	8008fea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <prvAddNewTaskToReadyList+0xdc>)
 8008fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000cfc 	.word	0x20000cfc
 8008ff8:	20000828 	.word	0x20000828
 8008ffc:	20000d08 	.word	0x20000d08
 8009000:	20000d18 	.word	0x20000d18
 8009004:	20000d04 	.word	0x20000d04
 8009008:	2000082c 	.word	0x2000082c
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d017      	beq.n	8009052 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009022:	4b13      	ldr	r3, [pc, #76]	; (8009070 <vTaskDelay+0x60>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <vTaskDelay+0x30>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	60bb      	str	r3, [r7, #8]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009040:	f000 f88a 	bl	8009158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009044:	2100      	movs	r1, #0
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fe1e 	bl	8009c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800904c:	f000 f892 	bl	8009174 <xTaskResumeAll>
 8009050:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d107      	bne.n	8009068 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009058:	4b06      	ldr	r3, [pc, #24]	; (8009074 <vTaskDelay+0x64>)
 800905a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000d24 	.word	0x20000d24
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	; 0x28
 800907c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009086:	463a      	mov	r2, r7
 8009088:	1d39      	adds	r1, r7, #4
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fc5a 	bl	8007948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	9202      	str	r2, [sp, #8]
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	2300      	movs	r3, #0
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	2300      	movs	r3, #0
 80090a4:	460a      	mov	r2, r1
 80090a6:	4924      	ldr	r1, [pc, #144]	; (8009138 <vTaskStartScheduler+0xc0>)
 80090a8:	4824      	ldr	r0, [pc, #144]	; (800913c <vTaskStartScheduler+0xc4>)
 80090aa:	f7ff fdf9 	bl	8008ca0 <xTaskCreateStatic>
 80090ae:	4603      	mov	r3, r0
 80090b0:	4a23      	ldr	r2, [pc, #140]	; (8009140 <vTaskStartScheduler+0xc8>)
 80090b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090b4:	4b22      	ldr	r3, [pc, #136]	; (8009140 <vTaskStartScheduler+0xc8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090bc:	2301      	movs	r3, #1
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	e001      	b.n	80090c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d102      	bne.n	80090d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090cc:	f000 fe30 	bl	8009d30 <xTimerCreateTimerTask>
 80090d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d11b      	bne.n	8009110 <vTaskStartScheduler+0x98>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	613b      	str	r3, [r7, #16]
}
 80090ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090ec:	4b15      	ldr	r3, [pc, #84]	; (8009144 <vTaskStartScheduler+0xcc>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3354      	adds	r3, #84	; 0x54
 80090f2:	4a15      	ldr	r2, [pc, #84]	; (8009148 <vTaskStartScheduler+0xd0>)
 80090f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090f6:	4b15      	ldr	r3, [pc, #84]	; (800914c <vTaskStartScheduler+0xd4>)
 80090f8:	f04f 32ff 	mov.w	r2, #4294967295
 80090fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <vTaskStartScheduler+0xd8>)
 8009100:	2201      	movs	r2, #1
 8009102:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009104:	4b13      	ldr	r3, [pc, #76]	; (8009154 <vTaskStartScheduler+0xdc>)
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800910a:	f001 f9e9 	bl	800a4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800910e:	e00e      	b.n	800912e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d10a      	bne.n	800912e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	60fb      	str	r3, [r7, #12]
}
 800912a:	bf00      	nop
 800912c:	e7fe      	b.n	800912c <vTaskStartScheduler+0xb4>
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	080182b0 	.word	0x080182b0
 800913c:	080097a1 	.word	0x080097a1
 8009140:	20000d20 	.word	0x20000d20
 8009144:	20000828 	.word	0x20000828
 8009148:	20000020 	.word	0x20000020
 800914c:	20000d1c 	.word	0x20000d1c
 8009150:	20000d08 	.word	0x20000d08
 8009154:	20000d00 	.word	0x20000d00

08009158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <vTaskSuspendAll+0x18>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	4a03      	ldr	r2, [pc, #12]	; (8009170 <vTaskSuspendAll+0x18>)
 8009164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20000d24 	.word	0x20000d24

08009174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009182:	4b42      	ldr	r3, [pc, #264]	; (800928c <xTaskResumeAll+0x118>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	603b      	str	r3, [r7, #0]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091a0:	f001 fa40 	bl	800a624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <xTaskResumeAll+0x118>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4a38      	ldr	r2, [pc, #224]	; (800928c <xTaskResumeAll+0x118>)
 80091ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ae:	4b37      	ldr	r3, [pc, #220]	; (800928c <xTaskResumeAll+0x118>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d162      	bne.n	800927c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091b6:	4b36      	ldr	r3, [pc, #216]	; (8009290 <xTaskResumeAll+0x11c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d05e      	beq.n	800927c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091be:	e02f      	b.n	8009220 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c0:	4b34      	ldr	r3, [pc, #208]	; (8009294 <xTaskResumeAll+0x120>)
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3318      	adds	r3, #24
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe fc79 	bl	8007ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fc74 	bl	8007ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e0:	4b2d      	ldr	r3, [pc, #180]	; (8009298 <xTaskResumeAll+0x124>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d903      	bls.n	80091f0 <xTaskResumeAll+0x7c>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	4a2a      	ldr	r2, [pc, #168]	; (8009298 <xTaskResumeAll+0x124>)
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4a27      	ldr	r2, [pc, #156]	; (800929c <xTaskResumeAll+0x128>)
 80091fe:	441a      	add	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3304      	adds	r3, #4
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	f7fe fbff 	bl	8007a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <xTaskResumeAll+0x12c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	429a      	cmp	r2, r3
 8009218:	d302      	bcc.n	8009220 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800921a:	4b22      	ldr	r3, [pc, #136]	; (80092a4 <xTaskResumeAll+0x130>)
 800921c:	2201      	movs	r2, #1
 800921e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009220:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <xTaskResumeAll+0x120>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1cb      	bne.n	80091c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800922e:	f000 fb71 	bl	8009914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009232:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <xTaskResumeAll+0x134>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d010      	beq.n	8009260 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800923e:	f000 f859 	bl	80092f4 <xTaskIncrementTick>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009248:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <xTaskResumeAll+0x130>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3b01      	subs	r3, #1
 8009252:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f1      	bne.n	800923e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800925a:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <xTaskResumeAll+0x134>)
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009260:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <xTaskResumeAll+0x130>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d009      	beq.n	800927c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009268:	2301      	movs	r3, #1
 800926a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <xTaskResumeAll+0x138>)
 800926e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800927c:	f001 fa02 	bl	800a684 <vPortExitCritical>

	return xAlreadyYielded;
 8009280:	68bb      	ldr	r3, [r7, #8]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20000d24 	.word	0x20000d24
 8009290:	20000cfc 	.word	0x20000cfc
 8009294:	20000cbc 	.word	0x20000cbc
 8009298:	20000d04 	.word	0x20000d04
 800929c:	2000082c 	.word	0x2000082c
 80092a0:	20000828 	.word	0x20000828
 80092a4:	20000d10 	.word	0x20000d10
 80092a8:	20000d0c 	.word	0x20000d0c
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <xTaskGetTickCount+0x1c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092bc:	687b      	ldr	r3, [r7, #4]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	20000d00 	.word	0x20000d00

080092d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092d6:	f001 fa87 	bl	800a7e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80092de:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <xTaskGetTickCountFromISR+0x20>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092e4:	683b      	ldr	r3, [r7, #0]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000d00 	.word	0x20000d00

080092f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092fe:	4b4f      	ldr	r3, [pc, #316]	; (800943c <xTaskIncrementTick+0x148>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 808f 	bne.w	8009426 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009308:	4b4d      	ldr	r3, [pc, #308]	; (8009440 <xTaskIncrementTick+0x14c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009310:	4a4b      	ldr	r2, [pc, #300]	; (8009440 <xTaskIncrementTick+0x14c>)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d120      	bne.n	800935e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800931c:	4b49      	ldr	r3, [pc, #292]	; (8009444 <xTaskIncrementTick+0x150>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <xTaskIncrementTick+0x48>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	603b      	str	r3, [r7, #0]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <xTaskIncrementTick+0x46>
 800933c:	4b41      	ldr	r3, [pc, #260]	; (8009444 <xTaskIncrementTick+0x150>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	4b41      	ldr	r3, [pc, #260]	; (8009448 <xTaskIncrementTick+0x154>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a3f      	ldr	r2, [pc, #252]	; (8009444 <xTaskIncrementTick+0x150>)
 8009348:	6013      	str	r3, [r2, #0]
 800934a:	4a3f      	ldr	r2, [pc, #252]	; (8009448 <xTaskIncrementTick+0x154>)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	4b3e      	ldr	r3, [pc, #248]	; (800944c <xTaskIncrementTick+0x158>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	4a3d      	ldr	r2, [pc, #244]	; (800944c <xTaskIncrementTick+0x158>)
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	f000 fadb 	bl	8009914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800935e:	4b3c      	ldr	r3, [pc, #240]	; (8009450 <xTaskIncrementTick+0x15c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d349      	bcc.n	80093fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009368:	4b36      	ldr	r3, [pc, #216]	; (8009444 <xTaskIncrementTick+0x150>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d104      	bne.n	800937c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009372:	4b37      	ldr	r3, [pc, #220]	; (8009450 <xTaskIncrementTick+0x15c>)
 8009374:	f04f 32ff 	mov.w	r2, #4294967295
 8009378:	601a      	str	r2, [r3, #0]
					break;
 800937a:	e03f      	b.n	80093fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937c:	4b31      	ldr	r3, [pc, #196]	; (8009444 <xTaskIncrementTick+0x150>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d203      	bcs.n	800939c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009394:	4a2e      	ldr	r2, [pc, #184]	; (8009450 <xTaskIncrementTick+0x15c>)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800939a:	e02f      	b.n	80093fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	3304      	adds	r3, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fb8f 	bl	8007ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	3318      	adds	r3, #24
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fb86 	bl	8007ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093bc:	4b25      	ldr	r3, [pc, #148]	; (8009454 <xTaskIncrementTick+0x160>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d903      	bls.n	80093cc <xTaskIncrementTick+0xd8>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a22      	ldr	r2, [pc, #136]	; (8009454 <xTaskIncrementTick+0x160>)
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4a1f      	ldr	r2, [pc, #124]	; (8009458 <xTaskIncrementTick+0x164>)
 80093da:	441a      	add	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	3304      	adds	r3, #4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4610      	mov	r0, r2
 80093e4:	f7fe fb11 	bl	8007a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ec:	4b1b      	ldr	r3, [pc, #108]	; (800945c <xTaskIncrementTick+0x168>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d3b8      	bcc.n	8009368 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80093f6:	2301      	movs	r3, #1
 80093f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093fa:	e7b5      	b.n	8009368 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093fc:	4b17      	ldr	r3, [pc, #92]	; (800945c <xTaskIncrementTick+0x168>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	4915      	ldr	r1, [pc, #84]	; (8009458 <xTaskIncrementTick+0x164>)
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	440b      	add	r3, r1
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d901      	bls.n	8009418 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009418:	4b11      	ldr	r3, [pc, #68]	; (8009460 <xTaskIncrementTick+0x16c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d007      	beq.n	8009430 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	e004      	b.n	8009430 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <xTaskIncrementTick+0x170>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	4a0d      	ldr	r2, [pc, #52]	; (8009464 <xTaskIncrementTick+0x170>)
 800942e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009430:	697b      	ldr	r3, [r7, #20]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000d24 	.word	0x20000d24
 8009440:	20000d00 	.word	0x20000d00
 8009444:	20000cb4 	.word	0x20000cb4
 8009448:	20000cb8 	.word	0x20000cb8
 800944c:	20000d14 	.word	0x20000d14
 8009450:	20000d1c 	.word	0x20000d1c
 8009454:	20000d04 	.word	0x20000d04
 8009458:	2000082c 	.word	0x2000082c
 800945c:	20000828 	.word	0x20000828
 8009460:	20000d10 	.word	0x20000d10
 8009464:	20000d0c 	.word	0x20000d0c

08009468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800946e:	4b2a      	ldr	r3, [pc, #168]	; (8009518 <vTaskSwitchContext+0xb0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009476:	4b29      	ldr	r3, [pc, #164]	; (800951c <vTaskSwitchContext+0xb4>)
 8009478:	2201      	movs	r2, #1
 800947a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800947c:	e046      	b.n	800950c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800947e:	4b27      	ldr	r3, [pc, #156]	; (800951c <vTaskSwitchContext+0xb4>)
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009484:	4b26      	ldr	r3, [pc, #152]	; (8009520 <vTaskSwitchContext+0xb8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	e010      	b.n	80094ae <vTaskSwitchContext+0x46>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	607b      	str	r3, [r7, #4]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <vTaskSwitchContext+0x3e>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	491d      	ldr	r1, [pc, #116]	; (8009524 <vTaskSwitchContext+0xbc>)
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0e4      	beq.n	800948c <vTaskSwitchContext+0x24>
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4a15      	ldr	r2, [pc, #84]	; (8009524 <vTaskSwitchContext+0xbc>)
 80094ce:	4413      	add	r3, r2
 80094d0:	60bb      	str	r3, [r7, #8]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	605a      	str	r2, [r3, #4]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	3308      	adds	r3, #8
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d104      	bne.n	80094f2 <vTaskSwitchContext+0x8a>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	605a      	str	r2, [r3, #4]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4a0b      	ldr	r2, [pc, #44]	; (8009528 <vTaskSwitchContext+0xc0>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	4a08      	ldr	r2, [pc, #32]	; (8009520 <vTaskSwitchContext+0xb8>)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <vTaskSwitchContext+0xc0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3354      	adds	r3, #84	; 0x54
 8009508:	4a08      	ldr	r2, [pc, #32]	; (800952c <vTaskSwitchContext+0xc4>)
 800950a:	6013      	str	r3, [r2, #0]
}
 800950c:	bf00      	nop
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	20000d24 	.word	0x20000d24
 800951c:	20000d10 	.word	0x20000d10
 8009520:	20000d04 	.word	0x20000d04
 8009524:	2000082c 	.word	0x2000082c
 8009528:	20000828 	.word	0x20000828
 800952c:	20000020 	.word	0x20000020

08009530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <vTaskPlaceOnEventList+0x44>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3318      	adds	r3, #24
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fe fa77 	bl	8007a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009564:	2101      	movs	r1, #1
 8009566:	6838      	ldr	r0, [r7, #0]
 8009568:	f000 fb8e 	bl	8009c88 <prvAddCurrentTaskToDelayedList>
}
 800956c:	bf00      	nop
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000828 	.word	0x20000828

08009578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	617b      	str	r3, [r7, #20]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095a0:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <vTaskPlaceOnEventListRestricted+0x54>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	3318      	adds	r3, #24
 80095a6:	4619      	mov	r1, r3
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7fe fa2e 	bl	8007a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095b4:	f04f 33ff 	mov.w	r3, #4294967295
 80095b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f000 fb63 	bl	8009c88 <prvAddCurrentTaskToDelayedList>
	}
 80095c2:	bf00      	nop
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000828 	.word	0x20000828

080095d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60fb      	str	r3, [r7, #12]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3318      	adds	r3, #24
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fa5f 	bl	8007ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009606:	4b1e      	ldr	r3, [pc, #120]	; (8009680 <xTaskRemoveFromEventList+0xb0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d11d      	bne.n	800964a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	3304      	adds	r3, #4
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fa56 	bl	8007ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961c:	4b19      	ldr	r3, [pc, #100]	; (8009684 <xTaskRemoveFromEventList+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d903      	bls.n	800962c <xTaskRemoveFromEventList+0x5c>
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	4a16      	ldr	r2, [pc, #88]	; (8009684 <xTaskRemoveFromEventList+0xb4>)
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4a13      	ldr	r2, [pc, #76]	; (8009688 <xTaskRemoveFromEventList+0xb8>)
 800963a:	441a      	add	r2, r3
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	3304      	adds	r3, #4
 8009640:	4619      	mov	r1, r3
 8009642:	4610      	mov	r0, r2
 8009644:	f7fe f9e1 	bl	8007a0a <vListInsertEnd>
 8009648:	e005      	b.n	8009656 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3318      	adds	r3, #24
 800964e:	4619      	mov	r1, r3
 8009650:	480e      	ldr	r0, [pc, #56]	; (800968c <xTaskRemoveFromEventList+0xbc>)
 8009652:	f7fe f9da 	bl	8007a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <xTaskRemoveFromEventList+0xc0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	429a      	cmp	r2, r3
 8009662:	d905      	bls.n	8009670 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009664:	2301      	movs	r3, #1
 8009666:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009668:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <xTaskRemoveFromEventList+0xc4>)
 800966a:	2201      	movs	r2, #1
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	e001      	b.n	8009674 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009674:	697b      	ldr	r3, [r7, #20]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000d24 	.word	0x20000d24
 8009684:	20000d04 	.word	0x20000d04
 8009688:	2000082c 	.word	0x2000082c
 800968c:	20000cbc 	.word	0x20000cbc
 8009690:	20000828 	.word	0x20000828
 8009694:	20000d10 	.word	0x20000d10

08009698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <vTaskInternalSetTimeOutState+0x24>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <vTaskInternalSetTimeOutState+0x28>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	605a      	str	r2, [r3, #4]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20000d14 	.word	0x20000d14
 80096c0:	20000d00 	.word	0x20000d00

080096c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	613b      	str	r3, [r7, #16]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10a      	bne.n	8009706 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009706:	f000 ff8d 	bl	800a624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800970a:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <xTaskCheckForTimeOut+0xbc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009722:	d102      	bne.n	800972a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009724:	2300      	movs	r3, #0
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	e023      	b.n	8009772 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b15      	ldr	r3, [pc, #84]	; (8009784 <xTaskCheckForTimeOut+0xc0>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	429a      	cmp	r2, r3
 8009734:	d007      	beq.n	8009746 <xTaskCheckForTimeOut+0x82>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	429a      	cmp	r2, r3
 800973e:	d302      	bcc.n	8009746 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009740:	2301      	movs	r3, #1
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	e015      	b.n	8009772 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	429a      	cmp	r2, r3
 800974e:	d20b      	bcs.n	8009768 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	1ad2      	subs	r2, r2, r3
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7ff ff9b 	bl	8009698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009762:	2300      	movs	r3, #0
 8009764:	61fb      	str	r3, [r7, #28]
 8009766:	e004      	b.n	8009772 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800976e:	2301      	movs	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009772:	f000 ff87 	bl	800a684 <vPortExitCritical>

	return xReturn;
 8009776:	69fb      	ldr	r3, [r7, #28]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000d00 	.word	0x20000d00
 8009784:	20000d14 	.word	0x20000d14

08009788 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800978c:	4b03      	ldr	r3, [pc, #12]	; (800979c <vTaskMissedYield+0x14>)
 800978e:	2201      	movs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]
}
 8009792:	bf00      	nop
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20000d10 	.word	0x20000d10

080097a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097a8:	f000 f852 	bl	8009850 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <prvIdleTask+0x28>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d9f9      	bls.n	80097a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <prvIdleTask+0x2c>)
 80097b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097c4:	e7f0      	b.n	80097a8 <prvIdleTask+0x8>
 80097c6:	bf00      	nop
 80097c8:	2000082c 	.word	0x2000082c
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097d6:	2300      	movs	r3, #0
 80097d8:	607b      	str	r3, [r7, #4]
 80097da:	e00c      	b.n	80097f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4a12      	ldr	r2, [pc, #72]	; (8009830 <prvInitialiseTaskLists+0x60>)
 80097e8:	4413      	add	r3, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe f8e0 	bl	80079b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3301      	adds	r3, #1
 80097f4:	607b      	str	r3, [r7, #4]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b37      	cmp	r3, #55	; 0x37
 80097fa:	d9ef      	bls.n	80097dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097fc:	480d      	ldr	r0, [pc, #52]	; (8009834 <prvInitialiseTaskLists+0x64>)
 80097fe:	f7fe f8d7 	bl	80079b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009802:	480d      	ldr	r0, [pc, #52]	; (8009838 <prvInitialiseTaskLists+0x68>)
 8009804:	f7fe f8d4 	bl	80079b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009808:	480c      	ldr	r0, [pc, #48]	; (800983c <prvInitialiseTaskLists+0x6c>)
 800980a:	f7fe f8d1 	bl	80079b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800980e:	480c      	ldr	r0, [pc, #48]	; (8009840 <prvInitialiseTaskLists+0x70>)
 8009810:	f7fe f8ce 	bl	80079b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009814:	480b      	ldr	r0, [pc, #44]	; (8009844 <prvInitialiseTaskLists+0x74>)
 8009816:	f7fe f8cb 	bl	80079b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800981a:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <prvInitialiseTaskLists+0x78>)
 800981c:	4a05      	ldr	r2, [pc, #20]	; (8009834 <prvInitialiseTaskLists+0x64>)
 800981e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009820:	4b0a      	ldr	r3, [pc, #40]	; (800984c <prvInitialiseTaskLists+0x7c>)
 8009822:	4a05      	ldr	r2, [pc, #20]	; (8009838 <prvInitialiseTaskLists+0x68>)
 8009824:	601a      	str	r2, [r3, #0]
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	2000082c 	.word	0x2000082c
 8009834:	20000c8c 	.word	0x20000c8c
 8009838:	20000ca0 	.word	0x20000ca0
 800983c:	20000cbc 	.word	0x20000cbc
 8009840:	20000cd0 	.word	0x20000cd0
 8009844:	20000ce8 	.word	0x20000ce8
 8009848:	20000cb4 	.word	0x20000cb4
 800984c:	20000cb8 	.word	0x20000cb8

08009850 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009856:	e019      	b.n	800988c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009858:	f000 fee4 	bl	800a624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <prvCheckTasksWaitingTermination+0x50>)
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe f92b 	bl	8007ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800986e:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <prvCheckTasksWaitingTermination+0x54>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3b01      	subs	r3, #1
 8009874:	4a0b      	ldr	r2, [pc, #44]	; (80098a4 <prvCheckTasksWaitingTermination+0x54>)
 8009876:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009878:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <prvCheckTasksWaitingTermination+0x58>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3b01      	subs	r3, #1
 800987e:	4a0a      	ldr	r2, [pc, #40]	; (80098a8 <prvCheckTasksWaitingTermination+0x58>)
 8009880:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009882:	f000 feff 	bl	800a684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f810 	bl	80098ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800988c:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <prvCheckTasksWaitingTermination+0x58>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e1      	bne.n	8009858 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000cd0 	.word	0x20000cd0
 80098a4:	20000cfc 	.word	0x20000cfc
 80098a8:	20000ce4 	.word	0x20000ce4

080098ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3354      	adds	r3, #84	; 0x54
 80098b8:	4618      	mov	r0, r3
 80098ba:	f00d fdb9 	bl	8017430 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d108      	bne.n	80098da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	4618      	mov	r0, r3
 80098ce:	f001 f897 	bl	800aa00 <vPortFree>
				vPortFree( pxTCB );
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 f894 	bl	800aa00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098d8:	e018      	b.n	800990c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d103      	bne.n	80098ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 f88b 	bl	800aa00 <vPortFree>
	}
 80098ea:	e00f      	b.n	800990c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d00a      	beq.n	800990c <prvDeleteTCB+0x60>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <prvDeleteTCB+0x5e>
	}
 800990c:	bf00      	nop
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991a:	4b0c      	ldr	r3, [pc, #48]	; (800994c <prvResetNextTaskUnblockTime+0x38>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <prvResetNextTaskUnblockTime+0x3c>)
 8009926:	f04f 32ff 	mov.w	r2, #4294967295
 800992a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800992c:	e008      	b.n	8009940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800992e:	4b07      	ldr	r3, [pc, #28]	; (800994c <prvResetNextTaskUnblockTime+0x38>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	4a04      	ldr	r2, [pc, #16]	; (8009950 <prvResetNextTaskUnblockTime+0x3c>)
 800993e:	6013      	str	r3, [r2, #0]
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	20000cb4 	.word	0x20000cb4
 8009950:	20000d1c 	.word	0x20000d1c

08009954 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800995a:	4b05      	ldr	r3, [pc, #20]	; (8009970 <xTaskGetCurrentTaskHandle+0x1c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009960:	687b      	ldr	r3, [r7, #4]
	}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000828 	.word	0x20000828

08009974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <xTaskGetSchedulerState+0x34>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009982:	2301      	movs	r3, #1
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	e008      	b.n	800999a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009988:	4b08      	ldr	r3, [pc, #32]	; (80099ac <xTaskGetSchedulerState+0x38>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009990:	2302      	movs	r3, #2
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	e001      	b.n	800999a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009996:	2300      	movs	r3, #0
 8009998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800999a:	687b      	ldr	r3, [r7, #4]
	}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	20000d08 	.word	0x20000d08
 80099ac:	20000d24 	.word	0x20000d24

080099b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d051      	beq.n	8009a6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ca:	4b2a      	ldr	r3, [pc, #168]	; (8009a74 <xTaskPriorityInherit+0xc4>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d241      	bcs.n	8009a58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	db06      	blt.n	80099ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099dc:	4b25      	ldr	r3, [pc, #148]	; (8009a74 <xTaskPriorityInherit+0xc4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6959      	ldr	r1, [r3, #20]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <xTaskPriorityInherit+0xc8>)
 80099fc:	4413      	add	r3, r2
 80099fe:	4299      	cmp	r1, r3
 8009a00:	d122      	bne.n	8009a48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe f85c 	bl	8007ac4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a0c:	4b19      	ldr	r3, [pc, #100]	; (8009a74 <xTaskPriorityInherit+0xc4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1a:	4b18      	ldr	r3, [pc, #96]	; (8009a7c <xTaskPriorityInherit+0xcc>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d903      	bls.n	8009a2a <xTaskPriorityInherit+0x7a>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	4a15      	ldr	r2, [pc, #84]	; (8009a7c <xTaskPriorityInherit+0xcc>)
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4a10      	ldr	r2, [pc, #64]	; (8009a78 <xTaskPriorityInherit+0xc8>)
 8009a38:	441a      	add	r2, r3
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	f7fd ffe2 	bl	8007a0a <vListInsertEnd>
 8009a46:	e004      	b.n	8009a52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <xTaskPriorityInherit+0xc4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a52:	2301      	movs	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	e008      	b.n	8009a6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <xTaskPriorityInherit+0xc4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d201      	bcs.n	8009a6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a66:	2301      	movs	r3, #1
 8009a68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
	}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20000828 	.word	0x20000828
 8009a78:	2000082c 	.word	0x2000082c
 8009a7c:	20000d04 	.word	0x20000d04

08009a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d056      	beq.n	8009b44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a96:	4b2e      	ldr	r3, [pc, #184]	; (8009b50 <xTaskPriorityDisinherit+0xd0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d00a      	beq.n	8009ab6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60bb      	str	r3, [r7, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad8:	1e5a      	subs	r2, r3, #1
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d02c      	beq.n	8009b44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d128      	bne.n	8009b44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fd ffe4 	bl	8007ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b14:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <xTaskPriorityDisinherit+0xd4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d903      	bls.n	8009b24 <xTaskPriorityDisinherit+0xa4>
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	4a0c      	ldr	r2, [pc, #48]	; (8009b54 <xTaskPriorityDisinherit+0xd4>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4a09      	ldr	r2, [pc, #36]	; (8009b58 <xTaskPriorityDisinherit+0xd8>)
 8009b32:	441a      	add	r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7fd ff65 	bl	8007a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b44:	697b      	ldr	r3, [r7, #20]
	}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000828 	.word	0x20000828
 8009b54:	20000d04 	.word	0x20000d04
 8009b58:	2000082c 	.word	0x2000082c

08009b5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d06a      	beq.n	8009c4a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	60fb      	str	r3, [r7, #12]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d902      	bls.n	8009ba2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	e002      	b.n	8009ba8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d04b      	beq.n	8009c4a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d146      	bne.n	8009c4a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d10a      	bne.n	8009bdc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	60bb      	str	r3, [r7, #8]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	69fa      	ldr	r2, [r7, #28]
 8009be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db04      	blt.n	8009bfa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	6959      	ldr	r1, [r3, #20]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4a13      	ldr	r2, [pc, #76]	; (8009c58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c0a:	4413      	add	r3, r2
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	d11c      	bne.n	8009c4a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	3304      	adds	r3, #4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fd ff55 	bl	8007ac4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d903      	bls.n	8009c2e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	4a0c      	ldr	r2, [pc, #48]	; (8009c5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4a07      	ldr	r2, [pc, #28]	; (8009c58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c3c:	441a      	add	r2, r3
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7fd fee0 	bl	8007a0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c4a:	bf00      	nop
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20000828 	.word	0x20000828
 8009c58:	2000082c 	.word	0x2000082c
 8009c5c:	20000d04 	.word	0x20000d04

08009c60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009c60:	b480      	push	{r7}
 8009c62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009c64:	4b07      	ldr	r3, [pc, #28]	; (8009c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d004      	beq.n	8009c76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c72:	3201      	adds	r2, #1
 8009c74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009c76:	4b03      	ldr	r3, [pc, #12]	; (8009c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c78:	681b      	ldr	r3, [r3, #0]
	}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	20000828 	.word	0x20000828

08009c88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c92:	4b21      	ldr	r3, [pc, #132]	; (8009d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c98:	4b20      	ldr	r3, [pc, #128]	; (8009d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fd ff10 	bl	8007ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009caa:	d10a      	bne.n	8009cc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d007      	beq.n	8009cc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cb2:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4819      	ldr	r0, [pc, #100]	; (8009d20 <prvAddCurrentTaskToDelayedList+0x98>)
 8009cbc:	f7fd fea5 	bl	8007a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cc0:	e026      	b.n	8009d10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d209      	bcs.n	8009cee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cda:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7fd feb3 	bl	8007a52 <vListInsert>
}
 8009cec:	e010      	b.n	8009d10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cee:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7fd fea9 	bl	8007a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d202      	bcs.n	8009d10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d0a:	4a08      	ldr	r2, [pc, #32]	; (8009d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	6013      	str	r3, [r2, #0]
}
 8009d10:	bf00      	nop
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20000d00 	.word	0x20000d00
 8009d1c:	20000828 	.word	0x20000828
 8009d20:	20000ce8 	.word	0x20000ce8
 8009d24:	20000cb8 	.word	0x20000cb8
 8009d28:	20000cb4 	.word	0x20000cb4
 8009d2c:	20000d1c 	.word	0x20000d1c

08009d30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	; 0x28
 8009d34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d3a:	f000 fb07 	bl	800a34c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d3e:	4b1c      	ldr	r3, [pc, #112]	; (8009db0 <xTimerCreateTimerTask+0x80>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d021      	beq.n	8009d8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d4e:	1d3a      	adds	r2, r7, #4
 8009d50:	f107 0108 	add.w	r1, r7, #8
 8009d54:	f107 030c 	add.w	r3, r7, #12
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fd fe0f 	bl	800797c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	9202      	str	r2, [sp, #8]
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	2302      	movs	r3, #2
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	460a      	mov	r2, r1
 8009d70:	4910      	ldr	r1, [pc, #64]	; (8009db4 <xTimerCreateTimerTask+0x84>)
 8009d72:	4811      	ldr	r0, [pc, #68]	; (8009db8 <xTimerCreateTimerTask+0x88>)
 8009d74:	f7fe ff94 	bl	8008ca0 <xTaskCreateStatic>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	4a10      	ldr	r2, [pc, #64]	; (8009dbc <xTimerCreateTimerTask+0x8c>)
 8009d7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <xTimerCreateTimerTask+0x8c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d86:	2301      	movs	r3, #1
 8009d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009da6:	697b      	ldr	r3, [r7, #20]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20000d58 	.word	0x20000d58
 8009db4:	080182b8 	.word	0x080182b8
 8009db8:	08009ef5 	.word	0x08009ef5
 8009dbc:	20000d5c 	.word	0x20000d5c

08009dc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	; 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <xTimerGenericCommand+0x2e>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	623b      	str	r3, [r7, #32]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dee:	4b1a      	ldr	r3, [pc, #104]	; (8009e58 <xTimerGenericCommand+0x98>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d02a      	beq.n	8009e4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	dc18      	bgt.n	8009e3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e08:	f7ff fdb4 	bl	8009974 <xTaskGetSchedulerState>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d109      	bne.n	8009e26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e12:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <xTimerGenericCommand+0x98>)
 8009e14:	6818      	ldr	r0, [r3, #0]
 8009e16:	f107 0110 	add.w	r1, r7, #16
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1e:	f7fe f8d9 	bl	8007fd4 <xQueueGenericSend>
 8009e22:	6278      	str	r0, [r7, #36]	; 0x24
 8009e24:	e012      	b.n	8009e4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <xTimerGenericCommand+0x98>)
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	f107 0110 	add.w	r1, r7, #16
 8009e2e:	2300      	movs	r3, #0
 8009e30:	2200      	movs	r2, #0
 8009e32:	f7fe f8cf 	bl	8007fd4 <xQueueGenericSend>
 8009e36:	6278      	str	r0, [r7, #36]	; 0x24
 8009e38:	e008      	b.n	8009e4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e3a:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <xTimerGenericCommand+0x98>)
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	f107 0110 	add.w	r1, r7, #16
 8009e42:	2300      	movs	r3, #0
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	f7fe f9c3 	bl	80081d0 <xQueueGenericSendFromISR>
 8009e4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3728      	adds	r7, #40	; 0x28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20000d58 	.word	0x20000d58

08009e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e66:	4b22      	ldr	r3, [pc, #136]	; (8009ef0 <prvProcessExpiredTimer+0x94>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fd fe25 	bl	8007ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d022      	beq.n	8009ece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	18d1      	adds	r1, r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	6978      	ldr	r0, [r7, #20]
 8009e96:	f000 f8d1 	bl	800a03c <prvInsertTimerInActiveList>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d01f      	beq.n	8009ee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f7ff ff88 	bl	8009dc0 <xTimerGenericCommand>
 8009eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d113      	bne.n	8009ee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	60fb      	str	r3, [r7, #12]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	6978      	ldr	r0, [r7, #20]
 8009ee6:	4798      	blx	r3
}
 8009ee8:	bf00      	nop
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000d50 	.word	0x20000d50

08009ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 f857 	bl	8009fb4 <prvGetNextExpireTime>
 8009f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f803 	bl	8009f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f12:	f000 f8d5 	bl	800a0c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f16:	e7f1      	b.n	8009efc <prvTimerTask+0x8>

08009f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f22:	f7ff f919 	bl	8009158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f26:	f107 0308 	add.w	r3, r7, #8
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f866 	bl	8009ffc <prvSampleTimeNow>
 8009f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d130      	bne.n	8009f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <prvProcessTimerOrBlockTask+0x3c>
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d806      	bhi.n	8009f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f46:	f7ff f915 	bl	8009174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ff85 	bl	8009e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f52:	e024      	b.n	8009f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f5a:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <prvProcessTimerOrBlockTask+0x90>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <prvProcessTimerOrBlockTask+0x50>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <prvProcessTimerOrBlockTask+0x52>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f6c:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <prvProcessTimerOrBlockTask+0x94>)
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7fe fe5d 	bl	8008c38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f7e:	f7ff f8f9 	bl	8009174 <xTaskResumeAll>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f88:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <prvProcessTimerOrBlockTask+0x98>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
}
 8009f98:	e001      	b.n	8009f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f9a:	f7ff f8eb 	bl	8009174 <xTaskResumeAll>
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000d54 	.word	0x20000d54
 8009fac:	20000d58 	.word	0x20000d58
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <prvGetNextExpireTime+0x44>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <prvGetNextExpireTime+0x16>
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	e000      	b.n	8009fcc <prvGetNextExpireTime+0x18>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d105      	bne.n	8009fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fd8:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <prvGetNextExpireTime+0x44>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e001      	b.n	8009fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000d50 	.word	0x20000d50

08009ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a004:	f7ff f954 	bl	80092b0 <xTaskGetTickCount>
 800a008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <prvSampleTimeNow+0x3c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	429a      	cmp	r2, r3
 800a012:	d205      	bcs.n	800a020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a014:	f000 f936 	bl	800a284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	e002      	b.n	800a026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a026:	4a04      	ldr	r2, [pc, #16]	; (800a038 <prvSampleTimeNow+0x3c>)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20000d60 	.word	0x20000d60

0800a03c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d812      	bhi.n	800a088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	1ad2      	subs	r2, r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d302      	bcc.n	800a076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	e01b      	b.n	800a0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a076:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <prvInsertTimerInActiveList+0x7c>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fd fce6 	bl	8007a52 <vListInsert>
 800a086:	e012      	b.n	800a0ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d206      	bcs.n	800a09e <prvInsertTimerInActiveList+0x62>
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	429a      	cmp	r2, r3
 800a096:	d302      	bcc.n	800a09e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a098:	2301      	movs	r3, #1
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	e007      	b.n	800a0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a09e:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <prvInsertTimerInActiveList+0x80>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	f7fd fcd2 	bl	8007a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0ae:	697b      	ldr	r3, [r7, #20]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20000d54 	.word	0x20000d54
 800a0bc:	20000d50 	.word	0x20000d50

0800a0c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08e      	sub	sp, #56	; 0x38
 800a0c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0c6:	e0ca      	b.n	800a25e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	da18      	bge.n	800a100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0ce:	1d3b      	adds	r3, r7, #4
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	61fb      	str	r3, [r7, #28]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f6:	6850      	ldr	r0, [r2, #4]
 800a0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0fa:	6892      	ldr	r2, [r2, #8]
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f2c0 80aa 	blt.w	800a25c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d004      	beq.n	800a11e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fd fcd3 	bl	8007ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a11e:	463b      	mov	r3, r7
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff ff6b 	bl	8009ffc <prvSampleTimeNow>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b09      	cmp	r3, #9
 800a12c:	f200 8097 	bhi.w	800a25e <prvProcessReceivedCommands+0x19e>
 800a130:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <prvProcessReceivedCommands+0x78>)
 800a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a136:	bf00      	nop
 800a138:	0800a161 	.word	0x0800a161
 800a13c:	0800a161 	.word	0x0800a161
 800a140:	0800a161 	.word	0x0800a161
 800a144:	0800a1d5 	.word	0x0800a1d5
 800a148:	0800a1e9 	.word	0x0800a1e9
 800a14c:	0800a233 	.word	0x0800a233
 800a150:	0800a161 	.word	0x0800a161
 800a154:	0800a161 	.word	0x0800a161
 800a158:	0800a1d5 	.word	0x0800a1d5
 800a15c:	0800a1e9 	.word	0x0800a1e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	18d1      	adds	r1, r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a180:	f7ff ff5c 	bl	800a03c <prvInsertTimerInActiveList>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d069      	beq.n	800a25e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a198:	f003 0304 	and.w	r3, r3, #4
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d05e      	beq.n	800a25e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	441a      	add	r2, r3
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b2:	f7ff fe05 	bl	8009dc0 <xTimerGenericCommand>
 800a1b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d14f      	bne.n	800a25e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	61bb      	str	r3, [r7, #24]
}
 800a1d0:	bf00      	nop
 800a1d2:	e7fe      	b.n	800a1d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1e6:	e03a      	b.n	800a25e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	617b      	str	r3, [r7, #20]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	699a      	ldr	r2, [r3, #24]
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	18d1      	adds	r1, r2, r3
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22c:	f7ff ff06 	bl	800a03c <prvInsertTimerInActiveList>
					break;
 800a230:	e015      	b.n	800a25e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d103      	bne.n	800a248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a242:	f000 fbdd 	bl	800aa00 <vPortFree>
 800a246:	e00a      	b.n	800a25e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a24e:	f023 0301 	bic.w	r3, r3, #1
 800a252:	b2da      	uxtb	r2, r3
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a25a:	e000      	b.n	800a25e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a25c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a25e:	4b08      	ldr	r3, [pc, #32]	; (800a280 <prvProcessReceivedCommands+0x1c0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	1d39      	adds	r1, r7, #4
 800a264:	2200      	movs	r2, #0
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe f8da 	bl	8008420 <xQueueReceive>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f47f af2a 	bne.w	800a0c8 <prvProcessReceivedCommands+0x8>
	}
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	3730      	adds	r7, #48	; 0x30
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000d58 	.word	0x20000d58

0800a284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a28a:	e048      	b.n	800a31e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a28c:	4b2d      	ldr	r3, [pc, #180]	; (800a344 <prvSwitchTimerLists+0xc0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a296:	4b2b      	ldr	r3, [pc, #172]	; (800a344 <prvSwitchTimerLists+0xc0>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fd fc0d 	bl	8007ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d02e      	beq.n	800a31e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d90e      	bls.n	800a2f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2de:	4b19      	ldr	r3, [pc, #100]	; (800a344 <prvSwitchTimerLists+0xc0>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	f7fd fbb2 	bl	8007a52 <vListInsert>
 800a2ee:	e016      	b.n	800a31e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff fd60 	bl	8009dc0 <xTimerGenericCommand>
 800a300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	603b      	str	r3, [r7, #0]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a31e:	4b09      	ldr	r3, [pc, #36]	; (800a344 <prvSwitchTimerLists+0xc0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1b1      	bne.n	800a28c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a328:	4b06      	ldr	r3, [pc, #24]	; (800a344 <prvSwitchTimerLists+0xc0>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a32e:	4b06      	ldr	r3, [pc, #24]	; (800a348 <prvSwitchTimerLists+0xc4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a04      	ldr	r2, [pc, #16]	; (800a344 <prvSwitchTimerLists+0xc0>)
 800a334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a336:	4a04      	ldr	r2, [pc, #16]	; (800a348 <prvSwitchTimerLists+0xc4>)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	6013      	str	r3, [r2, #0]
}
 800a33c:	bf00      	nop
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20000d50 	.word	0x20000d50
 800a348:	20000d54 	.word	0x20000d54

0800a34c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a352:	f000 f967 	bl	800a624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a356:	4b15      	ldr	r3, [pc, #84]	; (800a3ac <prvCheckForValidListAndQueue+0x60>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d120      	bne.n	800a3a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a35e:	4814      	ldr	r0, [pc, #80]	; (800a3b0 <prvCheckForValidListAndQueue+0x64>)
 800a360:	f7fd fb26 	bl	80079b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a364:	4813      	ldr	r0, [pc, #76]	; (800a3b4 <prvCheckForValidListAndQueue+0x68>)
 800a366:	f7fd fb23 	bl	80079b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a36a:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <prvCheckForValidListAndQueue+0x6c>)
 800a36c:	4a10      	ldr	r2, [pc, #64]	; (800a3b0 <prvCheckForValidListAndQueue+0x64>)
 800a36e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a370:	4b12      	ldr	r3, [pc, #72]	; (800a3bc <prvCheckForValidListAndQueue+0x70>)
 800a372:	4a10      	ldr	r2, [pc, #64]	; (800a3b4 <prvCheckForValidListAndQueue+0x68>)
 800a374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a376:	2300      	movs	r3, #0
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <prvCheckForValidListAndQueue+0x74>)
 800a37c:	4a11      	ldr	r2, [pc, #68]	; (800a3c4 <prvCheckForValidListAndQueue+0x78>)
 800a37e:	2110      	movs	r1, #16
 800a380:	200a      	movs	r0, #10
 800a382:	f7fd fc31 	bl	8007be8 <xQueueGenericCreateStatic>
 800a386:	4603      	mov	r3, r0
 800a388:	4a08      	ldr	r2, [pc, #32]	; (800a3ac <prvCheckForValidListAndQueue+0x60>)
 800a38a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a38c:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <prvCheckForValidListAndQueue+0x60>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d005      	beq.n	800a3a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <prvCheckForValidListAndQueue+0x60>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	490b      	ldr	r1, [pc, #44]	; (800a3c8 <prvCheckForValidListAndQueue+0x7c>)
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fbf8 	bl	8008b90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3a0:	f000 f970 	bl	800a684 <vPortExitCritical>
}
 800a3a4:	bf00      	nop
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20000d58 	.word	0x20000d58
 800a3b0:	20000d28 	.word	0x20000d28
 800a3b4:	20000d3c 	.word	0x20000d3c
 800a3b8:	20000d50 	.word	0x20000d50
 800a3bc:	20000d54 	.word	0x20000d54
 800a3c0:	20000e04 	.word	0x20000e04
 800a3c4:	20000d64 	.word	0x20000d64
 800a3c8:	080182c0 	.word	0x080182c0

0800a3cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3b04      	subs	r3, #4
 800a3dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3b04      	subs	r3, #4
 800a3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f023 0201 	bic.w	r2, r3, #1
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3b04      	subs	r3, #4
 800a3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3fc:	4a0c      	ldr	r2, [pc, #48]	; (800a430 <pxPortInitialiseStack+0x64>)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3b14      	subs	r3, #20
 800a406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3b04      	subs	r3, #4
 800a412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f06f 0202 	mvn.w	r2, #2
 800a41a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3b20      	subs	r3, #32
 800a420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	0800a435 	.word	0x0800a435

0800a434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a43e:	4b12      	ldr	r3, [pc, #72]	; (800a488 <prvTaskExitError+0x54>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d00a      	beq.n	800a45e <prvTaskExitError+0x2a>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	60fb      	str	r3, [r7, #12]
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <prvTaskExitError+0x28>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	60bb      	str	r3, [r7, #8]
}
 800a470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a472:	bf00      	nop
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0fc      	beq.n	800a474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a47a:	bf00      	nop
 800a47c:	bf00      	nop
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	2000000c 	.word	0x2000000c
 800a48c:	00000000 	.word	0x00000000

0800a490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a490:	4b07      	ldr	r3, [pc, #28]	; (800a4b0 <pxCurrentTCBConst2>)
 800a492:	6819      	ldr	r1, [r3, #0]
 800a494:	6808      	ldr	r0, [r1, #0]
 800a496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49a:	f380 8809 	msr	PSP, r0
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f04f 0000 	mov.w	r0, #0
 800a4a6:	f380 8811 	msr	BASEPRI, r0
 800a4aa:	4770      	bx	lr
 800a4ac:	f3af 8000 	nop.w

0800a4b0 <pxCurrentTCBConst2>:
 800a4b0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop

0800a4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4b8:	4808      	ldr	r0, [pc, #32]	; (800a4dc <prvPortStartFirstTask+0x24>)
 800a4ba:	6800      	ldr	r0, [r0, #0]
 800a4bc:	6800      	ldr	r0, [r0, #0]
 800a4be:	f380 8808 	msr	MSP, r0
 800a4c2:	f04f 0000 	mov.w	r0, #0
 800a4c6:	f380 8814 	msr	CONTROL, r0
 800a4ca:	b662      	cpsie	i
 800a4cc:	b661      	cpsie	f
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	df00      	svc	0
 800a4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4da:	bf00      	nop
 800a4dc:	e000ed08 	.word	0xe000ed08

0800a4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4e6:	4b46      	ldr	r3, [pc, #280]	; (800a600 <xPortStartScheduler+0x120>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a46      	ldr	r2, [pc, #280]	; (800a604 <xPortStartScheduler+0x124>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d10a      	bne.n	800a506 <xPortStartScheduler+0x26>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a506:	4b3e      	ldr	r3, [pc, #248]	; (800a600 <xPortStartScheduler+0x120>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a3f      	ldr	r2, [pc, #252]	; (800a608 <xPortStartScheduler+0x128>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d10a      	bne.n	800a526 <xPortStartScheduler+0x46>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	60fb      	str	r3, [r7, #12]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a526:	4b39      	ldr	r3, [pc, #228]	; (800a60c <xPortStartScheduler+0x12c>)
 800a528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	22ff      	movs	r2, #255	; 0xff
 800a536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	4b31      	ldr	r3, [pc, #196]	; (800a610 <xPortStartScheduler+0x130>)
 800a54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a54e:	4b31      	ldr	r3, [pc, #196]	; (800a614 <xPortStartScheduler+0x134>)
 800a550:	2207      	movs	r2, #7
 800a552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a554:	e009      	b.n	800a56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a556:	4b2f      	ldr	r3, [pc, #188]	; (800a614 <xPortStartScheduler+0x134>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	4a2d      	ldr	r2, [pc, #180]	; (800a614 <xPortStartScheduler+0x134>)
 800a55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	b2db      	uxtb	r3, r3
 800a568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a572:	2b80      	cmp	r3, #128	; 0x80
 800a574:	d0ef      	beq.n	800a556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a576:	4b27      	ldr	r3, [pc, #156]	; (800a614 <xPortStartScheduler+0x134>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f1c3 0307 	rsb	r3, r3, #7
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d00a      	beq.n	800a598 <xPortStartScheduler+0xb8>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60bb      	str	r3, [r7, #8]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a598:	4b1e      	ldr	r3, [pc, #120]	; (800a614 <xPortStartScheduler+0x134>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <xPortStartScheduler+0x134>)
 800a5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5a2:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <xPortStartScheduler+0x134>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5aa:	4a1a      	ldr	r2, [pc, #104]	; (800a614 <xPortStartScheduler+0x134>)
 800a5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5b6:	4b18      	ldr	r3, [pc, #96]	; (800a618 <xPortStartScheduler+0x138>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a17      	ldr	r2, [pc, #92]	; (800a618 <xPortStartScheduler+0x138>)
 800a5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5c2:	4b15      	ldr	r3, [pc, #84]	; (800a618 <xPortStartScheduler+0x138>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a14      	ldr	r2, [pc, #80]	; (800a618 <xPortStartScheduler+0x138>)
 800a5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5ce:	f000 f8dd 	bl	800a78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5d2:	4b12      	ldr	r3, [pc, #72]	; (800a61c <xPortStartScheduler+0x13c>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5d8:	f000 f8fc 	bl	800a7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5dc:	4b10      	ldr	r3, [pc, #64]	; (800a620 <xPortStartScheduler+0x140>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a0f      	ldr	r2, [pc, #60]	; (800a620 <xPortStartScheduler+0x140>)
 800a5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5e8:	f7ff ff66 	bl	800a4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5ec:	f7fe ff3c 	bl	8009468 <vTaskSwitchContext>
	prvTaskExitError();
 800a5f0:	f7ff ff20 	bl	800a434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	e000ed00 	.word	0xe000ed00
 800a604:	410fc271 	.word	0x410fc271
 800a608:	410fc270 	.word	0x410fc270
 800a60c:	e000e400 	.word	0xe000e400
 800a610:	20000e54 	.word	0x20000e54
 800a614:	20000e58 	.word	0x20000e58
 800a618:	e000ed20 	.word	0xe000ed20
 800a61c:	2000000c 	.word	0x2000000c
 800a620:	e000ef34 	.word	0xe000ef34

0800a624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	607b      	str	r3, [r7, #4]
}
 800a63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a63e:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <vPortEnterCritical+0x58>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3301      	adds	r3, #1
 800a644:	4a0d      	ldr	r2, [pc, #52]	; (800a67c <vPortEnterCritical+0x58>)
 800a646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <vPortEnterCritical+0x58>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d10f      	bne.n	800a670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a650:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <vPortEnterCritical+0x5c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <vPortEnterCritical+0x4c>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	603b      	str	r3, [r7, #0]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <vPortEnterCritical+0x4a>
	}
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	2000000c 	.word	0x2000000c
 800a680:	e000ed04 	.word	0xe000ed04

0800a684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a68a:	4b12      	ldr	r3, [pc, #72]	; (800a6d4 <vPortExitCritical+0x50>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <vPortExitCritical+0x24>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	607b      	str	r3, [r7, #4]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <vPortExitCritical+0x50>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	4a09      	ldr	r2, [pc, #36]	; (800a6d4 <vPortExitCritical+0x50>)
 800a6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6b2:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <vPortExitCritical+0x50>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d105      	bne.n	800a6c6 <vPortExitCritical+0x42>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	f383 8811 	msr	BASEPRI, r3
}
 800a6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	2000000c 	.word	0x2000000c
	...

0800a6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6e0:	f3ef 8009 	mrs	r0, PSP
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	4b15      	ldr	r3, [pc, #84]	; (800a740 <pxCurrentTCBConst>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	f01e 0f10 	tst.w	lr, #16
 800a6f0:	bf08      	it	eq
 800a6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fa:	6010      	str	r0, [r2, #0]
 800a6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a704:	f380 8811 	msr	BASEPRI, r0
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f7fe feaa 	bl	8009468 <vTaskSwitchContext>
 800a714:	f04f 0000 	mov.w	r0, #0
 800a718:	f380 8811 	msr	BASEPRI, r0
 800a71c:	bc09      	pop	{r0, r3}
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	6808      	ldr	r0, [r1, #0]
 800a722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a726:	f01e 0f10 	tst.w	lr, #16
 800a72a:	bf08      	it	eq
 800a72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a730:	f380 8809 	msr	PSP, r0
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w

0800a740 <pxCurrentTCBConst>:
 800a740:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop

0800a748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	607b      	str	r3, [r7, #4]
}
 800a760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a762:	f7fe fdc7 	bl	80092f4 <xTaskIncrementTick>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <xPortSysTickHandler+0x40>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	2300      	movs	r3, #0
 800a776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	f383 8811 	msr	BASEPRI, r3
}
 800a77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a790:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <vPortSetupTimerInterrupt+0x34>)
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a796:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <vPortSetupTimerInterrupt+0x38>)
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <vPortSetupTimerInterrupt+0x3c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a0a      	ldr	r2, [pc, #40]	; (800a7cc <vPortSetupTimerInterrupt+0x40>)
 800a7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a6:	099b      	lsrs	r3, r3, #6
 800a7a8:	4a09      	ldr	r2, [pc, #36]	; (800a7d0 <vPortSetupTimerInterrupt+0x44>)
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7ae:	4b04      	ldr	r3, [pc, #16]	; (800a7c0 <vPortSetupTimerInterrupt+0x34>)
 800a7b0:	2207      	movs	r2, #7
 800a7b2:	601a      	str	r2, [r3, #0]
}
 800a7b4:	bf00      	nop
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	e000e010 	.word	0xe000e010
 800a7c4:	e000e018 	.word	0xe000e018
 800a7c8:	20000000 	.word	0x20000000
 800a7cc:	10624dd3 	.word	0x10624dd3
 800a7d0:	e000e014 	.word	0xe000e014

0800a7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7e4 <vPortEnableVFP+0x10>
 800a7d8:	6801      	ldr	r1, [r0, #0]
 800a7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7de:	6001      	str	r1, [r0, #0]
 800a7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7e2:	bf00      	nop
 800a7e4:	e000ed88 	.word	0xe000ed88

0800a7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7ee:	f3ef 8305 	mrs	r3, IPSR
 800a7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b0f      	cmp	r3, #15
 800a7f8:	d914      	bls.n	800a824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7fa:	4a17      	ldr	r2, [pc, #92]	; (800a858 <vPortValidateInterruptPriority+0x70>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <vPortValidateInterruptPriority+0x74>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	7afa      	ldrb	r2, [r7, #11]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d20a      	bcs.n	800a824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a824:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <vPortValidateInterruptPriority+0x78>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <vPortValidateInterruptPriority+0x7c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d90a      	bls.n	800a84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	603b      	str	r3, [r7, #0]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <vPortValidateInterruptPriority+0x60>
	}
 800a84a:	bf00      	nop
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	e000e3f0 	.word	0xe000e3f0
 800a85c:	20000e54 	.word	0x20000e54
 800a860:	e000ed0c 	.word	0xe000ed0c
 800a864:	20000e58 	.word	0x20000e58

0800a868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	; 0x28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a870:	2300      	movs	r3, #0
 800a872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a874:	f7fe fc70 	bl	8009158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a878:	4b5b      	ldr	r3, [pc, #364]	; (800a9e8 <pvPortMalloc+0x180>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a880:	f000 f920 	bl	800aac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a884:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <pvPortMalloc+0x184>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4013      	ands	r3, r2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f040 8093 	bne.w	800a9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01d      	beq.n	800a8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a898:	2208      	movs	r2, #8
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4413      	add	r3, r2
 800a89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d014      	beq.n	800a8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f023 0307 	bic.w	r3, r3, #7
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00a      	beq.n	800a8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	617b      	str	r3, [r7, #20]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d06e      	beq.n	800a9b8 <pvPortMalloc+0x150>
 800a8da:	4b45      	ldr	r3, [pc, #276]	; (800a9f0 <pvPortMalloc+0x188>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d869      	bhi.n	800a9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8e4:	4b43      	ldr	r3, [pc, #268]	; (800a9f4 <pvPortMalloc+0x18c>)
 800a8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8e8:	4b42      	ldr	r3, [pc, #264]	; (800a9f4 <pvPortMalloc+0x18c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ee:	e004      	b.n	800a8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d903      	bls.n	800a90c <pvPortMalloc+0xa4>
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f1      	bne.n	800a8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a90c:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <pvPortMalloc+0x180>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a912:	429a      	cmp	r2, r3
 800a914:	d050      	beq.n	800a9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2208      	movs	r2, #8
 800a91c:	4413      	add	r3, r2
 800a91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	2308      	movs	r3, #8
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	429a      	cmp	r2, r3
 800a936:	d91f      	bls.n	800a978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00a      	beq.n	800a960 <pvPortMalloc+0xf8>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	613b      	str	r3, [r7, #16]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	1ad2      	subs	r2, r2, r3
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a972:	69b8      	ldr	r0, [r7, #24]
 800a974:	f000 f908 	bl	800ab88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <pvPortMalloc+0x188>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	4a1b      	ldr	r2, [pc, #108]	; (800a9f0 <pvPortMalloc+0x188>)
 800a984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a986:	4b1a      	ldr	r3, [pc, #104]	; (800a9f0 <pvPortMalloc+0x188>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	4b1b      	ldr	r3, [pc, #108]	; (800a9f8 <pvPortMalloc+0x190>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d203      	bcs.n	800a99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a992:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <pvPortMalloc+0x188>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <pvPortMalloc+0x190>)
 800a998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <pvPortMalloc+0x184>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <pvPortMalloc+0x194>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	4a11      	ldr	r2, [pc, #68]	; (800a9fc <pvPortMalloc+0x194>)
 800a9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9b8:	f7fe fbdc 	bl	8009174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00a      	beq.n	800a9dc <pvPortMalloc+0x174>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	60fb      	str	r3, [r7, #12]
}
 800a9d8:	bf00      	nop
 800a9da:	e7fe      	b.n	800a9da <pvPortMalloc+0x172>
	return pvReturn;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20004a64 	.word	0x20004a64
 800a9ec:	20004a78 	.word	0x20004a78
 800a9f0:	20004a68 	.word	0x20004a68
 800a9f4:	20004a5c 	.word	0x20004a5c
 800a9f8:	20004a6c 	.word	0x20004a6c
 800a9fc:	20004a70 	.word	0x20004a70

0800aa00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d04d      	beq.n	800aaae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa12:	2308      	movs	r3, #8
 800aa14:	425b      	negs	r3, r3
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	4413      	add	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	4b24      	ldr	r3, [pc, #144]	; (800aab8 <vPortFree+0xb8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <vPortFree+0x44>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	60fb      	str	r3, [r7, #12]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <vPortFree+0x62>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	60bb      	str	r3, [r7, #8]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <vPortFree+0xb8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01e      	beq.n	800aaae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11a      	bne.n	800aaae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <vPortFree+0xb8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	43db      	mvns	r3, r3
 800aa82:	401a      	ands	r2, r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa88:	f7fe fb66 	bl	8009158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	4b0a      	ldr	r3, [pc, #40]	; (800aabc <vPortFree+0xbc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4413      	add	r3, r2
 800aa96:	4a09      	ldr	r2, [pc, #36]	; (800aabc <vPortFree+0xbc>)
 800aa98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	f000 f874 	bl	800ab88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <vPortFree+0xc0>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	4a06      	ldr	r2, [pc, #24]	; (800aac0 <vPortFree+0xc0>)
 800aaa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aaaa:	f7fe fb63 	bl	8009174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaae:	bf00      	nop
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20004a78 	.word	0x20004a78
 800aabc:	20004a68 	.word	0x20004a68
 800aac0:	20004a74 	.word	0x20004a74

0800aac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aad0:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <prvHeapInit+0xac>)
 800aad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00c      	beq.n	800aaf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3307      	adds	r3, #7
 800aae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0307 	bic.w	r3, r3, #7
 800aaea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	4a1f      	ldr	r2, [pc, #124]	; (800ab70 <prvHeapInit+0xac>)
 800aaf4:	4413      	add	r3, r2
 800aaf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aafc:	4a1d      	ldr	r2, [pc, #116]	; (800ab74 <prvHeapInit+0xb0>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab02:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <prvHeapInit+0xb0>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab10:	2208      	movs	r2, #8
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 0307 	bic.w	r3, r3, #7
 800ab1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <prvHeapInit+0xb4>)
 800ab24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <prvHeapInit+0xb4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab2e:	4b12      	ldr	r3, [pc, #72]	; (800ab78 <prvHeapInit+0xb4>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2200      	movs	r2, #0
 800ab34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab44:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <prvHeapInit+0xb4>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <prvHeapInit+0xb8>)
 800ab52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <prvHeapInit+0xbc>)
 800ab5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab5c:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <prvHeapInit+0xc0>)
 800ab5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab62:	601a      	str	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	20000e5c 	.word	0x20000e5c
 800ab74:	20004a5c 	.word	0x20004a5c
 800ab78:	20004a64 	.word	0x20004a64
 800ab7c:	20004a6c 	.word	0x20004a6c
 800ab80:	20004a68 	.word	0x20004a68
 800ab84:	20004a78 	.word	0x20004a78

0800ab88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab90:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <prvInsertBlockIntoFreeList+0xac>)
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	e002      	b.n	800ab9c <prvInsertBlockIntoFreeList+0x14>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d8f7      	bhi.n	800ab96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	4413      	add	r3, r2
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d108      	bne.n	800abca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	441a      	add	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	441a      	add	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d118      	bne.n	800ac10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <prvInsertBlockIntoFreeList+0xb0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d00d      	beq.n	800ac06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	441a      	add	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e008      	b.n	800ac18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac06:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <prvInsertBlockIntoFreeList+0xb0>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	e003      	b.n	800ac18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d002      	beq.n	800ac26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac26:	bf00      	nop
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20004a5c 	.word	0x20004a5c
 800ac38:	20004a64 	.word	0x20004a64

0800ac3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ac46:	f007 fa97 	bl	8012178 <sys_timeouts_sleeptime>
 800ac4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac52:	d10b      	bne.n	800ac6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ac54:	4813      	ldr	r0, [pc, #76]	; (800aca4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac56:	f00c f99e 	bl	8016f96 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f00c f926 	bl	8016eb0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ac64:	480f      	ldr	r0, [pc, #60]	; (800aca4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac66:	f00c f987 	bl	8016f78 <sys_mutex_lock>
    return;
 800ac6a:	e018      	b.n	800ac9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d102      	bne.n	800ac78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ac72:	f007 fa47 	bl	8012104 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac76:	e7e6      	b.n	800ac46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ac78:	480a      	ldr	r0, [pc, #40]	; (800aca4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac7a:	f00c f98c 	bl	8016f96 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f00c f914 	bl	8016eb0 <sys_arch_mbox_fetch>
 800ac88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ac8a:	4806      	ldr	r0, [pc, #24]	; (800aca4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac8c:	f00c f974 	bl	8016f78 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac96:	d102      	bne.n	800ac9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ac98:	f007 fa34 	bl	8012104 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac9c:	e7d3      	b.n	800ac46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20008460 	.word	0x20008460

0800aca8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800acb0:	4810      	ldr	r0, [pc, #64]	; (800acf4 <tcpip_thread+0x4c>)
 800acb2:	f00c f961 	bl	8016f78 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800acb6:	4b10      	ldr	r3, [pc, #64]	; (800acf8 <tcpip_thread+0x50>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800acbe:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <tcpip_thread+0x50>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a0e      	ldr	r2, [pc, #56]	; (800acfc <tcpip_thread+0x54>)
 800acc4:	6812      	ldr	r2, [r2, #0]
 800acc6:	4610      	mov	r0, r2
 800acc8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800acca:	f107 030c 	add.w	r3, r7, #12
 800acce:	4619      	mov	r1, r3
 800acd0:	480b      	ldr	r0, [pc, #44]	; (800ad00 <tcpip_thread+0x58>)
 800acd2:	f7ff ffb3 	bl	800ac3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d106      	bne.n	800acea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <tcpip_thread+0x5c>)
 800acde:	2291      	movs	r2, #145	; 0x91
 800ace0:	4909      	ldr	r1, [pc, #36]	; (800ad08 <tcpip_thread+0x60>)
 800ace2:	480a      	ldr	r0, [pc, #40]	; (800ad0c <tcpip_thread+0x64>)
 800ace4:	f00c fb3e 	bl	8017364 <iprintf>
      continue;
 800ace8:	e003      	b.n	800acf2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f80f 	bl	800ad10 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800acf2:	e7ea      	b.n	800acca <tcpip_thread+0x22>
 800acf4:	20008460 	.word	0x20008460
 800acf8:	20004a7c 	.word	0x20004a7c
 800acfc:	20004a80 	.word	0x20004a80
 800ad00:	20004a84 	.word	0x20004a84
 800ad04:	080182c8 	.word	0x080182c8
 800ad08:	080182f8 	.word	0x080182f8
 800ad0c:	08018318 	.word	0x08018318

0800ad10 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d026      	beq.n	800ad6e <tcpip_thread_handle_msg+0x5e>
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	dc2b      	bgt.n	800ad7c <tcpip_thread_handle_msg+0x6c>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <tcpip_thread_handle_msg+0x1e>
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d015      	beq.n	800ad58 <tcpip_thread_handle_msg+0x48>
 800ad2c:	e026      	b.n	800ad7c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	6850      	ldr	r0, [r2, #4]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	6892      	ldr	r2, [r2, #8]
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4798      	blx	r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fcd1 	bl	800c6f0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	2009      	movs	r0, #9
 800ad52:	f000 fe1d 	bl	800b990 <memp_free>
      break;
 800ad56:	e018      	b.n	800ad8a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6892      	ldr	r2, [r2, #8]
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	2008      	movs	r0, #8
 800ad68:	f000 fe12 	bl	800b990 <memp_free>
      break;
 800ad6c:	e00d      	b.n	800ad8a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6892      	ldr	r2, [r2, #8]
 800ad76:	4610      	mov	r0, r2
 800ad78:	4798      	blx	r3
      break;
 800ad7a:	e006      	b.n	800ad8a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <tcpip_thread_handle_msg+0x84>)
 800ad7e:	22cf      	movs	r2, #207	; 0xcf
 800ad80:	4905      	ldr	r1, [pc, #20]	; (800ad98 <tcpip_thread_handle_msg+0x88>)
 800ad82:	4806      	ldr	r0, [pc, #24]	; (800ad9c <tcpip_thread_handle_msg+0x8c>)
 800ad84:	f00c faee 	bl	8017364 <iprintf>
      break;
 800ad88:	bf00      	nop
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	080182c8 	.word	0x080182c8
 800ad98:	080182f8 	.word	0x080182f8
 800ad9c:	08018318 	.word	0x08018318

0800ada0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800adac:	481a      	ldr	r0, [pc, #104]	; (800ae18 <tcpip_inpkt+0x78>)
 800adae:	f00c f8b0 	bl	8016f12 <sys_mbox_valid>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <tcpip_inpkt+0x24>
 800adb8:	4b18      	ldr	r3, [pc, #96]	; (800ae1c <tcpip_inpkt+0x7c>)
 800adba:	22fc      	movs	r2, #252	; 0xfc
 800adbc:	4918      	ldr	r1, [pc, #96]	; (800ae20 <tcpip_inpkt+0x80>)
 800adbe:	4819      	ldr	r0, [pc, #100]	; (800ae24 <tcpip_inpkt+0x84>)
 800adc0:	f00c fad0 	bl	8017364 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800adc4:	2009      	movs	r0, #9
 800adc6:	f000 fd91 	bl	800b8ec <memp_malloc>
 800adca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d102      	bne.n	800add8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800add2:	f04f 33ff 	mov.w	r3, #4294967295
 800add6:	e01a      	b.n	800ae0e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	4809      	ldr	r0, [pc, #36]	; (800ae18 <tcpip_inpkt+0x78>)
 800adf4:	f00c f842 	bl	8016e7c <sys_mbox_trypost>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d006      	beq.n	800ae0c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800adfe:	6979      	ldr	r1, [r7, #20]
 800ae00:	2009      	movs	r0, #9
 800ae02:	f000 fdc5 	bl	800b990 <memp_free>
    return ERR_MEM;
 800ae06:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0a:	e000      	b.n	800ae0e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ae0c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20004a84 	.word	0x20004a84
 800ae1c:	080182c8 	.word	0x080182c8
 800ae20:	08018340 	.word	0x08018340
 800ae24:	08018318 	.word	0x08018318

0800ae28 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae38:	f003 0318 	and.w	r3, r3, #24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d006      	beq.n	800ae4e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ae40:	4a08      	ldr	r2, [pc, #32]	; (800ae64 <tcpip_input+0x3c>)
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff ffab 	bl	800ada0 <tcpip_inpkt>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	e005      	b.n	800ae5a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ae4e:	4a06      	ldr	r2, [pc, #24]	; (800ae68 <tcpip_input+0x40>)
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff ffa4 	bl	800ada0 <tcpip_inpkt>
 800ae58:	4603      	mov	r3, r0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	08016c9d 	.word	0x08016c9d
 800ae68:	08015b75 	.word	0x08015b75

0800ae6c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ae76:	4819      	ldr	r0, [pc, #100]	; (800aedc <tcpip_try_callback+0x70>)
 800ae78:	f00c f84b 	bl	8016f12 <sys_mbox_valid>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <tcpip_try_callback+0x24>
 800ae82:	4b17      	ldr	r3, [pc, #92]	; (800aee0 <tcpip_try_callback+0x74>)
 800ae84:	f240 125d 	movw	r2, #349	; 0x15d
 800ae88:	4916      	ldr	r1, [pc, #88]	; (800aee4 <tcpip_try_callback+0x78>)
 800ae8a:	4817      	ldr	r0, [pc, #92]	; (800aee8 <tcpip_try_callback+0x7c>)
 800ae8c:	f00c fa6a 	bl	8017364 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ae90:	2008      	movs	r0, #8
 800ae92:	f000 fd2b 	bl	800b8ec <memp_malloc>
 800ae96:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d102      	bne.n	800aea4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	e017      	b.n	800aed4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2201      	movs	r2, #1
 800aea8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aeb6:	68f9      	ldr	r1, [r7, #12]
 800aeb8:	4808      	ldr	r0, [pc, #32]	; (800aedc <tcpip_try_callback+0x70>)
 800aeba:	f00b ffdf 	bl	8016e7c <sys_mbox_trypost>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d006      	beq.n	800aed2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	2008      	movs	r0, #8
 800aec8:	f000 fd62 	bl	800b990 <memp_free>
    return ERR_MEM;
 800aecc:	f04f 33ff 	mov.w	r3, #4294967295
 800aed0:	e000      	b.n	800aed4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	20004a84 	.word	0x20004a84
 800aee0:	080182c8 	.word	0x080182c8
 800aee4:	08018340 	.word	0x08018340
 800aee8:	08018318 	.word	0x08018318

0800aeec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800aef6:	f000 f871 	bl	800afdc <lwip_init>

  tcpip_init_done = initfunc;
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <tcpip_init+0x6c>)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800af00:	4a16      	ldr	r2, [pc, #88]	; (800af5c <tcpip_init+0x70>)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800af06:	2106      	movs	r1, #6
 800af08:	4815      	ldr	r0, [pc, #84]	; (800af60 <tcpip_init+0x74>)
 800af0a:	f00b ff9d 	bl	8016e48 <sys_mbox_new>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d006      	beq.n	800af22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800af14:	4b13      	ldr	r3, [pc, #76]	; (800af64 <tcpip_init+0x78>)
 800af16:	f240 2261 	movw	r2, #609	; 0x261
 800af1a:	4913      	ldr	r1, [pc, #76]	; (800af68 <tcpip_init+0x7c>)
 800af1c:	4813      	ldr	r0, [pc, #76]	; (800af6c <tcpip_init+0x80>)
 800af1e:	f00c fa21 	bl	8017364 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800af22:	4813      	ldr	r0, [pc, #76]	; (800af70 <tcpip_init+0x84>)
 800af24:	f00c f812 	bl	8016f4c <sys_mutex_new>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d006      	beq.n	800af3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <tcpip_init+0x78>)
 800af30:	f240 2265 	movw	r2, #613	; 0x265
 800af34:	490f      	ldr	r1, [pc, #60]	; (800af74 <tcpip_init+0x88>)
 800af36:	480d      	ldr	r0, [pc, #52]	; (800af6c <tcpip_init+0x80>)
 800af38:	f00c fa14 	bl	8017364 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800af3c:	2318      	movs	r3, #24
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af44:	2200      	movs	r2, #0
 800af46:	490c      	ldr	r1, [pc, #48]	; (800af78 <tcpip_init+0x8c>)
 800af48:	480c      	ldr	r0, [pc, #48]	; (800af7c <tcpip_init+0x90>)
 800af4a:	f00c f831 	bl	8016fb0 <sys_thread_new>
}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20004a7c 	.word	0x20004a7c
 800af5c:	20004a80 	.word	0x20004a80
 800af60:	20004a84 	.word	0x20004a84
 800af64:	080182c8 	.word	0x080182c8
 800af68:	08018350 	.word	0x08018350
 800af6c:	08018318 	.word	0x08018318
 800af70:	20008460 	.word	0x20008460
 800af74:	08018374 	.word	0x08018374
 800af78:	0800aca9 	.word	0x0800aca9
 800af7c:	08018398 	.word	0x08018398

0800af80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800af8a:	88fb      	ldrh	r3, [r7, #6]
 800af8c:	021b      	lsls	r3, r3, #8
 800af8e:	b21a      	sxth	r2, r3
 800af90:	88fb      	ldrh	r3, [r7, #6]
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	b29b      	uxth	r3, r3
 800af96:	b21b      	sxth	r3, r3
 800af98:	4313      	orrs	r3, r2
 800af9a:	b21b      	sxth	r3, r3
 800af9c:	b29b      	uxth	r3, r3
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	061a      	lsls	r2, r3, #24
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	021b      	lsls	r3, r3, #8
 800afba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afbe:	431a      	orrs	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	0a1b      	lsrs	r3, r3, #8
 800afc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800afc8:	431a      	orrs	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	0e1b      	lsrs	r3, r3, #24
 800afce:	4313      	orrs	r3, r2
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800afe6:	f00b ffa5 	bl	8016f34 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800afea:	f000 f8d5 	bl	800b198 <mem_init>
  memp_init();
 800afee:	f000 fc31 	bl	800b854 <memp_init>
  pbuf_init();
  netif_init();
 800aff2:	f000 fcf7 	bl	800b9e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aff6:	f007 f8f7 	bl	80121e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800affa:	f001 fe23 	bl	800cc44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800affe:	f007 f839 	bl	8012074 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	4603      	mov	r3, r0
 800b014:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b016:	4b05      	ldr	r3, [pc, #20]	; (800b02c <ptr_to_mem+0x20>)
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	88fb      	ldrh	r3, [r7, #6]
 800b01c:	4413      	add	r3, r2
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	20004a88 	.word	0x20004a88

0800b030 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b038:	4b05      	ldr	r3, [pc, #20]	; (800b050 <mem_to_ptr+0x20>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	b29b      	uxth	r3, r3
}
 800b042:	4618      	mov	r0, r3
 800b044:	370c      	adds	r7, #12
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	20004a88 	.word	0x20004a88

0800b054 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b05c:	4b45      	ldr	r3, [pc, #276]	; (800b174 <plug_holes+0x120>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	429a      	cmp	r2, r3
 800b064:	d206      	bcs.n	800b074 <plug_holes+0x20>
 800b066:	4b44      	ldr	r3, [pc, #272]	; (800b178 <plug_holes+0x124>)
 800b068:	f240 12df 	movw	r2, #479	; 0x1df
 800b06c:	4943      	ldr	r1, [pc, #268]	; (800b17c <plug_holes+0x128>)
 800b06e:	4844      	ldr	r0, [pc, #272]	; (800b180 <plug_holes+0x12c>)
 800b070:	f00c f978 	bl	8017364 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b074:	4b43      	ldr	r3, [pc, #268]	; (800b184 <plug_holes+0x130>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d306      	bcc.n	800b08c <plug_holes+0x38>
 800b07e:	4b3e      	ldr	r3, [pc, #248]	; (800b178 <plug_holes+0x124>)
 800b080:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b084:	4940      	ldr	r1, [pc, #256]	; (800b188 <plug_holes+0x134>)
 800b086:	483e      	ldr	r0, [pc, #248]	; (800b180 <plug_holes+0x12c>)
 800b088:	f00c f96c 	bl	8017364 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	791b      	ldrb	r3, [r3, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d006      	beq.n	800b0a2 <plug_holes+0x4e>
 800b094:	4b38      	ldr	r3, [pc, #224]	; (800b178 <plug_holes+0x124>)
 800b096:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b09a:	493c      	ldr	r1, [pc, #240]	; (800b18c <plug_holes+0x138>)
 800b09c:	4838      	ldr	r0, [pc, #224]	; (800b180 <plug_holes+0x12c>)
 800b09e:	f00c f961 	bl	8017364 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0aa:	d906      	bls.n	800b0ba <plug_holes+0x66>
 800b0ac:	4b32      	ldr	r3, [pc, #200]	; (800b178 <plug_holes+0x124>)
 800b0ae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b0b2:	4937      	ldr	r1, [pc, #220]	; (800b190 <plug_holes+0x13c>)
 800b0b4:	4832      	ldr	r0, [pc, #200]	; (800b180 <plug_holes+0x12c>)
 800b0b6:	f00c f955 	bl	8017364 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff ffa4 	bl	800b00c <ptr_to_mem>
 800b0c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d024      	beq.n	800b118 <plug_holes+0xc4>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	791b      	ldrb	r3, [r3, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d120      	bne.n	800b118 <plug_holes+0xc4>
 800b0d6:	4b2b      	ldr	r3, [pc, #172]	; (800b184 <plug_holes+0x130>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d01b      	beq.n	800b118 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b0e0:	4b2c      	ldr	r3, [pc, #176]	; (800b194 <plug_holes+0x140>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d102      	bne.n	800b0f0 <plug_holes+0x9c>
      lfree = mem;
 800b0ea:	4a2a      	ldr	r2, [pc, #168]	; (800b194 <plug_holes+0x140>)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	881a      	ldrh	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b100:	d00a      	beq.n	800b118 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff ff80 	bl	800b00c <ptr_to_mem>
 800b10c:	4604      	mov	r4, r0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff ff8e 	bl	800b030 <mem_to_ptr>
 800b114:	4603      	mov	r3, r0
 800b116:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	885b      	ldrh	r3, [r3, #2]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff ff75 	bl	800b00c <ptr_to_mem>
 800b122:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d01f      	beq.n	800b16c <plug_holes+0x118>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	791b      	ldrb	r3, [r3, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d11b      	bne.n	800b16c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b134:	4b17      	ldr	r3, [pc, #92]	; (800b194 <plug_holes+0x140>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d102      	bne.n	800b144 <plug_holes+0xf0>
      lfree = pmem;
 800b13e:	4a15      	ldr	r2, [pc, #84]	; (800b194 <plug_holes+0x140>)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	881a      	ldrh	r2, [r3, #0]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b154:	d00a      	beq.n	800b16c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff ff56 	bl	800b00c <ptr_to_mem>
 800b160:	4604      	mov	r4, r0
 800b162:	68b8      	ldr	r0, [r7, #8]
 800b164:	f7ff ff64 	bl	800b030 <mem_to_ptr>
 800b168:	4603      	mov	r3, r0
 800b16a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b16c:	bf00      	nop
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	bd90      	pop	{r4, r7, pc}
 800b174:	20004a88 	.word	0x20004a88
 800b178:	080183a8 	.word	0x080183a8
 800b17c:	080183d8 	.word	0x080183d8
 800b180:	080183f0 	.word	0x080183f0
 800b184:	20004a8c 	.word	0x20004a8c
 800b188:	08018418 	.word	0x08018418
 800b18c:	08018434 	.word	0x08018434
 800b190:	08018450 	.word	0x08018450
 800b194:	20004a94 	.word	0x20004a94

0800b198 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b19e:	4b1f      	ldr	r3, [pc, #124]	; (800b21c <mem_init+0x84>)
 800b1a0:	3303      	adds	r3, #3
 800b1a2:	f023 0303 	bic.w	r3, r3, #3
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <mem_init+0x88>)
 800b1aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b1ac:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <mem_init+0x88>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b1c6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b1ca:	f7ff ff1f 	bl	800b00c <ptr_to_mem>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	4a14      	ldr	r2, [pc, #80]	; (800b224 <mem_init+0x8c>)
 800b1d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b1d4:	4b13      	ldr	r3, [pc, #76]	; (800b224 <mem_init+0x8c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b1dc:	4b11      	ldr	r3, [pc, #68]	; (800b224 <mem_init+0x8c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <mem_init+0x8c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <mem_init+0x88>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a0c      	ldr	r2, [pc, #48]	; (800b228 <mem_init+0x90>)
 800b1f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b1f8:	480c      	ldr	r0, [pc, #48]	; (800b22c <mem_init+0x94>)
 800b1fa:	f00b fea7 	bl	8016f4c <sys_mutex_new>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d006      	beq.n	800b212 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <mem_init+0x98>)
 800b206:	f240 221f 	movw	r2, #543	; 0x21f
 800b20a:	490a      	ldr	r1, [pc, #40]	; (800b234 <mem_init+0x9c>)
 800b20c:	480a      	ldr	r0, [pc, #40]	; (800b238 <mem_init+0xa0>)
 800b20e:	f00c f8a9 	bl	8017364 <iprintf>
  }
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	2000847c 	.word	0x2000847c
 800b220:	20004a88 	.word	0x20004a88
 800b224:	20004a8c 	.word	0x20004a8c
 800b228:	20004a94 	.word	0x20004a94
 800b22c:	20004a90 	.word	0x20004a90
 800b230:	080183a8 	.word	0x080183a8
 800b234:	0801847c 	.word	0x0801847c
 800b238:	080183f0 	.word	0x080183f0

0800b23c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fef3 	bl	800b030 <mem_to_ptr>
 800b24a:	4603      	mov	r3, r0
 800b24c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff feda 	bl	800b00c <ptr_to_mem>
 800b258:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	885b      	ldrh	r3, [r3, #2]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fed4 	bl	800b00c <ptr_to_mem>
 800b264:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b26e:	d818      	bhi.n	800b2a2 <mem_link_valid+0x66>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b278:	d813      	bhi.n	800b2a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b27e:	8afa      	ldrh	r2, [r7, #22]
 800b280:	429a      	cmp	r2, r3
 800b282:	d004      	beq.n	800b28e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	8afa      	ldrh	r2, [r7, #22]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d109      	bne.n	800b2a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b28e:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <mem_link_valid+0x74>)
 800b290:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	429a      	cmp	r2, r3
 800b296:	d006      	beq.n	800b2a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	885b      	ldrh	r3, [r3, #2]
 800b29c:	8afa      	ldrh	r2, [r7, #22]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d001      	beq.n	800b2a6 <mem_link_valid+0x6a>
    return 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e000      	b.n	800b2a8 <mem_link_valid+0x6c>
  }
  return 1;
 800b2a6:	2301      	movs	r3, #1
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3718      	adds	r7, #24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	20004a8c 	.word	0x20004a8c

0800b2b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d070      	beq.n	800b3a4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f003 0303 	and.w	r3, r3, #3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00d      	beq.n	800b2e8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b2cc:	4b37      	ldr	r3, [pc, #220]	; (800b3ac <mem_free+0xf8>)
 800b2ce:	f240 2273 	movw	r2, #627	; 0x273
 800b2d2:	4937      	ldr	r1, [pc, #220]	; (800b3b0 <mem_free+0xfc>)
 800b2d4:	4837      	ldr	r0, [pc, #220]	; (800b3b4 <mem_free+0x100>)
 800b2d6:	f00c f845 	bl	8017364 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2da:	f00b fe89 	bl	8016ff0 <sys_arch_protect>
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f00b fe93 	bl	801700c <sys_arch_unprotect>
    return;
 800b2e6:	e05e      	b.n	800b3a6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3b08      	subs	r3, #8
 800b2ec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b2ee:	4b32      	ldr	r3, [pc, #200]	; (800b3b8 <mem_free+0x104>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d306      	bcc.n	800b306 <mem_free+0x52>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f103 020c 	add.w	r2, r3, #12
 800b2fe:	4b2f      	ldr	r3, [pc, #188]	; (800b3bc <mem_free+0x108>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d90d      	bls.n	800b322 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b306:	4b29      	ldr	r3, [pc, #164]	; (800b3ac <mem_free+0xf8>)
 800b308:	f240 227f 	movw	r2, #639	; 0x27f
 800b30c:	492c      	ldr	r1, [pc, #176]	; (800b3c0 <mem_free+0x10c>)
 800b30e:	4829      	ldr	r0, [pc, #164]	; (800b3b4 <mem_free+0x100>)
 800b310:	f00c f828 	bl	8017364 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b314:	f00b fe6c 	bl	8016ff0 <sys_arch_protect>
 800b318:	6138      	str	r0, [r7, #16]
 800b31a:	6938      	ldr	r0, [r7, #16]
 800b31c:	f00b fe76 	bl	801700c <sys_arch_unprotect>
    return;
 800b320:	e041      	b.n	800b3a6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b322:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <mem_free+0x110>)
 800b324:	f00b fe28 	bl	8016f78 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	791b      	ldrb	r3, [r3, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d110      	bne.n	800b352 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b330:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <mem_free+0xf8>)
 800b332:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b336:	4924      	ldr	r1, [pc, #144]	; (800b3c8 <mem_free+0x114>)
 800b338:	481e      	ldr	r0, [pc, #120]	; (800b3b4 <mem_free+0x100>)
 800b33a:	f00c f813 	bl	8017364 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b33e:	4821      	ldr	r0, [pc, #132]	; (800b3c4 <mem_free+0x110>)
 800b340:	f00b fe29 	bl	8016f96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b344:	f00b fe54 	bl	8016ff0 <sys_arch_protect>
 800b348:	6178      	str	r0, [r7, #20]
 800b34a:	6978      	ldr	r0, [r7, #20]
 800b34c:	f00b fe5e 	bl	801700c <sys_arch_unprotect>
    return;
 800b350:	e029      	b.n	800b3a6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b352:	69f8      	ldr	r0, [r7, #28]
 800b354:	f7ff ff72 	bl	800b23c <mem_link_valid>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d110      	bne.n	800b380 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <mem_free+0xf8>)
 800b360:	f240 2295 	movw	r2, #661	; 0x295
 800b364:	4919      	ldr	r1, [pc, #100]	; (800b3cc <mem_free+0x118>)
 800b366:	4813      	ldr	r0, [pc, #76]	; (800b3b4 <mem_free+0x100>)
 800b368:	f00b fffc 	bl	8017364 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b36c:	4815      	ldr	r0, [pc, #84]	; (800b3c4 <mem_free+0x110>)
 800b36e:	f00b fe12 	bl	8016f96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b372:	f00b fe3d 	bl	8016ff0 <sys_arch_protect>
 800b376:	61b8      	str	r0, [r7, #24]
 800b378:	69b8      	ldr	r0, [r7, #24]
 800b37a:	f00b fe47 	bl	801700c <sys_arch_unprotect>
    return;
 800b37e:	e012      	b.n	800b3a6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	2200      	movs	r2, #0
 800b384:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b386:	4b12      	ldr	r3, [pc, #72]	; (800b3d0 <mem_free+0x11c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	69fa      	ldr	r2, [r7, #28]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d202      	bcs.n	800b396 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b390:	4a0f      	ldr	r2, [pc, #60]	; (800b3d0 <mem_free+0x11c>)
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b396:	69f8      	ldr	r0, [r7, #28]
 800b398:	f7ff fe5c 	bl	800b054 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b39c:	4809      	ldr	r0, [pc, #36]	; (800b3c4 <mem_free+0x110>)
 800b39e:	f00b fdfa 	bl	8016f96 <sys_mutex_unlock>
 800b3a2:	e000      	b.n	800b3a6 <mem_free+0xf2>
    return;
 800b3a4:	bf00      	nop
}
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	080183a8 	.word	0x080183a8
 800b3b0:	08018498 	.word	0x08018498
 800b3b4:	080183f0 	.word	0x080183f0
 800b3b8:	20004a88 	.word	0x20004a88
 800b3bc:	20004a8c 	.word	0x20004a8c
 800b3c0:	080184bc 	.word	0x080184bc
 800b3c4:	20004a90 	.word	0x20004a90
 800b3c8:	080184d8 	.word	0x080184d8
 800b3cc:	08018500 	.word	0x08018500
 800b3d0:	20004a94 	.word	0x20004a94

0800b3d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b3e0:	887b      	ldrh	r3, [r7, #2]
 800b3e2:	3303      	adds	r3, #3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b3ec:	8bfb      	ldrh	r3, [r7, #30]
 800b3ee:	2b0b      	cmp	r3, #11
 800b3f0:	d801      	bhi.n	800b3f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b3f6:	8bfb      	ldrh	r3, [r7, #30]
 800b3f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3fc:	d803      	bhi.n	800b406 <mem_trim+0x32>
 800b3fe:	8bfa      	ldrh	r2, [r7, #30]
 800b400:	887b      	ldrh	r3, [r7, #2]
 800b402:	429a      	cmp	r2, r3
 800b404:	d201      	bcs.n	800b40a <mem_trim+0x36>
    return NULL;
 800b406:	2300      	movs	r3, #0
 800b408:	e0d8      	b.n	800b5bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b40a:	4b6e      	ldr	r3, [pc, #440]	; (800b5c4 <mem_trim+0x1f0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d304      	bcc.n	800b41e <mem_trim+0x4a>
 800b414:	4b6c      	ldr	r3, [pc, #432]	; (800b5c8 <mem_trim+0x1f4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d306      	bcc.n	800b42c <mem_trim+0x58>
 800b41e:	4b6b      	ldr	r3, [pc, #428]	; (800b5cc <mem_trim+0x1f8>)
 800b420:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b424:	496a      	ldr	r1, [pc, #424]	; (800b5d0 <mem_trim+0x1fc>)
 800b426:	486b      	ldr	r0, [pc, #428]	; (800b5d4 <mem_trim+0x200>)
 800b428:	f00b ff9c 	bl	8017364 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b42c:	4b65      	ldr	r3, [pc, #404]	; (800b5c4 <mem_trim+0x1f0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d304      	bcc.n	800b440 <mem_trim+0x6c>
 800b436:	4b64      	ldr	r3, [pc, #400]	; (800b5c8 <mem_trim+0x1f4>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d307      	bcc.n	800b450 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b440:	f00b fdd6 	bl	8016ff0 <sys_arch_protect>
 800b444:	60b8      	str	r0, [r7, #8]
 800b446:	68b8      	ldr	r0, [r7, #8]
 800b448:	f00b fde0 	bl	801700c <sys_arch_unprotect>
    return rmem;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	e0b5      	b.n	800b5bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3b08      	subs	r3, #8
 800b454:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b456:	69b8      	ldr	r0, [r7, #24]
 800b458:	f7ff fdea 	bl	800b030 <mem_to_ptr>
 800b45c:	4603      	mov	r3, r0
 800b45e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	881a      	ldrh	r2, [r3, #0]
 800b464:	8afb      	ldrh	r3, [r7, #22]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	b29b      	uxth	r3, r3
 800b46a:	3b08      	subs	r3, #8
 800b46c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b46e:	8bfa      	ldrh	r2, [r7, #30]
 800b470:	8abb      	ldrh	r3, [r7, #20]
 800b472:	429a      	cmp	r2, r3
 800b474:	d906      	bls.n	800b484 <mem_trim+0xb0>
 800b476:	4b55      	ldr	r3, [pc, #340]	; (800b5cc <mem_trim+0x1f8>)
 800b478:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b47c:	4956      	ldr	r1, [pc, #344]	; (800b5d8 <mem_trim+0x204>)
 800b47e:	4855      	ldr	r0, [pc, #340]	; (800b5d4 <mem_trim+0x200>)
 800b480:	f00b ff70 	bl	8017364 <iprintf>
  if (newsize > size) {
 800b484:	8bfa      	ldrh	r2, [r7, #30]
 800b486:	8abb      	ldrh	r3, [r7, #20]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d901      	bls.n	800b490 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	e095      	b.n	800b5bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b490:	8bfa      	ldrh	r2, [r7, #30]
 800b492:	8abb      	ldrh	r3, [r7, #20]
 800b494:	429a      	cmp	r2, r3
 800b496:	d101      	bne.n	800b49c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	e08f      	b.n	800b5bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b49c:	484f      	ldr	r0, [pc, #316]	; (800b5dc <mem_trim+0x208>)
 800b49e:	f00b fd6b 	bl	8016f78 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff fdb0 	bl	800b00c <ptr_to_mem>
 800b4ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	791b      	ldrb	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d13f      	bne.n	800b536 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4be:	d106      	bne.n	800b4ce <mem_trim+0xfa>
 800b4c0:	4b42      	ldr	r3, [pc, #264]	; (800b5cc <mem_trim+0x1f8>)
 800b4c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b4c6:	4946      	ldr	r1, [pc, #280]	; (800b5e0 <mem_trim+0x20c>)
 800b4c8:	4842      	ldr	r0, [pc, #264]	; (800b5d4 <mem_trim+0x200>)
 800b4ca:	f00b ff4b 	bl	8017364 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b4d4:	8afa      	ldrh	r2, [r7, #22]
 800b4d6:	8bfb      	ldrh	r3, [r7, #30]
 800b4d8:	4413      	add	r3, r2
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3308      	adds	r3, #8
 800b4de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b4e0:	4b40      	ldr	r3, [pc, #256]	; (800b5e4 <mem_trim+0x210>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	693a      	ldr	r2, [r7, #16]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d106      	bne.n	800b4f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b4ea:	89fb      	ldrh	r3, [r7, #14]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff fd8d 	bl	800b00c <ptr_to_mem>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	4a3b      	ldr	r2, [pc, #236]	; (800b5e4 <mem_trim+0x210>)
 800b4f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b4f8:	89fb      	ldrh	r3, [r7, #14]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff fd86 	bl	800b00c <ptr_to_mem>
 800b500:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2200      	movs	r2, #0
 800b506:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	89ba      	ldrh	r2, [r7, #12]
 800b50c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	8afa      	ldrh	r2, [r7, #22]
 800b512:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	89fa      	ldrh	r2, [r7, #14]
 800b518:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b522:	d047      	beq.n	800b5b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	4618      	mov	r0, r3
 800b52a:	f7ff fd6f 	bl	800b00c <ptr_to_mem>
 800b52e:	4602      	mov	r2, r0
 800b530:	89fb      	ldrh	r3, [r7, #14]
 800b532:	8053      	strh	r3, [r2, #2]
 800b534:	e03e      	b.n	800b5b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b536:	8bfb      	ldrh	r3, [r7, #30]
 800b538:	f103 0214 	add.w	r2, r3, #20
 800b53c:	8abb      	ldrh	r3, [r7, #20]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d838      	bhi.n	800b5b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b542:	8afa      	ldrh	r2, [r7, #22]
 800b544:	8bfb      	ldrh	r3, [r7, #30]
 800b546:	4413      	add	r3, r2
 800b548:	b29b      	uxth	r3, r3
 800b54a:	3308      	adds	r3, #8
 800b54c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b556:	d106      	bne.n	800b566 <mem_trim+0x192>
 800b558:	4b1c      	ldr	r3, [pc, #112]	; (800b5cc <mem_trim+0x1f8>)
 800b55a:	f240 3216 	movw	r2, #790	; 0x316
 800b55e:	4920      	ldr	r1, [pc, #128]	; (800b5e0 <mem_trim+0x20c>)
 800b560:	481c      	ldr	r0, [pc, #112]	; (800b5d4 <mem_trim+0x200>)
 800b562:	f00b feff 	bl	8017364 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b566:	89fb      	ldrh	r3, [r7, #14]
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff fd4f 	bl	800b00c <ptr_to_mem>
 800b56e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b570:	4b1c      	ldr	r3, [pc, #112]	; (800b5e4 <mem_trim+0x210>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	429a      	cmp	r2, r3
 800b578:	d202      	bcs.n	800b580 <mem_trim+0x1ac>
      lfree = mem2;
 800b57a:	4a1a      	ldr	r2, [pc, #104]	; (800b5e4 <mem_trim+0x210>)
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	2200      	movs	r2, #0
 800b584:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	881a      	ldrh	r2, [r3, #0]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	8afa      	ldrh	r2, [r7, #22]
 800b592:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	89fa      	ldrh	r2, [r7, #14]
 800b598:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b5a2:	d007      	beq.n	800b5b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff fd2f 	bl	800b00c <ptr_to_mem>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	89fb      	ldrh	r3, [r7, #14]
 800b5b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b5b4:	4809      	ldr	r0, [pc, #36]	; (800b5dc <mem_trim+0x208>)
 800b5b6:	f00b fcee 	bl	8016f96 <sys_mutex_unlock>
  return rmem;
 800b5ba:	687b      	ldr	r3, [r7, #4]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	20004a88 	.word	0x20004a88
 800b5c8:	20004a8c 	.word	0x20004a8c
 800b5cc:	080183a8 	.word	0x080183a8
 800b5d0:	08018534 	.word	0x08018534
 800b5d4:	080183f0 	.word	0x080183f0
 800b5d8:	0801854c 	.word	0x0801854c
 800b5dc:	20004a90 	.word	0x20004a90
 800b5e0:	0801856c 	.word	0x0801856c
 800b5e4:	20004a94 	.word	0x20004a94

0800b5e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b5f2:	88fb      	ldrh	r3, [r7, #6]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d101      	bne.n	800b5fc <mem_malloc+0x14>
    return NULL;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	e0e2      	b.n	800b7c2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b5fc:	88fb      	ldrh	r3, [r7, #6]
 800b5fe:	3303      	adds	r3, #3
 800b600:	b29b      	uxth	r3, r3
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b608:	8bbb      	ldrh	r3, [r7, #28]
 800b60a:	2b0b      	cmp	r3, #11
 800b60c:	d801      	bhi.n	800b612 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b60e:	230c      	movs	r3, #12
 800b610:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b612:	8bbb      	ldrh	r3, [r7, #28]
 800b614:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b618:	d803      	bhi.n	800b622 <mem_malloc+0x3a>
 800b61a:	8bba      	ldrh	r2, [r7, #28]
 800b61c:	88fb      	ldrh	r3, [r7, #6]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d201      	bcs.n	800b626 <mem_malloc+0x3e>
    return NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	e0cd      	b.n	800b7c2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b626:	4869      	ldr	r0, [pc, #420]	; (800b7cc <mem_malloc+0x1e4>)
 800b628:	f00b fca6 	bl	8016f78 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b62c:	4b68      	ldr	r3, [pc, #416]	; (800b7d0 <mem_malloc+0x1e8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff fcfd 	bl	800b030 <mem_to_ptr>
 800b636:	4603      	mov	r3, r0
 800b638:	83fb      	strh	r3, [r7, #30]
 800b63a:	e0b7      	b.n	800b7ac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b63c:	8bfb      	ldrh	r3, [r7, #30]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fce4 	bl	800b00c <ptr_to_mem>
 800b644:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	791b      	ldrb	r3, [r3, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 80a7 	bne.w	800b79e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	461a      	mov	r2, r3
 800b656:	8bfb      	ldrh	r3, [r7, #30]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	f1a3 0208 	sub.w	r2, r3, #8
 800b65e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b660:	429a      	cmp	r2, r3
 800b662:	f0c0 809c 	bcc.w	800b79e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	8bfb      	ldrh	r3, [r7, #30]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	f1a3 0208 	sub.w	r2, r3, #8
 800b674:	8bbb      	ldrh	r3, [r7, #28]
 800b676:	3314      	adds	r3, #20
 800b678:	429a      	cmp	r2, r3
 800b67a:	d333      	bcc.n	800b6e4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b67c:	8bfa      	ldrh	r2, [r7, #30]
 800b67e:	8bbb      	ldrh	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	b29b      	uxth	r3, r3
 800b684:	3308      	adds	r3, #8
 800b686:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b688:	8a7b      	ldrh	r3, [r7, #18]
 800b68a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b68e:	d106      	bne.n	800b69e <mem_malloc+0xb6>
 800b690:	4b50      	ldr	r3, [pc, #320]	; (800b7d4 <mem_malloc+0x1ec>)
 800b692:	f240 3287 	movw	r2, #903	; 0x387
 800b696:	4950      	ldr	r1, [pc, #320]	; (800b7d8 <mem_malloc+0x1f0>)
 800b698:	4850      	ldr	r0, [pc, #320]	; (800b7dc <mem_malloc+0x1f4>)
 800b69a:	f00b fe63 	bl	8017364 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b69e:	8a7b      	ldrh	r3, [r7, #18]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff fcb3 	bl	800b00c <ptr_to_mem>
 800b6a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	881a      	ldrh	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8bfa      	ldrh	r2, [r7, #30]
 800b6ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	8a7a      	ldrh	r2, [r7, #18]
 800b6c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6d0:	d00b      	beq.n	800b6ea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fc98 	bl	800b00c <ptr_to_mem>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	8a7b      	ldrh	r3, [r7, #18]
 800b6e0:	8053      	strh	r3, [r2, #2]
 800b6e2:	e002      	b.n	800b6ea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b6ea:	4b39      	ldr	r3, [pc, #228]	; (800b7d0 <mem_malloc+0x1e8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d127      	bne.n	800b744 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b6f4:	4b36      	ldr	r3, [pc, #216]	; (800b7d0 <mem_malloc+0x1e8>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b6fa:	e005      	b.n	800b708 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	f7ff fc83 	bl	800b00c <ptr_to_mem>
 800b706:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	791b      	ldrb	r3, [r3, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d004      	beq.n	800b71a <mem_malloc+0x132>
 800b710:	4b33      	ldr	r3, [pc, #204]	; (800b7e0 <mem_malloc+0x1f8>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	69ba      	ldr	r2, [r7, #24]
 800b716:	429a      	cmp	r2, r3
 800b718:	d1f0      	bne.n	800b6fc <mem_malloc+0x114>
          }
          lfree = cur;
 800b71a:	4a2d      	ldr	r2, [pc, #180]	; (800b7d0 <mem_malloc+0x1e8>)
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b720:	4b2b      	ldr	r3, [pc, #172]	; (800b7d0 <mem_malloc+0x1e8>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	4b2e      	ldr	r3, [pc, #184]	; (800b7e0 <mem_malloc+0x1f8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d00b      	beq.n	800b744 <mem_malloc+0x15c>
 800b72c:	4b28      	ldr	r3, [pc, #160]	; (800b7d0 <mem_malloc+0x1e8>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	791b      	ldrb	r3, [r3, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d006      	beq.n	800b744 <mem_malloc+0x15c>
 800b736:	4b27      	ldr	r3, [pc, #156]	; (800b7d4 <mem_malloc+0x1ec>)
 800b738:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b73c:	4929      	ldr	r1, [pc, #164]	; (800b7e4 <mem_malloc+0x1fc>)
 800b73e:	4827      	ldr	r0, [pc, #156]	; (800b7dc <mem_malloc+0x1f4>)
 800b740:	f00b fe10 	bl	8017364 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b744:	4821      	ldr	r0, [pc, #132]	; (800b7cc <mem_malloc+0x1e4>)
 800b746:	f00b fc26 	bl	8016f96 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b74a:	8bba      	ldrh	r2, [r7, #28]
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	4413      	add	r3, r2
 800b750:	3308      	adds	r3, #8
 800b752:	4a23      	ldr	r2, [pc, #140]	; (800b7e0 <mem_malloc+0x1f8>)
 800b754:	6812      	ldr	r2, [r2, #0]
 800b756:	4293      	cmp	r3, r2
 800b758:	d906      	bls.n	800b768 <mem_malloc+0x180>
 800b75a:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <mem_malloc+0x1ec>)
 800b75c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b760:	4921      	ldr	r1, [pc, #132]	; (800b7e8 <mem_malloc+0x200>)
 800b762:	481e      	ldr	r0, [pc, #120]	; (800b7dc <mem_malloc+0x1f4>)
 800b764:	f00b fdfe 	bl	8017364 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d006      	beq.n	800b780 <mem_malloc+0x198>
 800b772:	4b18      	ldr	r3, [pc, #96]	; (800b7d4 <mem_malloc+0x1ec>)
 800b774:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b778:	491c      	ldr	r1, [pc, #112]	; (800b7ec <mem_malloc+0x204>)
 800b77a:	4818      	ldr	r0, [pc, #96]	; (800b7dc <mem_malloc+0x1f4>)
 800b77c:	f00b fdf2 	bl	8017364 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d006      	beq.n	800b798 <mem_malloc+0x1b0>
 800b78a:	4b12      	ldr	r3, [pc, #72]	; (800b7d4 <mem_malloc+0x1ec>)
 800b78c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b790:	4917      	ldr	r1, [pc, #92]	; (800b7f0 <mem_malloc+0x208>)
 800b792:	4812      	ldr	r0, [pc, #72]	; (800b7dc <mem_malloc+0x1f4>)
 800b794:	f00b fde6 	bl	8017364 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	3308      	adds	r3, #8
 800b79c:	e011      	b.n	800b7c2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b79e:	8bfb      	ldrh	r3, [r7, #30]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff fc33 	bl	800b00c <ptr_to_mem>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b7ac:	8bfa      	ldrh	r2, [r7, #30]
 800b7ae:	8bbb      	ldrh	r3, [r7, #28]
 800b7b0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	f4ff af41 	bcc.w	800b63c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b7ba:	4804      	ldr	r0, [pc, #16]	; (800b7cc <mem_malloc+0x1e4>)
 800b7bc:	f00b fbeb 	bl	8016f96 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3720      	adds	r7, #32
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20004a90 	.word	0x20004a90
 800b7d0:	20004a94 	.word	0x20004a94
 800b7d4:	080183a8 	.word	0x080183a8
 800b7d8:	0801856c 	.word	0x0801856c
 800b7dc:	080183f0 	.word	0x080183f0
 800b7e0:	20004a8c 	.word	0x20004a8c
 800b7e4:	08018580 	.word	0x08018580
 800b7e8:	0801859c 	.word	0x0801859c
 800b7ec:	080185cc 	.word	0x080185cc
 800b7f0:	080185fc 	.word	0x080185fc

0800b7f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	3303      	adds	r3, #3
 800b80a:	f023 0303 	bic.w	r3, r3, #3
 800b80e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	e011      	b.n	800b83a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	4413      	add	r3, r2
 800b832:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3301      	adds	r3, #1
 800b838:	60fb      	str	r3, [r7, #12]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	885b      	ldrh	r3, [r3, #2]
 800b83e:	461a      	mov	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4293      	cmp	r3, r2
 800b844:	dbe7      	blt.n	800b816 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b846:	bf00      	nop
 800b848:	bf00      	nop
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b85a:	2300      	movs	r3, #0
 800b85c:	80fb      	strh	r3, [r7, #6]
 800b85e:	e009      	b.n	800b874 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b860:	88fb      	ldrh	r3, [r7, #6]
 800b862:	4a08      	ldr	r2, [pc, #32]	; (800b884 <memp_init+0x30>)
 800b864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff ffc3 	bl	800b7f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b86e:	88fb      	ldrh	r3, [r7, #6]
 800b870:	3301      	adds	r3, #1
 800b872:	80fb      	strh	r3, [r7, #6]
 800b874:	88fb      	ldrh	r3, [r7, #6]
 800b876:	2b0c      	cmp	r3, #12
 800b878:	d9f2      	bls.n	800b860 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b87a:	bf00      	nop
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	0801b2f0 	.word	0x0801b2f0

0800b888 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b890:	f00b fbae 	bl	8016ff0 <sys_arch_protect>
 800b894:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d015      	beq.n	800b8d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	6812      	ldr	r2, [r2, #0]
 800b8ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f003 0303 	and.w	r3, r3, #3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <do_memp_malloc_pool+0x3e>
 800b8b8:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <do_memp_malloc_pool+0x58>)
 800b8ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b8be:	4909      	ldr	r1, [pc, #36]	; (800b8e4 <do_memp_malloc_pool+0x5c>)
 800b8c0:	4809      	ldr	r0, [pc, #36]	; (800b8e8 <do_memp_malloc_pool+0x60>)
 800b8c2:	f00b fd4f 	bl	8017364 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f00b fba0 	bl	801700c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	e003      	b.n	800b8d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f00b fb9b 	bl	801700c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	08018620 	.word	0x08018620
 800b8e4:	08018650 	.word	0x08018650
 800b8e8:	08018674 	.word	0x08018674

0800b8ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b8f6:	79fb      	ldrb	r3, [r7, #7]
 800b8f8:	2b0c      	cmp	r3, #12
 800b8fa:	d908      	bls.n	800b90e <memp_malloc+0x22>
 800b8fc:	4b0a      	ldr	r3, [pc, #40]	; (800b928 <memp_malloc+0x3c>)
 800b8fe:	f240 1257 	movw	r2, #343	; 0x157
 800b902:	490a      	ldr	r1, [pc, #40]	; (800b92c <memp_malloc+0x40>)
 800b904:	480a      	ldr	r0, [pc, #40]	; (800b930 <memp_malloc+0x44>)
 800b906:	f00b fd2d 	bl	8017364 <iprintf>
 800b90a:	2300      	movs	r3, #0
 800b90c:	e008      	b.n	800b920 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	4a08      	ldr	r2, [pc, #32]	; (800b934 <memp_malloc+0x48>)
 800b912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b916:	4618      	mov	r0, r3
 800b918:	f7ff ffb6 	bl	800b888 <do_memp_malloc_pool>
 800b91c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b91e:	68fb      	ldr	r3, [r7, #12]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	08018620 	.word	0x08018620
 800b92c:	080186b0 	.word	0x080186b0
 800b930:	08018674 	.word	0x08018674
 800b934:	0801b2f0 	.word	0x0801b2f0

0800b938 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	f003 0303 	and.w	r3, r3, #3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <do_memp_free_pool+0x22>
 800b94c:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <do_memp_free_pool+0x4c>)
 800b94e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b952:	490d      	ldr	r1, [pc, #52]	; (800b988 <do_memp_free_pool+0x50>)
 800b954:	480d      	ldr	r0, [pc, #52]	; (800b98c <do_memp_free_pool+0x54>)
 800b956:	f00b fd05 	bl	8017364 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b95e:	f00b fb47 	bl	8016ff0 <sys_arch_protect>
 800b962:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b976:	68b8      	ldr	r0, [r7, #8]
 800b978:	f00b fb48 	bl	801700c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b97c:	bf00      	nop
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	08018620 	.word	0x08018620
 800b988:	080186d0 	.word	0x080186d0
 800b98c:	08018674 	.word	0x08018674

0800b990 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	6039      	str	r1, [r7, #0]
 800b99a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b0c      	cmp	r3, #12
 800b9a0:	d907      	bls.n	800b9b2 <memp_free+0x22>
 800b9a2:	4b0c      	ldr	r3, [pc, #48]	; (800b9d4 <memp_free+0x44>)
 800b9a4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b9a8:	490b      	ldr	r1, [pc, #44]	; (800b9d8 <memp_free+0x48>)
 800b9aa:	480c      	ldr	r0, [pc, #48]	; (800b9dc <memp_free+0x4c>)
 800b9ac:	f00b fcda 	bl	8017364 <iprintf>
 800b9b0:	e00c      	b.n	800b9cc <memp_free+0x3c>

  if (mem == NULL) {
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d008      	beq.n	800b9ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	4a09      	ldr	r2, [pc, #36]	; (800b9e0 <memp_free+0x50>)
 800b9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff ffb8 	bl	800b938 <do_memp_free_pool>
 800b9c8:	e000      	b.n	800b9cc <memp_free+0x3c>
    return;
 800b9ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08018620 	.word	0x08018620
 800b9d8:	080186f0 	.word	0x080186f0
 800b9dc:	08018674 	.word	0x08018674
 800b9e0:	0801b2f0 	.word	0x0801b2f0

0800b9e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b9e8:	bf00      	nop
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
	...

0800b9f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d108      	bne.n	800ba1a <netif_add+0x26>
 800ba08:	4b5b      	ldr	r3, [pc, #364]	; (800bb78 <netif_add+0x184>)
 800ba0a:	f240 1227 	movw	r2, #295	; 0x127
 800ba0e:	495b      	ldr	r1, [pc, #364]	; (800bb7c <netif_add+0x188>)
 800ba10:	485b      	ldr	r0, [pc, #364]	; (800bb80 <netif_add+0x18c>)
 800ba12:	f00b fca7 	bl	8017364 <iprintf>
 800ba16:	2300      	movs	r3, #0
 800ba18:	e0a9      	b.n	800bb6e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d108      	bne.n	800ba32 <netif_add+0x3e>
 800ba20:	4b55      	ldr	r3, [pc, #340]	; (800bb78 <netif_add+0x184>)
 800ba22:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ba26:	4957      	ldr	r1, [pc, #348]	; (800bb84 <netif_add+0x190>)
 800ba28:	4855      	ldr	r0, [pc, #340]	; (800bb80 <netif_add+0x18c>)
 800ba2a:	f00b fc9b 	bl	8017364 <iprintf>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e09d      	b.n	800bb6e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ba38:	4b53      	ldr	r3, [pc, #332]	; (800bb88 <netif_add+0x194>)
 800ba3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ba42:	4b51      	ldr	r3, [pc, #324]	; (800bb88 <netif_add+0x194>)
 800ba44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ba4c:	4b4e      	ldr	r3, [pc, #312]	; (800bb88 <netif_add+0x194>)
 800ba4e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	4a49      	ldr	r2, [pc, #292]	; (800bb8c <netif_add+0x198>)
 800ba66:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3324      	adds	r3, #36	; 0x24
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f00b fc0d 	bl	801729e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a3a      	ldr	r2, [r7, #32]
 800ba8e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ba90:	4b3f      	ldr	r3, [pc, #252]	; (800bb90 <netif_add+0x19c>)
 800ba92:	781a      	ldrb	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba9e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f914 	bl	800bcd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	4798      	blx	r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <netif_add+0xc8>
    return NULL;
 800bab8:	2300      	movs	r3, #0
 800baba:	e058      	b.n	800bb6e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bac2:	2bff      	cmp	r3, #255	; 0xff
 800bac4:	d103      	bne.n	800bace <netif_add+0xda>
        netif->num = 0;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bad2:	4b30      	ldr	r3, [pc, #192]	; (800bb94 <netif_add+0x1a0>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	e02b      	b.n	800bb32 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d106      	bne.n	800baf0 <netif_add+0xfc>
 800bae2:	4b25      	ldr	r3, [pc, #148]	; (800bb78 <netif_add+0x184>)
 800bae4:	f240 128b 	movw	r2, #395	; 0x18b
 800bae8:	492b      	ldr	r1, [pc, #172]	; (800bb98 <netif_add+0x1a4>)
 800baea:	4825      	ldr	r0, [pc, #148]	; (800bb80 <netif_add+0x18c>)
 800baec:	f00b fc3a 	bl	8017364 <iprintf>
        num_netifs++;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	3301      	adds	r3, #1
 800baf4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2bff      	cmp	r3, #255	; 0xff
 800bafa:	dd06      	ble.n	800bb0a <netif_add+0x116>
 800bafc:	4b1e      	ldr	r3, [pc, #120]	; (800bb78 <netif_add+0x184>)
 800bafe:	f240 128d 	movw	r2, #397	; 0x18d
 800bb02:	4926      	ldr	r1, [pc, #152]	; (800bb9c <netif_add+0x1a8>)
 800bb04:	481e      	ldr	r0, [pc, #120]	; (800bb80 <netif_add+0x18c>)
 800bb06:	f00b fc2d 	bl	8017364 <iprintf>
        if (netif2->num == netif->num) {
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d108      	bne.n	800bb2c <netif_add+0x138>
          netif->num++;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb20:	3301      	adds	r3, #1
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800bb2a:	e005      	b.n	800bb38 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	617b      	str	r3, [r7, #20]
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1d0      	bne.n	800bada <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1be      	bne.n	800babc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb44:	2bfe      	cmp	r3, #254	; 0xfe
 800bb46:	d103      	bne.n	800bb50 <netif_add+0x15c>
    netif_num = 0;
 800bb48:	4b11      	ldr	r3, [pc, #68]	; (800bb90 <netif_add+0x19c>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	e006      	b.n	800bb5e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb56:	3301      	adds	r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	4b0d      	ldr	r3, [pc, #52]	; (800bb90 <netif_add+0x19c>)
 800bb5c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bb5e:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <netif_add+0x1a0>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bb66:	4a0b      	ldr	r2, [pc, #44]	; (800bb94 <netif_add+0x1a0>)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0801870c 	.word	0x0801870c
 800bb7c:	080187a0 	.word	0x080187a0
 800bb80:	0801875c 	.word	0x0801875c
 800bb84:	080187bc 	.word	0x080187bc
 800bb88:	0801b374 	.word	0x0801b374
 800bb8c:	0800bfb7 	.word	0x0800bfb7
 800bb90:	20004acc 	.word	0x20004acc
 800bb94:	2000bb88 	.word	0x2000bb88
 800bb98:	080187e0 	.word	0x080187e0
 800bb9c:	080187f4 	.word	0x080187f4

0800bba0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f002 fb91 	bl	800e2d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f006 ffa3 	bl	8012b00 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bbba:	bf00      	nop
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <netif_do_set_ipaddr+0x20>
 800bbd6:	4b1d      	ldr	r3, [pc, #116]	; (800bc4c <netif_do_set_ipaddr+0x88>)
 800bbd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bbdc:	491c      	ldr	r1, [pc, #112]	; (800bc50 <netif_do_set_ipaddr+0x8c>)
 800bbde:	481d      	ldr	r0, [pc, #116]	; (800bc54 <netif_do_set_ipaddr+0x90>)
 800bbe0:	f00b fbc0 	bl	8017364 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <netif_do_set_ipaddr+0x34>
 800bbea:	4b18      	ldr	r3, [pc, #96]	; (800bc4c <netif_do_set_ipaddr+0x88>)
 800bbec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bbf0:	4917      	ldr	r1, [pc, #92]	; (800bc50 <netif_do_set_ipaddr+0x8c>)
 800bbf2:	4818      	ldr	r0, [pc, #96]	; (800bc54 <netif_do_set_ipaddr+0x90>)
 800bbf4:	f00b fbb6 	bl	8017364 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	3304      	adds	r3, #4
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d01c      	beq.n	800bc40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bc16:	f107 0314 	add.w	r3, r7, #20
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff ffbf 	bl	800bba0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <netif_do_set_ipaddr+0x6a>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	e000      	b.n	800bc30 <netif_do_set_ipaddr+0x6c>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bc34:	2101      	movs	r1, #1
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f8d2 	bl	800bde0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e000      	b.n	800bc42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	0801870c 	.word	0x0801870c
 800bc50:	08018824 	.word	0x08018824
 800bc54:	0801875c 	.word	0x0801875c

0800bc58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d00a      	beq.n	800bc88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <netif_do_set_netmask+0x26>
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	e000      	b.n	800bc80 <netif_do_set_netmask+0x28>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bc84:	2301      	movs	r3, #1
 800bc86:	e000      	b.n	800bc8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	330c      	adds	r3, #12
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d00a      	beq.n	800bcc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <netif_do_set_gw+0x26>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	e000      	b.n	800bcbe <netif_do_set_gw+0x28>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bcf0:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <netif_set_addr+0x90>)
 800bcf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bcfa:	4b1a      	ldr	r3, [pc, #104]	; (800bd64 <netif_set_addr+0x90>)
 800bcfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bd04:	4b17      	ldr	r3, [pc, #92]	; (800bd64 <netif_set_addr+0x90>)
 800bd06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <netif_set_addr+0x42>
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <netif_set_addr+0x46>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <netif_set_addr+0x48>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d006      	beq.n	800bd32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bd24:	f107 0310 	add.w	r3, r7, #16
 800bd28:	461a      	mov	r2, r3
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff ff49 	bl	800bbc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bd32:	69fa      	ldr	r2, [r7, #28]
 800bd34:	6879      	ldr	r1, [r7, #4]
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff ff8e 	bl	800bc58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f7ff ffa8 	bl	800bc96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d106      	bne.n	800bd5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bd4c:	f107 0310 	add.w	r3, r7, #16
 800bd50:	461a      	mov	r2, r3
 800bd52:	68b9      	ldr	r1, [r7, #8]
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f7ff ff35 	bl	800bbc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bd5a:	bf00      	nop
 800bd5c:	3720      	adds	r7, #32
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	0801b374 	.word	0x0801b374

0800bd68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bd70:	4a04      	ldr	r2, [pc, #16]	; (800bd84 <netif_set_default+0x1c>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	2000bb8c 	.word	0x2000bb8c

0800bd88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d107      	bne.n	800bda6 <netif_set_up+0x1e>
 800bd96:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <netif_set_up+0x4c>)
 800bd98:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bd9c:	490e      	ldr	r1, [pc, #56]	; (800bdd8 <netif_set_up+0x50>)
 800bd9e:	480f      	ldr	r0, [pc, #60]	; (800bddc <netif_set_up+0x54>)
 800bda0:	f00b fae0 	bl	8017364 <iprintf>
 800bda4:	e013      	b.n	800bdce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10c      	bne.n	800bdce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bdba:	f043 0301 	orr.w	r3, r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bdc6:	2103      	movs	r1, #3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f809 	bl	800bde0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	0801870c 	.word	0x0801870c
 800bdd8:	08018894 	.word	0x08018894
 800bddc:	0801875c 	.word	0x0801875c

0800bde0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d106      	bne.n	800be00 <netif_issue_reports+0x20>
 800bdf2:	4b18      	ldr	r3, [pc, #96]	; (800be54 <netif_issue_reports+0x74>)
 800bdf4:	f240 326d 	movw	r2, #877	; 0x36d
 800bdf8:	4917      	ldr	r1, [pc, #92]	; (800be58 <netif_issue_reports+0x78>)
 800bdfa:	4818      	ldr	r0, [pc, #96]	; (800be5c <netif_issue_reports+0x7c>)
 800bdfc:	f00b fab2 	bl	8017364 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be06:	f003 0304 	and.w	r3, r3, #4
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d01e      	beq.n	800be4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d017      	beq.n	800be4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	f003 0301 	and.w	r3, r3, #1
 800be22:	2b00      	cmp	r3, #0
 800be24:	d013      	beq.n	800be4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	3304      	adds	r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00e      	beq.n	800be4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be36:	f003 0308 	and.w	r3, r3, #8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d007      	beq.n	800be4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3304      	adds	r3, #4
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f009 fc5b 	bl	8015700 <etharp_request>
 800be4a:	e000      	b.n	800be4e <netif_issue_reports+0x6e>
    return;
 800be4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0801870c 	.word	0x0801870c
 800be58:	080188b0 	.word	0x080188b0
 800be5c:	0801875c 	.word	0x0801875c

0800be60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d107      	bne.n	800be7e <netif_set_down+0x1e>
 800be6e:	4b12      	ldr	r3, [pc, #72]	; (800beb8 <netif_set_down+0x58>)
 800be70:	f240 329b 	movw	r2, #923	; 0x39b
 800be74:	4911      	ldr	r1, [pc, #68]	; (800bebc <netif_set_down+0x5c>)
 800be76:	4812      	ldr	r0, [pc, #72]	; (800bec0 <netif_set_down+0x60>)
 800be78:	f00b fa74 	bl	8017364 <iprintf>
 800be7c:	e019      	b.n	800beb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d012      	beq.n	800beb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be92:	f023 0301 	bic.w	r3, r3, #1
 800be96:	b2da      	uxtb	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bea4:	f003 0308 	and.w	r3, r3, #8
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f008 ffe1 	bl	8014e74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	0801870c 	.word	0x0801870c
 800bebc:	080188d4 	.word	0x080188d4
 800bec0:	0801875c 	.word	0x0801875c

0800bec4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d107      	bne.n	800bee2 <netif_set_link_up+0x1e>
 800bed2:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <netif_set_link_up+0x64>)
 800bed4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bed8:	4914      	ldr	r1, [pc, #80]	; (800bf2c <netif_set_link_up+0x68>)
 800beda:	4815      	ldr	r0, [pc, #84]	; (800bf30 <netif_set_link_up+0x6c>)
 800bedc:	f00b fa42 	bl	8017364 <iprintf>
 800bee0:	e01e      	b.n	800bf20 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d117      	bne.n	800bf20 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bef6:	f043 0304 	orr.w	r3, r3, #4
 800befa:	b2da      	uxtb	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f007 fa26 	bl	8013354 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bf08:	2103      	movs	r1, #3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff ff68 	bl	800bde0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	69db      	ldr	r3, [r3, #28]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d003      	beq.n	800bf20 <netif_set_link_up+0x5c>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	0801870c 	.word	0x0801870c
 800bf2c:	080188f4 	.word	0x080188f4
 800bf30:	0801875c 	.word	0x0801875c

0800bf34 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d107      	bne.n	800bf52 <netif_set_link_down+0x1e>
 800bf42:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <netif_set_link_down+0x54>)
 800bf44:	f240 4206 	movw	r2, #1030	; 0x406
 800bf48:	4910      	ldr	r1, [pc, #64]	; (800bf8c <netif_set_link_down+0x58>)
 800bf4a:	4811      	ldr	r0, [pc, #68]	; (800bf90 <netif_set_link_down+0x5c>)
 800bf4c:	f00b fa0a 	bl	8017364 <iprintf>
 800bf50:	e017      	b.n	800bf82 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d010      	beq.n	800bf82 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf66:	f023 0304 	bic.w	r3, r3, #4
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <netif_set_link_down+0x4e>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	0801870c 	.word	0x0801870c
 800bf8c:	08018918 	.word	0x08018918
 800bf90:	0801875c 	.word	0x0801875c

0800bf94 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	61da      	str	r2, [r3, #28]
  }
}
 800bfaa:	bf00      	nop
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	60f8      	str	r0, [r7, #12]
 800bfbe:	60b9      	str	r1, [r7, #8]
 800bfc0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bfc2:	f06f 030b 	mvn.w	r3, #11
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d013      	beq.n	800c00c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bfe4:	4b0d      	ldr	r3, [pc, #52]	; (800c01c <netif_get_by_index+0x48>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	e00c      	b.n	800c006 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bff2:	3301      	adds	r3, #1
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	79fa      	ldrb	r2, [r7, #7]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d101      	bne.n	800c000 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	e006      	b.n	800c00e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	60fb      	str	r3, [r7, #12]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1ef      	bne.n	800bfec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	2000bb88 	.word	0x2000bb88

0800c020 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c026:	f00a ffe3 	bl	8016ff0 <sys_arch_protect>
 800c02a:	6038      	str	r0, [r7, #0]
 800c02c:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <pbuf_free_ooseq+0x44>)
 800c02e:	2200      	movs	r2, #0
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	6838      	ldr	r0, [r7, #0]
 800c034:	f00a ffea 	bl	801700c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c038:	4b0b      	ldr	r3, [pc, #44]	; (800c068 <pbuf_free_ooseq+0x48>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	607b      	str	r3, [r7, #4]
 800c03e:	e00a      	b.n	800c056 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f002 f981 	bl	800e350 <tcp_free_ooseq>
      return;
 800c04e:	e005      	b.n	800c05c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	607b      	str	r3, [r7, #4]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f1      	bne.n	800c040 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	2000bb90 	.word	0x2000bb90
 800c068:	2000bb98 	.word	0x2000bb98

0800c06c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c074:	f7ff ffd4 	bl	800c020 <pbuf_free_ooseq>
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c086:	f00a ffb3 	bl	8016ff0 <sys_arch_protect>
 800c08a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c08c:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <pbuf_pool_is_empty+0x4c>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c092:	4b0e      	ldr	r3, [pc, #56]	; (800c0cc <pbuf_pool_is_empty+0x4c>)
 800c094:	2201      	movs	r2, #1
 800c096:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f00a ffb7 	bl	801700c <sys_arch_unprotect>

  if (!queued) {
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10f      	bne.n	800c0c4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	480a      	ldr	r0, [pc, #40]	; (800c0d0 <pbuf_pool_is_empty+0x50>)
 800c0a8:	f7fe fee0 	bl	800ae6c <tcpip_try_callback>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d008      	beq.n	800c0c4 <pbuf_pool_is_empty+0x44>
 800c0b2:	f00a ff9d 	bl	8016ff0 <sys_arch_protect>
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <pbuf_pool_is_empty+0x4c>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f00a ffa4 	bl	801700c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	2000bb90 	.word	0x2000bb90
 800c0d0:	0800c06d 	.word	0x0800c06d

0800c0d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	4611      	mov	r1, r2
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	80fb      	strh	r3, [r7, #6]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	88fa      	ldrh	r2, [r7, #6]
 800c0fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	88ba      	ldrh	r2, [r7, #4]
 800c100:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c102:	8b3b      	ldrh	r3, [r7, #24]
 800c104:	b2da      	uxtb	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	7f3a      	ldrb	r2, [r7, #28]
 800c10e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2201      	movs	r2, #1
 800c114:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	73da      	strb	r2, [r3, #15]
}
 800c11c:	bf00      	nop
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08c      	sub	sp, #48	; 0x30
 800c12c:	af02      	add	r7, sp, #8
 800c12e:	4603      	mov	r3, r0
 800c130:	71fb      	strb	r3, [r7, #7]
 800c132:	460b      	mov	r3, r1
 800c134:	80bb      	strh	r3, [r7, #4]
 800c136:	4613      	mov	r3, r2
 800c138:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c13e:	887b      	ldrh	r3, [r7, #2]
 800c140:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c144:	d07f      	beq.n	800c246 <pbuf_alloc+0x11e>
 800c146:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c14a:	f300 80c8 	bgt.w	800c2de <pbuf_alloc+0x1b6>
 800c14e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c152:	d010      	beq.n	800c176 <pbuf_alloc+0x4e>
 800c154:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c158:	f300 80c1 	bgt.w	800c2de <pbuf_alloc+0x1b6>
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d002      	beq.n	800c166 <pbuf_alloc+0x3e>
 800c160:	2b41      	cmp	r3, #65	; 0x41
 800c162:	f040 80bc 	bne.w	800c2de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c166:	887a      	ldrh	r2, [r7, #2]
 800c168:	88bb      	ldrh	r3, [r7, #4]
 800c16a:	4619      	mov	r1, r3
 800c16c:	2000      	movs	r0, #0
 800c16e:	f000 f8d1 	bl	800c314 <pbuf_alloc_reference>
 800c172:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c174:	e0bd      	b.n	800c2f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c17e:	88bb      	ldrh	r3, [r7, #4]
 800c180:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c182:	200c      	movs	r0, #12
 800c184:	f7ff fbb2 	bl	800b8ec <memp_malloc>
 800c188:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c190:	f7ff ff76 	bl	800c080 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c19c:	f000 faa8 	bl	800c6f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e0a7      	b.n	800c2f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c1a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1a6:	3303      	adds	r3, #3
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	8b7a      	ldrh	r2, [r7, #26]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	bf28      	it	cs
 800c1bc:	4613      	movcs	r3, r2
 800c1be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c1c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1c2:	3310      	adds	r3, #16
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3303      	adds	r3, #3
 800c1ca:	f023 0303 	bic.w	r3, r3, #3
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	89f9      	ldrh	r1, [r7, #14]
 800c1d2:	8b7a      	ldrh	r2, [r7, #26]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	887b      	ldrh	r3, [r7, #2]
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4601      	mov	r1, r0
 800c1e0:	6938      	ldr	r0, [r7, #16]
 800c1e2:	f7ff ff77 	bl	800c0d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d006      	beq.n	800c200 <pbuf_alloc+0xd8>
 800c1f2:	4b42      	ldr	r3, [pc, #264]	; (800c2fc <pbuf_alloc+0x1d4>)
 800c1f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1f8:	4941      	ldr	r1, [pc, #260]	; (800c300 <pbuf_alloc+0x1d8>)
 800c1fa:	4842      	ldr	r0, [pc, #264]	; (800c304 <pbuf_alloc+0x1dc>)
 800c1fc:	f00b f8b2 	bl	8017364 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c202:	3303      	adds	r3, #3
 800c204:	f023 0303 	bic.w	r3, r3, #3
 800c208:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c20c:	d106      	bne.n	800c21c <pbuf_alloc+0xf4>
 800c20e:	4b3b      	ldr	r3, [pc, #236]	; (800c2fc <pbuf_alloc+0x1d4>)
 800c210:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c214:	493c      	ldr	r1, [pc, #240]	; (800c308 <pbuf_alloc+0x1e0>)
 800c216:	483b      	ldr	r0, [pc, #236]	; (800c304 <pbuf_alloc+0x1dc>)
 800c218:	f00b f8a4 	bl	8017364 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d102      	bne.n	800c228 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
 800c226:	e002      	b.n	800c22e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c232:	8b7a      	ldrh	r2, [r7, #26]
 800c234:	89fb      	ldrh	r3, [r7, #14]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c23e:	8b7b      	ldrh	r3, [r7, #26]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d19e      	bne.n	800c182 <pbuf_alloc+0x5a>
      break;
 800c244:	e055      	b.n	800c2f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c246:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c248:	3303      	adds	r3, #3
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	f023 0303 	bic.w	r3, r3, #3
 800c250:	b29a      	uxth	r2, r3
 800c252:	88bb      	ldrh	r3, [r7, #4]
 800c254:	3303      	adds	r3, #3
 800c256:	b29b      	uxth	r3, r3
 800c258:	f023 0303 	bic.w	r3, r3, #3
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	4413      	add	r3, r2
 800c260:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c262:	8b3b      	ldrh	r3, [r7, #24]
 800c264:	3310      	adds	r3, #16
 800c266:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c268:	8b3a      	ldrh	r2, [r7, #24]
 800c26a:	88bb      	ldrh	r3, [r7, #4]
 800c26c:	3303      	adds	r3, #3
 800c26e:	f023 0303 	bic.w	r3, r3, #3
 800c272:	429a      	cmp	r2, r3
 800c274:	d306      	bcc.n	800c284 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c276:	8afa      	ldrh	r2, [r7, #22]
 800c278:	88bb      	ldrh	r3, [r7, #4]
 800c27a:	3303      	adds	r3, #3
 800c27c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c280:	429a      	cmp	r2, r3
 800c282:	d201      	bcs.n	800c288 <pbuf_alloc+0x160>
        return NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	e035      	b.n	800c2f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c288:	8afb      	ldrh	r3, [r7, #22]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff f9ac 	bl	800b5e8 <mem_malloc>
 800c290:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <pbuf_alloc+0x174>
        return NULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	e02b      	b.n	800c2f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c29e:	3310      	adds	r3, #16
 800c2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a2:	4413      	add	r3, r2
 800c2a4:	3303      	adds	r3, #3
 800c2a6:	f023 0303 	bic.w	r3, r3, #3
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	88b9      	ldrh	r1, [r7, #4]
 800c2ae:	88ba      	ldrh	r2, [r7, #4]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	887b      	ldrh	r3, [r7, #2]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2be:	f7ff ff09 	bl	800c0d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	f003 0303 	and.w	r3, r3, #3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d010      	beq.n	800c2f0 <pbuf_alloc+0x1c8>
 800c2ce:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <pbuf_alloc+0x1d4>)
 800c2d0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c2d4:	490d      	ldr	r1, [pc, #52]	; (800c30c <pbuf_alloc+0x1e4>)
 800c2d6:	480b      	ldr	r0, [pc, #44]	; (800c304 <pbuf_alloc+0x1dc>)
 800c2d8:	f00b f844 	bl	8017364 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c2dc:	e008      	b.n	800c2f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c2de:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <pbuf_alloc+0x1d4>)
 800c2e0:	f240 1227 	movw	r2, #295	; 0x127
 800c2e4:	490a      	ldr	r1, [pc, #40]	; (800c310 <pbuf_alloc+0x1e8>)
 800c2e6:	4807      	ldr	r0, [pc, #28]	; (800c304 <pbuf_alloc+0x1dc>)
 800c2e8:	f00b f83c 	bl	8017364 <iprintf>
      return NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e001      	b.n	800c2f4 <pbuf_alloc+0x1cc>
      break;
 800c2f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3728      	adds	r7, #40	; 0x28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0801893c 	.word	0x0801893c
 800c300:	0801896c 	.word	0x0801896c
 800c304:	0801899c 	.word	0x0801899c
 800c308:	080189c4 	.word	0x080189c4
 800c30c:	080189f8 	.word	0x080189f8
 800c310:	08018a24 	.word	0x08018a24

0800c314 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af02      	add	r7, sp, #8
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	807b      	strh	r3, [r7, #2]
 800c320:	4613      	mov	r3, r2
 800c322:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c324:	883b      	ldrh	r3, [r7, #0]
 800c326:	2b41      	cmp	r3, #65	; 0x41
 800c328:	d009      	beq.n	800c33e <pbuf_alloc_reference+0x2a>
 800c32a:	883b      	ldrh	r3, [r7, #0]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d006      	beq.n	800c33e <pbuf_alloc_reference+0x2a>
 800c330:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <pbuf_alloc_reference+0x5c>)
 800c332:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c336:	490f      	ldr	r1, [pc, #60]	; (800c374 <pbuf_alloc_reference+0x60>)
 800c338:	480f      	ldr	r0, [pc, #60]	; (800c378 <pbuf_alloc_reference+0x64>)
 800c33a:	f00b f813 	bl	8017364 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c33e:	200b      	movs	r0, #11
 800c340:	f7ff fad4 	bl	800b8ec <memp_malloc>
 800c344:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c34c:	2300      	movs	r3, #0
 800c34e:	e00b      	b.n	800c368 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c350:	8879      	ldrh	r1, [r7, #2]
 800c352:	887a      	ldrh	r2, [r7, #2]
 800c354:	2300      	movs	r3, #0
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	883b      	ldrh	r3, [r7, #0]
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	460b      	mov	r3, r1
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff feb7 	bl	800c0d4 <pbuf_init_alloced_pbuf>
  return p;
 800c366:	68fb      	ldr	r3, [r7, #12]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	0801893c 	.word	0x0801893c
 800c374:	08018a40 	.word	0x08018a40
 800c378:	0801899c 	.word	0x0801899c

0800c37c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b088      	sub	sp, #32
 800c380:	af02      	add	r7, sp, #8
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	4603      	mov	r3, r0
 800c386:	73fb      	strb	r3, [r7, #15]
 800c388:	460b      	mov	r3, r1
 800c38a:	81bb      	strh	r3, [r7, #12]
 800c38c:	4613      	mov	r3, r2
 800c38e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c394:	8a7b      	ldrh	r3, [r7, #18]
 800c396:	3303      	adds	r3, #3
 800c398:	f023 0203 	bic.w	r2, r3, #3
 800c39c:	89bb      	ldrh	r3, [r7, #12]
 800c39e:	441a      	add	r2, r3
 800c3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d901      	bls.n	800c3aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e018      	b.n	800c3dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c3aa:	6a3b      	ldr	r3, [r7, #32]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d007      	beq.n	800c3c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c3b0:	8a7b      	ldrh	r3, [r7, #18]
 800c3b2:	3303      	adds	r3, #3
 800c3b4:	f023 0303 	bic.w	r3, r3, #3
 800c3b8:	6a3a      	ldr	r2, [r7, #32]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	617b      	str	r3, [r7, #20]
 800c3be:	e001      	b.n	800c3c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	89b9      	ldrh	r1, [r7, #12]
 800c3c8:	89ba      	ldrh	r2, [r7, #12]
 800c3ca:	2302      	movs	r3, #2
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	897b      	ldrh	r3, [r7, #10]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	6979      	ldr	r1, [r7, #20]
 800c3d6:	f7ff fe7d 	bl	800c0d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c3da:	687b      	ldr	r3, [r7, #4]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <pbuf_realloc+0x20>
 800c3f6:	4b3a      	ldr	r3, [pc, #232]	; (800c4e0 <pbuf_realloc+0xfc>)
 800c3f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c3fc:	4939      	ldr	r1, [pc, #228]	; (800c4e4 <pbuf_realloc+0x100>)
 800c3fe:	483a      	ldr	r0, [pc, #232]	; (800c4e8 <pbuf_realloc+0x104>)
 800c400:	f00a ffb0 	bl	8017364 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	891b      	ldrh	r3, [r3, #8]
 800c408:	887a      	ldrh	r2, [r7, #2]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d263      	bcs.n	800c4d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	891a      	ldrh	r2, [r3, #8]
 800c412:	887b      	ldrh	r3, [r7, #2]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c418:	887b      	ldrh	r3, [r7, #2]
 800c41a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c420:	e018      	b.n	800c454 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	895b      	ldrh	r3, [r3, #10]
 800c426:	897a      	ldrh	r2, [r7, #10]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	891a      	ldrh	r2, [r3, #8]
 800c430:	893b      	ldrh	r3, [r7, #8]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	b29a      	uxth	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d106      	bne.n	800c454 <pbuf_realloc+0x70>
 800c446:	4b26      	ldr	r3, [pc, #152]	; (800c4e0 <pbuf_realloc+0xfc>)
 800c448:	f240 12af 	movw	r2, #431	; 0x1af
 800c44c:	4927      	ldr	r1, [pc, #156]	; (800c4ec <pbuf_realloc+0x108>)
 800c44e:	4826      	ldr	r0, [pc, #152]	; (800c4e8 <pbuf_realloc+0x104>)
 800c450:	f00a ff88 	bl	8017364 <iprintf>
  while (rem_len > q->len) {
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	895b      	ldrh	r3, [r3, #10]
 800c458:	897a      	ldrh	r2, [r7, #10]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d8e1      	bhi.n	800c422 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	7b1b      	ldrb	r3, [r3, #12]
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	2b00      	cmp	r3, #0
 800c468:	d121      	bne.n	800c4ae <pbuf_realloc+0xca>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	895b      	ldrh	r3, [r3, #10]
 800c46e:	897a      	ldrh	r2, [r7, #10]
 800c470:	429a      	cmp	r2, r3
 800c472:	d01c      	beq.n	800c4ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	7b5b      	ldrb	r3, [r3, #13]
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d116      	bne.n	800c4ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	b29a      	uxth	r2, r3
 800c48a:	897b      	ldrh	r3, [r7, #10]
 800c48c:	4413      	add	r3, r2
 800c48e:	b29b      	uxth	r3, r3
 800c490:	4619      	mov	r1, r3
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7fe ff9e 	bl	800b3d4 <mem_trim>
 800c498:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <pbuf_realloc+0xca>
 800c4a0:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <pbuf_realloc+0xfc>)
 800c4a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c4a6:	4912      	ldr	r1, [pc, #72]	; (800c4f0 <pbuf_realloc+0x10c>)
 800c4a8:	480f      	ldr	r0, [pc, #60]	; (800c4e8 <pbuf_realloc+0x104>)
 800c4aa:	f00a ff5b 	bl	8017364 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	897a      	ldrh	r2, [r7, #10]
 800c4b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	895a      	ldrh	r2, [r3, #10]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d004      	beq.n	800c4ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 f911 	bl	800c6f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	e000      	b.n	800c4d8 <pbuf_realloc+0xf4>
    return;
 800c4d6:	bf00      	nop

}
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	0801893c 	.word	0x0801893c
 800c4e4:	08018a54 	.word	0x08018a54
 800c4e8:	0801899c 	.word	0x0801899c
 800c4ec:	08018a6c 	.word	0x08018a6c
 800c4f0:	08018a84 	.word	0x08018a84

0800c4f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4613      	mov	r3, r2
 800c500:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <pbuf_add_header_impl+0x22>
 800c508:	4b2b      	ldr	r3, [pc, #172]	; (800c5b8 <pbuf_add_header_impl+0xc4>)
 800c50a:	f240 12df 	movw	r2, #479	; 0x1df
 800c50e:	492b      	ldr	r1, [pc, #172]	; (800c5bc <pbuf_add_header_impl+0xc8>)
 800c510:	482b      	ldr	r0, [pc, #172]	; (800c5c0 <pbuf_add_header_impl+0xcc>)
 800c512:	f00a ff27 	bl	8017364 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <pbuf_add_header_impl+0x30>
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c522:	d301      	bcc.n	800c528 <pbuf_add_header_impl+0x34>
    return 1;
 800c524:	2301      	movs	r3, #1
 800c526:	e043      	b.n	800c5b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <pbuf_add_header_impl+0x3e>
    return 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	e03e      	b.n	800c5b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	891a      	ldrh	r2, [r3, #8]
 800c53a:	8a7b      	ldrh	r3, [r7, #18]
 800c53c:	4413      	add	r3, r2
 800c53e:	b29b      	uxth	r3, r3
 800c540:	8a7a      	ldrh	r2, [r7, #18]
 800c542:	429a      	cmp	r2, r3
 800c544:	d901      	bls.n	800c54a <pbuf_add_header_impl+0x56>
    return 1;
 800c546:	2301      	movs	r3, #1
 800c548:	e032      	b.n	800c5b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	7b1b      	ldrb	r3, [r3, #12]
 800c54e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c550:	8a3b      	ldrh	r3, [r7, #16]
 800c552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00c      	beq.n	800c574 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	425b      	negs	r3, r3
 800c562:	4413      	add	r3, r2
 800c564:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3310      	adds	r3, #16
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d20d      	bcs.n	800c58c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c570:	2301      	movs	r3, #1
 800c572:	e01d      	b.n	800c5b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d006      	beq.n	800c588 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	425b      	negs	r3, r3
 800c582:	4413      	add	r3, r2
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	e001      	b.n	800c58c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c588:	2301      	movs	r3, #1
 800c58a:	e011      	b.n	800c5b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	895a      	ldrh	r2, [r3, #10]
 800c596:	8a7b      	ldrh	r3, [r7, #18]
 800c598:	4413      	add	r3, r2
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	891a      	ldrh	r2, [r3, #8]
 800c5a4:	8a7b      	ldrh	r3, [r7, #18]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	0801893c 	.word	0x0801893c
 800c5bc:	08018aa0 	.word	0x08018aa0
 800c5c0:	0801899c 	.word	0x0801899c

0800c5c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff ff8e 	bl	800c4f4 <pbuf_add_header_impl>
 800c5d8:	4603      	mov	r3, r0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d106      	bne.n	800c602 <pbuf_remove_header+0x1e>
 800c5f4:	4b20      	ldr	r3, [pc, #128]	; (800c678 <pbuf_remove_header+0x94>)
 800c5f6:	f240 224b 	movw	r2, #587	; 0x24b
 800c5fa:	4920      	ldr	r1, [pc, #128]	; (800c67c <pbuf_remove_header+0x98>)
 800c5fc:	4820      	ldr	r0, [pc, #128]	; (800c680 <pbuf_remove_header+0x9c>)
 800c5fe:	f00a feb1 	bl	8017364 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <pbuf_remove_header+0x2c>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60e:	d301      	bcc.n	800c614 <pbuf_remove_header+0x30>
    return 1;
 800c610:	2301      	movs	r3, #1
 800c612:	e02c      	b.n	800c66e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <pbuf_remove_header+0x3a>
    return 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	e027      	b.n	800c66e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	895b      	ldrh	r3, [r3, #10]
 800c626:	89fa      	ldrh	r2, [r7, #14]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d908      	bls.n	800c63e <pbuf_remove_header+0x5a>
 800c62c:	4b12      	ldr	r3, [pc, #72]	; (800c678 <pbuf_remove_header+0x94>)
 800c62e:	f240 2255 	movw	r2, #597	; 0x255
 800c632:	4914      	ldr	r1, [pc, #80]	; (800c684 <pbuf_remove_header+0xa0>)
 800c634:	4812      	ldr	r0, [pc, #72]	; (800c680 <pbuf_remove_header+0x9c>)
 800c636:	f00a fe95 	bl	8017364 <iprintf>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e017      	b.n	800c66e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	441a      	add	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	895a      	ldrh	r2, [r3, #10]
 800c654:	89fb      	ldrh	r3, [r7, #14]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	b29a      	uxth	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	891a      	ldrh	r2, [r3, #8]
 800c662:	89fb      	ldrh	r3, [r7, #14]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	0801893c 	.word	0x0801893c
 800c67c:	08018aa0 	.word	0x08018aa0
 800c680:	0801899c 	.word	0x0801899c
 800c684:	08018aac 	.word	0x08018aac

0800c688 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	807b      	strh	r3, [r7, #2]
 800c694:	4613      	mov	r3, r2
 800c696:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da08      	bge.n	800c6b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c6a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6a4:	425b      	negs	r3, r3
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff ff9b 	bl	800c5e4 <pbuf_remove_header>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	e007      	b.n	800c6c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c6b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6b6:	787a      	ldrb	r2, [r7, #1]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff ff1a 	bl	800c4f4 <pbuf_add_header_impl>
 800c6c0:	4603      	mov	r3, r0
  }
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c6d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff ffd2 	bl	800c688 <pbuf_header_impl>
 800c6e4:	4603      	mov	r3, r0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10b      	bne.n	800c716 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d106      	bne.n	800c712 <pbuf_free+0x22>
 800c704:	4b3b      	ldr	r3, [pc, #236]	; (800c7f4 <pbuf_free+0x104>)
 800c706:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c70a:	493b      	ldr	r1, [pc, #236]	; (800c7f8 <pbuf_free+0x108>)
 800c70c:	483b      	ldr	r0, [pc, #236]	; (800c7fc <pbuf_free+0x10c>)
 800c70e:	f00a fe29 	bl	8017364 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c712:	2300      	movs	r3, #0
 800c714:	e069      	b.n	800c7ea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c71a:	e062      	b.n	800c7e2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c71c:	f00a fc68 	bl	8016ff0 <sys_arch_protect>
 800c720:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7b9b      	ldrb	r3, [r3, #14]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d106      	bne.n	800c738 <pbuf_free+0x48>
 800c72a:	4b32      	ldr	r3, [pc, #200]	; (800c7f4 <pbuf_free+0x104>)
 800c72c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c730:	4933      	ldr	r1, [pc, #204]	; (800c800 <pbuf_free+0x110>)
 800c732:	4832      	ldr	r0, [pc, #200]	; (800c7fc <pbuf_free+0x10c>)
 800c734:	f00a fe16 	bl	8017364 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7b9b      	ldrb	r3, [r3, #14]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	739a      	strb	r2, [r3, #14]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7b9b      	ldrb	r3, [r3, #14]
 800c748:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c74a:	69b8      	ldr	r0, [r7, #24]
 800c74c:	f00a fc5e 	bl	801700c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c750:	7dfb      	ldrb	r3, [r7, #23]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d143      	bne.n	800c7de <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7b1b      	ldrb	r3, [r3, #12]
 800c760:	f003 030f 	and.w	r3, r3, #15
 800c764:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	7b5b      	ldrb	r3, [r3, #13]
 800c76a:	f003 0302 	and.w	r3, r3, #2
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d011      	beq.n	800c796 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <pbuf_free+0x9c>
 800c77e:	4b1d      	ldr	r3, [pc, #116]	; (800c7f4 <pbuf_free+0x104>)
 800c780:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c784:	491f      	ldr	r1, [pc, #124]	; (800c804 <pbuf_free+0x114>)
 800c786:	481d      	ldr	r0, [pc, #116]	; (800c7fc <pbuf_free+0x10c>)
 800c788:	f00a fdec 	bl	8017364 <iprintf>
        pc->custom_free_function(p);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	4798      	blx	r3
 800c794:	e01d      	b.n	800c7d2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d104      	bne.n	800c7a6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	200c      	movs	r0, #12
 800c7a0:	f7ff f8f6 	bl	800b990 <memp_free>
 800c7a4:	e015      	b.n	800c7d2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d104      	bne.n	800c7b6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c7ac:	6879      	ldr	r1, [r7, #4]
 800c7ae:	200b      	movs	r0, #11
 800c7b0:	f7ff f8ee 	bl	800b990 <memp_free>
 800c7b4:	e00d      	b.n	800c7d2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d103      	bne.n	800c7c4 <pbuf_free+0xd4>
          mem_free(p);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7fe fd79 	bl	800b2b4 <mem_free>
 800c7c2:	e006      	b.n	800c7d2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c7c4:	4b0b      	ldr	r3, [pc, #44]	; (800c7f4 <pbuf_free+0x104>)
 800c7c6:	f240 320f 	movw	r2, #783	; 0x30f
 800c7ca:	490f      	ldr	r1, [pc, #60]	; (800c808 <pbuf_free+0x118>)
 800c7cc:	480b      	ldr	r0, [pc, #44]	; (800c7fc <pbuf_free+0x10c>)
 800c7ce:	f00a fdc9 	bl	8017364 <iprintf>
        }
      }
      count++;
 800c7d2:	7ffb      	ldrb	r3, [r7, #31]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	607b      	str	r3, [r7, #4]
 800c7dc:	e001      	b.n	800c7e2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d199      	bne.n	800c71c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c7e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3720      	adds	r7, #32
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	0801893c 	.word	0x0801893c
 800c7f8:	08018aa0 	.word	0x08018aa0
 800c7fc:	0801899c 	.word	0x0801899c
 800c800:	08018acc 	.word	0x08018acc
 800c804:	08018ae4 	.word	0x08018ae4
 800c808:	08018b08 	.word	0x08018b08

0800c80c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c818:	e005      	b.n	800c826 <pbuf_clen+0x1a>
    ++len;
 800c81a:	89fb      	ldrh	r3, [r7, #14]
 800c81c:	3301      	adds	r3, #1
 800c81e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1f6      	bne.n	800c81a <pbuf_clen+0xe>
  }
  return len;
 800c82c:	89fb      	ldrh	r3, [r7, #14]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
	...

0800c83c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d016      	beq.n	800c878 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c84a:	f00a fbd1 	bl	8016ff0 <sys_arch_protect>
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7b9b      	ldrb	r3, [r3, #14]
 800c854:	3301      	adds	r3, #1
 800c856:	b2da      	uxtb	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	739a      	strb	r2, [r3, #14]
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f00a fbd5 	bl	801700c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	7b9b      	ldrb	r3, [r3, #14]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <pbuf_ref+0x3c>
 800c86a:	4b05      	ldr	r3, [pc, #20]	; (800c880 <pbuf_ref+0x44>)
 800c86c:	f240 3242 	movw	r2, #834	; 0x342
 800c870:	4904      	ldr	r1, [pc, #16]	; (800c884 <pbuf_ref+0x48>)
 800c872:	4805      	ldr	r0, [pc, #20]	; (800c888 <pbuf_ref+0x4c>)
 800c874:	f00a fd76 	bl	8017364 <iprintf>
  }
}
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	0801893c 	.word	0x0801893c
 800c884:	08018b1c 	.word	0x08018b1c
 800c888:	0801899c 	.word	0x0801899c

0800c88c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <pbuf_cat+0x16>
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d107      	bne.n	800c8b2 <pbuf_cat+0x26>
 800c8a2:	4b20      	ldr	r3, [pc, #128]	; (800c924 <pbuf_cat+0x98>)
 800c8a4:	f240 3259 	movw	r2, #857	; 0x359
 800c8a8:	491f      	ldr	r1, [pc, #124]	; (800c928 <pbuf_cat+0x9c>)
 800c8aa:	4820      	ldr	r0, [pc, #128]	; (800c92c <pbuf_cat+0xa0>)
 800c8ac:	f00a fd5a 	bl	8017364 <iprintf>
 800c8b0:	e034      	b.n	800c91c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	e00a      	b.n	800c8ce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	891a      	ldrh	r2, [r3, #8]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	891b      	ldrh	r3, [r3, #8]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1f0      	bne.n	800c8b8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	891a      	ldrh	r2, [r3, #8]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	895b      	ldrh	r3, [r3, #10]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d006      	beq.n	800c8f0 <pbuf_cat+0x64>
 800c8e2:	4b10      	ldr	r3, [pc, #64]	; (800c924 <pbuf_cat+0x98>)
 800c8e4:	f240 3262 	movw	r2, #866	; 0x362
 800c8e8:	4911      	ldr	r1, [pc, #68]	; (800c930 <pbuf_cat+0xa4>)
 800c8ea:	4810      	ldr	r0, [pc, #64]	; (800c92c <pbuf_cat+0xa0>)
 800c8ec:	f00a fd3a 	bl	8017364 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d006      	beq.n	800c906 <pbuf_cat+0x7a>
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <pbuf_cat+0x98>)
 800c8fa:	f240 3263 	movw	r2, #867	; 0x363
 800c8fe:	490d      	ldr	r1, [pc, #52]	; (800c934 <pbuf_cat+0xa8>)
 800c900:	480a      	ldr	r0, [pc, #40]	; (800c92c <pbuf_cat+0xa0>)
 800c902:	f00a fd2f 	bl	8017364 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	891a      	ldrh	r2, [r3, #8]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	891b      	ldrh	r3, [r3, #8]
 800c90e:	4413      	add	r3, r2
 800c910:	b29a      	uxth	r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0801893c 	.word	0x0801893c
 800c928:	08018b30 	.word	0x08018b30
 800c92c:	0801899c 	.word	0x0801899c
 800c930:	08018b68 	.word	0x08018b68
 800c934:	08018b98 	.word	0x08018b98

0800c938 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff ffa1 	bl	800c88c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c94a:	6838      	ldr	r0, [r7, #0]
 800c94c:	f7ff ff76 	bl	800c83c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c962:	2300      	movs	r3, #0
 800c964:	617b      	str	r3, [r7, #20]
 800c966:	2300      	movs	r3, #0
 800c968:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d008      	beq.n	800c982 <pbuf_copy+0x2a>
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d005      	beq.n	800c982 <pbuf_copy+0x2a>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	891a      	ldrh	r2, [r3, #8]
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	891b      	ldrh	r3, [r3, #8]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d209      	bcs.n	800c996 <pbuf_copy+0x3e>
 800c982:	4b57      	ldr	r3, [pc, #348]	; (800cae0 <pbuf_copy+0x188>)
 800c984:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c988:	4956      	ldr	r1, [pc, #344]	; (800cae4 <pbuf_copy+0x18c>)
 800c98a:	4857      	ldr	r0, [pc, #348]	; (800cae8 <pbuf_copy+0x190>)
 800c98c:	f00a fcea 	bl	8017364 <iprintf>
 800c990:	f06f 030f 	mvn.w	r3, #15
 800c994:	e09f      	b.n	800cad6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	895b      	ldrh	r3, [r3, #10]
 800c99a:	461a      	mov	r2, r3
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	1ad2      	subs	r2, r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	895b      	ldrh	r3, [r3, #10]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	1acb      	subs	r3, r1, r3
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d306      	bcc.n	800c9bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	895b      	ldrh	r3, [r3, #10]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	e005      	b.n	800c9c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	895b      	ldrh	r3, [r3, #10]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	18d0      	adds	r0, r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	f00a fc51 	bl	8017282 <memcpy>
    offset_to += len;
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	895b      	ldrh	r3, [r3, #10]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d906      	bls.n	800ca0a <pbuf_copy+0xb2>
 800c9fc:	4b38      	ldr	r3, [pc, #224]	; (800cae0 <pbuf_copy+0x188>)
 800c9fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ca02:	493a      	ldr	r1, [pc, #232]	; (800caec <pbuf_copy+0x194>)
 800ca04:	4838      	ldr	r0, [pc, #224]	; (800cae8 <pbuf_copy+0x190>)
 800ca06:	f00a fcad 	bl	8017364 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	895b      	ldrh	r3, [r3, #10]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d906      	bls.n	800ca24 <pbuf_copy+0xcc>
 800ca16:	4b32      	ldr	r3, [pc, #200]	; (800cae0 <pbuf_copy+0x188>)
 800ca18:	f240 32da 	movw	r2, #986	; 0x3da
 800ca1c:	4934      	ldr	r1, [pc, #208]	; (800caf0 <pbuf_copy+0x198>)
 800ca1e:	4832      	ldr	r0, [pc, #200]	; (800cae8 <pbuf_copy+0x190>)
 800ca20:	f00a fca0 	bl	8017364 <iprintf>
    if (offset_from >= p_from->len) {
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	895b      	ldrh	r3, [r3, #10]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d304      	bcc.n	800ca3a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	895b      	ldrh	r3, [r3, #10]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d114      	bne.n	800ca70 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10c      	bne.n	800ca70 <pbuf_copy+0x118>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d009      	beq.n	800ca70 <pbuf_copy+0x118>
 800ca5c:	4b20      	ldr	r3, [pc, #128]	; (800cae0 <pbuf_copy+0x188>)
 800ca5e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ca62:	4924      	ldr	r1, [pc, #144]	; (800caf4 <pbuf_copy+0x19c>)
 800ca64:	4820      	ldr	r0, [pc, #128]	; (800cae8 <pbuf_copy+0x190>)
 800ca66:	f00a fc7d 	bl	8017364 <iprintf>
 800ca6a:	f06f 030f 	mvn.w	r3, #15
 800ca6e:	e032      	b.n	800cad6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d013      	beq.n	800ca9e <pbuf_copy+0x146>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	895a      	ldrh	r2, [r3, #10]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	891b      	ldrh	r3, [r3, #8]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d10d      	bne.n	800ca9e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <pbuf_copy+0x146>
 800ca8a:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <pbuf_copy+0x188>)
 800ca8c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ca90:	4919      	ldr	r1, [pc, #100]	; (800caf8 <pbuf_copy+0x1a0>)
 800ca92:	4815      	ldr	r0, [pc, #84]	; (800cae8 <pbuf_copy+0x190>)
 800ca94:	f00a fc66 	bl	8017364 <iprintf>
 800ca98:	f06f 0305 	mvn.w	r3, #5
 800ca9c:	e01b      	b.n	800cad6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d013      	beq.n	800cacc <pbuf_copy+0x174>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	895a      	ldrh	r2, [r3, #10]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	891b      	ldrh	r3, [r3, #8]
 800caac:	429a      	cmp	r2, r3
 800caae:	d10d      	bne.n	800cacc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d009      	beq.n	800cacc <pbuf_copy+0x174>
 800cab8:	4b09      	ldr	r3, [pc, #36]	; (800cae0 <pbuf_copy+0x188>)
 800caba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cabe:	490e      	ldr	r1, [pc, #56]	; (800caf8 <pbuf_copy+0x1a0>)
 800cac0:	4809      	ldr	r0, [pc, #36]	; (800cae8 <pbuf_copy+0x190>)
 800cac2:	f00a fc4f 	bl	8017364 <iprintf>
 800cac6:	f06f 0305 	mvn.w	r3, #5
 800caca:	e004      	b.n	800cad6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f47f af61 	bne.w	800c996 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	0801893c 	.word	0x0801893c
 800cae4:	08018be4 	.word	0x08018be4
 800cae8:	0801899c 	.word	0x0801899c
 800caec:	08018c14 	.word	0x08018c14
 800caf0:	08018c2c 	.word	0x08018c2c
 800caf4:	08018c48 	.word	0x08018c48
 800caf8:	08018c58 	.word	0x08018c58

0800cafc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4611      	mov	r1, r2
 800cb08:	461a      	mov	r2, r3
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	80fb      	strh	r3, [r7, #6]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d108      	bne.n	800cb32 <pbuf_copy_partial+0x36>
 800cb20:	4b2b      	ldr	r3, [pc, #172]	; (800cbd0 <pbuf_copy_partial+0xd4>)
 800cb22:	f240 420a 	movw	r2, #1034	; 0x40a
 800cb26:	492b      	ldr	r1, [pc, #172]	; (800cbd4 <pbuf_copy_partial+0xd8>)
 800cb28:	482b      	ldr	r0, [pc, #172]	; (800cbd8 <pbuf_copy_partial+0xdc>)
 800cb2a:	f00a fc1b 	bl	8017364 <iprintf>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e04a      	b.n	800cbc8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d108      	bne.n	800cb4a <pbuf_copy_partial+0x4e>
 800cb38:	4b25      	ldr	r3, [pc, #148]	; (800cbd0 <pbuf_copy_partial+0xd4>)
 800cb3a:	f240 420b 	movw	r2, #1035	; 0x40b
 800cb3e:	4927      	ldr	r1, [pc, #156]	; (800cbdc <pbuf_copy_partial+0xe0>)
 800cb40:	4825      	ldr	r0, [pc, #148]	; (800cbd8 <pbuf_copy_partial+0xdc>)
 800cb42:	f00a fc0f 	bl	8017364 <iprintf>
 800cb46:	2300      	movs	r3, #0
 800cb48:	e03e      	b.n	800cbc8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	61fb      	str	r3, [r7, #28]
 800cb4e:	e034      	b.n	800cbba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cb50:	88bb      	ldrh	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00a      	beq.n	800cb6c <pbuf_copy_partial+0x70>
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	895b      	ldrh	r3, [r3, #10]
 800cb5a:	88ba      	ldrh	r2, [r7, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d305      	bcc.n	800cb6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	895b      	ldrh	r3, [r3, #10]
 800cb64:	88ba      	ldrh	r2, [r7, #4]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	80bb      	strh	r3, [r7, #4]
 800cb6a:	e023      	b.n	800cbb4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	895a      	ldrh	r2, [r3, #10]
 800cb70:	88bb      	ldrh	r3, [r7, #4]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cb76:	8b3a      	ldrh	r2, [r7, #24]
 800cb78:	88fb      	ldrh	r3, [r7, #6]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d901      	bls.n	800cb82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cb7e:	88fb      	ldrh	r3, [r7, #6]
 800cb80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cb82:	8b7b      	ldrh	r3, [r7, #26]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	18d0      	adds	r0, r2, r3
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	88bb      	ldrh	r3, [r7, #4]
 800cb8e:	4413      	add	r3, r2
 800cb90:	8b3a      	ldrh	r2, [r7, #24]
 800cb92:	4619      	mov	r1, r3
 800cb94:	f00a fb75 	bl	8017282 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cb98:	8afa      	ldrh	r2, [r7, #22]
 800cb9a:	8b3b      	ldrh	r3, [r7, #24]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cba0:	8b7a      	ldrh	r2, [r7, #26]
 800cba2:	8b3b      	ldrh	r3, [r7, #24]
 800cba4:	4413      	add	r3, r2
 800cba6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cba8:	88fa      	ldrh	r2, [r7, #6]
 800cbaa:	8b3b      	ldrh	r3, [r7, #24]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	88fb      	ldrh	r3, [r7, #6]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <pbuf_copy_partial+0xca>
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1c4      	bne.n	800cb50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cbc6:	8afb      	ldrh	r3, [r7, #22]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3720      	adds	r7, #32
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	0801893c 	.word	0x0801893c
 800cbd4:	08018c84 	.word	0x08018c84
 800cbd8:	0801899c 	.word	0x0801899c
 800cbdc:	08018ca4 	.word	0x08018ca4

0800cbe0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	603a      	str	r2, [r7, #0]
 800cbea:	71fb      	strb	r3, [r7, #7]
 800cbec:	460b      	mov	r3, r1
 800cbee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	8919      	ldrh	r1, [r3, #8]
 800cbf4:	88ba      	ldrh	r2, [r7, #4]
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7ff fa95 	bl	800c128 <pbuf_alloc>
 800cbfe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d101      	bne.n	800cc0a <pbuf_clone+0x2a>
    return NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	e011      	b.n	800cc2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7ff fea3 	bl	800c958 <pbuf_copy>
 800cc12:	4603      	mov	r3, r0
 800cc14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cc16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <pbuf_clone+0x4c>
 800cc1e:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <pbuf_clone+0x58>)
 800cc20:	f240 5224 	movw	r2, #1316	; 0x524
 800cc24:	4905      	ldr	r1, [pc, #20]	; (800cc3c <pbuf_clone+0x5c>)
 800cc26:	4806      	ldr	r0, [pc, #24]	; (800cc40 <pbuf_clone+0x60>)
 800cc28:	f00a fb9c 	bl	8017364 <iprintf>
  return q;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0801893c 	.word	0x0801893c
 800cc3c:	08018db0 	.word	0x08018db0
 800cc40:	0801899c 	.word	0x0801899c

0800cc44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cc48:	f00a fba4 	bl	8017394 <rand>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	4b01      	ldr	r3, [pc, #4]	; (800cc64 <tcp_init+0x20>)
 800cc5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cc60:	bf00      	nop
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	20000010 	.word	0x20000010

0800cc68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7d1b      	ldrb	r3, [r3, #20]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d105      	bne.n	800cc84 <tcp_free+0x1c>
 800cc78:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <tcp_free+0x2c>)
 800cc7a:	22d4      	movs	r2, #212	; 0xd4
 800cc7c:	4906      	ldr	r1, [pc, #24]	; (800cc98 <tcp_free+0x30>)
 800cc7e:	4807      	ldr	r0, [pc, #28]	; (800cc9c <tcp_free+0x34>)
 800cc80:	f00a fb70 	bl	8017364 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	2001      	movs	r0, #1
 800cc88:	f7fe fe82 	bl	800b990 <memp_free>
}
 800cc8c:	bf00      	nop
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	08018e3c 	.word	0x08018e3c
 800cc98:	08018e6c 	.word	0x08018e6c
 800cc9c:	08018e80 	.word	0x08018e80

0800cca0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	7d1b      	ldrb	r3, [r3, #20]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d105      	bne.n	800ccbc <tcp_free_listen+0x1c>
 800ccb0:	4b06      	ldr	r3, [pc, #24]	; (800cccc <tcp_free_listen+0x2c>)
 800ccb2:	22df      	movs	r2, #223	; 0xdf
 800ccb4:	4906      	ldr	r1, [pc, #24]	; (800ccd0 <tcp_free_listen+0x30>)
 800ccb6:	4807      	ldr	r0, [pc, #28]	; (800ccd4 <tcp_free_listen+0x34>)
 800ccb8:	f00a fb54 	bl	8017364 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	2002      	movs	r0, #2
 800ccc0:	f7fe fe66 	bl	800b990 <memp_free>
}
 800ccc4:	bf00      	nop
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	08018e3c 	.word	0x08018e3c
 800ccd0:	08018ea8 	.word	0x08018ea8
 800ccd4:	08018e80 	.word	0x08018e80

0800ccd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ccdc:	f000 fea2 	bl	800da24 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cce0:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <tcp_tmr+0x28>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <tcp_tmr+0x28>)
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <tcp_tmr+0x28>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ccf8:	f000 fb54 	bl	800d3a4 <tcp_slowtmr>
  }
}
 800ccfc:	bf00      	nop
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	20004acd 	.word	0x20004acd

0800cd04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d105      	bne.n	800cd20 <tcp_remove_listener+0x1c>
 800cd14:	4b0d      	ldr	r3, [pc, #52]	; (800cd4c <tcp_remove_listener+0x48>)
 800cd16:	22ff      	movs	r2, #255	; 0xff
 800cd18:	490d      	ldr	r1, [pc, #52]	; (800cd50 <tcp_remove_listener+0x4c>)
 800cd1a:	480e      	ldr	r0, [pc, #56]	; (800cd54 <tcp_remove_listener+0x50>)
 800cd1c:	f00a fb22 	bl	8017364 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	e00a      	b.n	800cd3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d102      	bne.n	800cd36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2200      	movs	r2, #0
 800cd34:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1f1      	bne.n	800cd26 <tcp_remove_listener+0x22>
    }
  }
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	08018e3c 	.word	0x08018e3c
 800cd50:	08018ec4 	.word	0x08018ec4
 800cd54:	08018e80 	.word	0x08018e80

0800cd58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d106      	bne.n	800cd74 <tcp_listen_closed+0x1c>
 800cd66:	4b14      	ldr	r3, [pc, #80]	; (800cdb8 <tcp_listen_closed+0x60>)
 800cd68:	f240 1211 	movw	r2, #273	; 0x111
 800cd6c:	4913      	ldr	r1, [pc, #76]	; (800cdbc <tcp_listen_closed+0x64>)
 800cd6e:	4814      	ldr	r0, [pc, #80]	; (800cdc0 <tcp_listen_closed+0x68>)
 800cd70:	f00a faf8 	bl	8017364 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7d1b      	ldrb	r3, [r3, #20]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d006      	beq.n	800cd8a <tcp_listen_closed+0x32>
 800cd7c:	4b0e      	ldr	r3, [pc, #56]	; (800cdb8 <tcp_listen_closed+0x60>)
 800cd7e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cd82:	4910      	ldr	r1, [pc, #64]	; (800cdc4 <tcp_listen_closed+0x6c>)
 800cd84:	480e      	ldr	r0, [pc, #56]	; (800cdc0 <tcp_listen_closed+0x68>)
 800cd86:	f00a faed 	bl	8017364 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e00b      	b.n	800cda8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cd90:	4a0d      	ldr	r2, [pc, #52]	; (800cdc8 <tcp_listen_closed+0x70>)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff ffb1 	bl	800cd04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3301      	adds	r3, #1
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d9f0      	bls.n	800cd90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cdae:	bf00      	nop
 800cdb0:	bf00      	nop
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	08018e3c 	.word	0x08018e3c
 800cdbc:	08018eec 	.word	0x08018eec
 800cdc0:	08018e80 	.word	0x08018e80
 800cdc4:	08018ef8 	.word	0x08018ef8
 800cdc8:	0801b33c 	.word	0x0801b33c

0800cdcc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cdcc:	b5b0      	push	{r4, r5, r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af04      	add	r7, sp, #16
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <tcp_close_shutdown+0x20>
 800cdde:	4b63      	ldr	r3, [pc, #396]	; (800cf6c <tcp_close_shutdown+0x1a0>)
 800cde0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cde4:	4962      	ldr	r1, [pc, #392]	; (800cf70 <tcp_close_shutdown+0x1a4>)
 800cde6:	4863      	ldr	r0, [pc, #396]	; (800cf74 <tcp_close_shutdown+0x1a8>)
 800cde8:	f00a fabc 	bl	8017364 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d066      	beq.n	800cec0 <tcp_close_shutdown+0xf4>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	7d1b      	ldrb	r3, [r3, #20]
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d003      	beq.n	800ce02 <tcp_close_shutdown+0x36>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7d1b      	ldrb	r3, [r3, #20]
 800cdfe:	2b07      	cmp	r3, #7
 800ce00:	d15e      	bne.n	800cec0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d104      	bne.n	800ce14 <tcp_close_shutdown+0x48>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce12:	d055      	beq.n	800cec0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	8b5b      	ldrh	r3, [r3, #26]
 800ce18:	f003 0310 	and.w	r3, r3, #16
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d106      	bne.n	800ce2e <tcp_close_shutdown+0x62>
 800ce20:	4b52      	ldr	r3, [pc, #328]	; (800cf6c <tcp_close_shutdown+0x1a0>)
 800ce22:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ce26:	4954      	ldr	r1, [pc, #336]	; (800cf78 <tcp_close_shutdown+0x1ac>)
 800ce28:	4852      	ldr	r0, [pc, #328]	; (800cf74 <tcp_close_shutdown+0x1a8>)
 800ce2a:	f00a fa9b 	bl	8017364 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce36:	687d      	ldr	r5, [r7, #4]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	8ad2      	ldrh	r2, [r2, #22]
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	8b09      	ldrh	r1, [r1, #24]
 800ce44:	9102      	str	r1, [sp, #8]
 800ce46:	9201      	str	r2, [sp, #4]
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	462b      	mov	r3, r5
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	4601      	mov	r1, r0
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f004 fe8d 	bl	8011b70 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f001 f8c6 	bl	800dfe8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ce5c:	4b47      	ldr	r3, [pc, #284]	; (800cf7c <tcp_close_shutdown+0x1b0>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d105      	bne.n	800ce72 <tcp_close_shutdown+0xa6>
 800ce66:	4b45      	ldr	r3, [pc, #276]	; (800cf7c <tcp_close_shutdown+0x1b0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	4a43      	ldr	r2, [pc, #268]	; (800cf7c <tcp_close_shutdown+0x1b0>)
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	e013      	b.n	800ce9a <tcp_close_shutdown+0xce>
 800ce72:	4b42      	ldr	r3, [pc, #264]	; (800cf7c <tcp_close_shutdown+0x1b0>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	e00c      	b.n	800ce94 <tcp_close_shutdown+0xc8>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d104      	bne.n	800ce8e <tcp_close_shutdown+0xc2>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68da      	ldr	r2, [r3, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	60da      	str	r2, [r3, #12]
 800ce8c:	e005      	b.n	800ce9a <tcp_close_shutdown+0xce>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1ef      	bne.n	800ce7a <tcp_close_shutdown+0xae>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	60da      	str	r2, [r3, #12]
 800cea0:	4b37      	ldr	r3, [pc, #220]	; (800cf80 <tcp_close_shutdown+0x1b4>)
 800cea2:	2201      	movs	r2, #1
 800cea4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cea6:	4b37      	ldr	r3, [pc, #220]	; (800cf84 <tcp_close_shutdown+0x1b8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d102      	bne.n	800ceb6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ceb0:	f003 fd5a 	bl	8010968 <tcp_trigger_input_pcb_close>
 800ceb4:	e002      	b.n	800cebc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff fed6 	bl	800cc68 <tcp_free>
      }
      return ERR_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	e050      	b.n	800cf62 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d03b      	beq.n	800cf40 <tcp_close_shutdown+0x174>
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	dc44      	bgt.n	800cf56 <tcp_close_shutdown+0x18a>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <tcp_close_shutdown+0x10a>
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d02a      	beq.n	800cf2a <tcp_close_shutdown+0x15e>
 800ced4:	e03f      	b.n	800cf56 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	8adb      	ldrh	r3, [r3, #22]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d021      	beq.n	800cf22 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cede:	4b2a      	ldr	r3, [pc, #168]	; (800cf88 <tcp_close_shutdown+0x1bc>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d105      	bne.n	800cef4 <tcp_close_shutdown+0x128>
 800cee8:	4b27      	ldr	r3, [pc, #156]	; (800cf88 <tcp_close_shutdown+0x1bc>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	4a26      	ldr	r2, [pc, #152]	; (800cf88 <tcp_close_shutdown+0x1bc>)
 800cef0:	6013      	str	r3, [r2, #0]
 800cef2:	e013      	b.n	800cf1c <tcp_close_shutdown+0x150>
 800cef4:	4b24      	ldr	r3, [pc, #144]	; (800cf88 <tcp_close_shutdown+0x1bc>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60bb      	str	r3, [r7, #8]
 800cefa:	e00c      	b.n	800cf16 <tcp_close_shutdown+0x14a>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d104      	bne.n	800cf10 <tcp_close_shutdown+0x144>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	68da      	ldr	r2, [r3, #12]
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	e005      	b.n	800cf1c <tcp_close_shutdown+0x150>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	60bb      	str	r3, [r7, #8]
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1ef      	bne.n	800cefc <tcp_close_shutdown+0x130>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7ff fea0 	bl	800cc68 <tcp_free>
      break;
 800cf28:	e01a      	b.n	800cf60 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff ff14 	bl	800cd58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	4816      	ldr	r0, [pc, #88]	; (800cf8c <tcp_close_shutdown+0x1c0>)
 800cf34:	f001 f8a8 	bl	800e088 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff feb1 	bl	800cca0 <tcp_free_listen>
      break;
 800cf3e:	e00f      	b.n	800cf60 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf40:	6879      	ldr	r1, [r7, #4]
 800cf42:	480e      	ldr	r0, [pc, #56]	; (800cf7c <tcp_close_shutdown+0x1b0>)
 800cf44:	f001 f8a0 	bl	800e088 <tcp_pcb_remove>
 800cf48:	4b0d      	ldr	r3, [pc, #52]	; (800cf80 <tcp_close_shutdown+0x1b4>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fe8a 	bl	800cc68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cf54:	e004      	b.n	800cf60 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f81a 	bl	800cf90 <tcp_close_shutdown_fin>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	e000      	b.n	800cf62 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bdb0      	pop	{r4, r5, r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	08018e3c 	.word	0x08018e3c
 800cf70:	08018f10 	.word	0x08018f10
 800cf74:	08018e80 	.word	0x08018e80
 800cf78:	08018f30 	.word	0x08018f30
 800cf7c:	2000bb98 	.word	0x2000bb98
 800cf80:	2000bb94 	.word	0x2000bb94
 800cf84:	2000bbac 	.word	0x2000bbac
 800cf88:	2000bba4 	.word	0x2000bba4
 800cf8c:	2000bba0 	.word	0x2000bba0

0800cf90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <tcp_close_shutdown_fin+0x1c>
 800cf9e:	4b2e      	ldr	r3, [pc, #184]	; (800d058 <tcp_close_shutdown_fin+0xc8>)
 800cfa0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cfa4:	492d      	ldr	r1, [pc, #180]	; (800d05c <tcp_close_shutdown_fin+0xcc>)
 800cfa6:	482e      	ldr	r0, [pc, #184]	; (800d060 <tcp_close_shutdown_fin+0xd0>)
 800cfa8:	f00a f9dc 	bl	8017364 <iprintf>

  switch (pcb->state) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b07      	cmp	r3, #7
 800cfb2:	d020      	beq.n	800cff6 <tcp_close_shutdown_fin+0x66>
 800cfb4:	2b07      	cmp	r3, #7
 800cfb6:	dc2b      	bgt.n	800d010 <tcp_close_shutdown_fin+0x80>
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d002      	beq.n	800cfc2 <tcp_close_shutdown_fin+0x32>
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d00d      	beq.n	800cfdc <tcp_close_shutdown_fin+0x4c>
 800cfc0:	e026      	b.n	800d010 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f003 fee2 	bl	8010d8c <tcp_send_fin>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cfcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d11f      	bne.n	800d014 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2205      	movs	r2, #5
 800cfd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cfda:	e01b      	b.n	800d014 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f003 fed5 	bl	8010d8c <tcp_send_fin>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cfe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d114      	bne.n	800d018 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2205      	movs	r2, #5
 800cff2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cff4:	e010      	b.n	800d018 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f003 fec8 	bl	8010d8c <tcp_send_fin>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d109      	bne.n	800d01c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2209      	movs	r2, #9
 800d00c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d00e:	e005      	b.n	800d01c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	e01c      	b.n	800d04e <tcp_close_shutdown_fin+0xbe>
      break;
 800d014:	bf00      	nop
 800d016:	e002      	b.n	800d01e <tcp_close_shutdown_fin+0x8e>
      break;
 800d018:	bf00      	nop
 800d01a:	e000      	b.n	800d01e <tcp_close_shutdown_fin+0x8e>
      break;
 800d01c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d103      	bne.n	800d02e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f003 ffee 	bl	8011008 <tcp_output>
 800d02c:	e00d      	b.n	800d04a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d036:	d108      	bne.n	800d04a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	8b5b      	ldrh	r3, [r3, #26]
 800d03c:	f043 0308 	orr.w	r3, r3, #8
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	e001      	b.n	800d04e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	08018e3c 	.word	0x08018e3c
 800d05c:	08018eec 	.word	0x08018eec
 800d060:	08018e80 	.word	0x08018e80

0800d064 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d109      	bne.n	800d086 <tcp_close+0x22>
 800d072:	4b0f      	ldr	r3, [pc, #60]	; (800d0b0 <tcp_close+0x4c>)
 800d074:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d078:	490e      	ldr	r1, [pc, #56]	; (800d0b4 <tcp_close+0x50>)
 800d07a:	480f      	ldr	r0, [pc, #60]	; (800d0b8 <tcp_close+0x54>)
 800d07c:	f00a f972 	bl	8017364 <iprintf>
 800d080:	f06f 030f 	mvn.w	r3, #15
 800d084:	e00f      	b.n	800d0a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	7d1b      	ldrb	r3, [r3, #20]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d006      	beq.n	800d09c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8b5b      	ldrh	r3, [r3, #26]
 800d092:	f043 0310 	orr.w	r3, r3, #16
 800d096:	b29a      	uxth	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d09c:	2101      	movs	r1, #1
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7ff fe94 	bl	800cdcc <tcp_close_shutdown>
 800d0a4:	4603      	mov	r3, r0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	08018e3c 	.word	0x08018e3c
 800d0b4:	08018f4c 	.word	0x08018f4c
 800d0b8:	08018e80 	.word	0x08018e80

0800d0bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08e      	sub	sp, #56	; 0x38
 800d0c0:	af04      	add	r7, sp, #16
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d107      	bne.n	800d0dc <tcp_abandon+0x20>
 800d0cc:	4b52      	ldr	r3, [pc, #328]	; (800d218 <tcp_abandon+0x15c>)
 800d0ce:	f240 223d 	movw	r2, #573	; 0x23d
 800d0d2:	4952      	ldr	r1, [pc, #328]	; (800d21c <tcp_abandon+0x160>)
 800d0d4:	4852      	ldr	r0, [pc, #328]	; (800d220 <tcp_abandon+0x164>)
 800d0d6:	f00a f945 	bl	8017364 <iprintf>
 800d0da:	e099      	b.n	800d210 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7d1b      	ldrb	r3, [r3, #20]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d106      	bne.n	800d0f2 <tcp_abandon+0x36>
 800d0e4:	4b4c      	ldr	r3, [pc, #304]	; (800d218 <tcp_abandon+0x15c>)
 800d0e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d0ea:	494e      	ldr	r1, [pc, #312]	; (800d224 <tcp_abandon+0x168>)
 800d0ec:	484c      	ldr	r0, [pc, #304]	; (800d220 <tcp_abandon+0x164>)
 800d0ee:	f00a f939 	bl	8017364 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7d1b      	ldrb	r3, [r3, #20]
 800d0f6:	2b0a      	cmp	r3, #10
 800d0f8:	d107      	bne.n	800d10a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d0fa:	6879      	ldr	r1, [r7, #4]
 800d0fc:	484a      	ldr	r0, [pc, #296]	; (800d228 <tcp_abandon+0x16c>)
 800d0fe:	f000 ffc3 	bl	800e088 <tcp_pcb_remove>
    tcp_free(pcb);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff fdb0 	bl	800cc68 <tcp_free>
 800d108:	e082      	b.n	800d210 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d116:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d124:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	7d1b      	ldrb	r3, [r3, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d126      	bne.n	800d182 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8adb      	ldrh	r3, [r3, #22]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d02e      	beq.n	800d19a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d13c:	4b3b      	ldr	r3, [pc, #236]	; (800d22c <tcp_abandon+0x170>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	429a      	cmp	r2, r3
 800d144:	d105      	bne.n	800d152 <tcp_abandon+0x96>
 800d146:	4b39      	ldr	r3, [pc, #228]	; (800d22c <tcp_abandon+0x170>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	4a37      	ldr	r2, [pc, #220]	; (800d22c <tcp_abandon+0x170>)
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	e013      	b.n	800d17a <tcp_abandon+0xbe>
 800d152:	4b36      	ldr	r3, [pc, #216]	; (800d22c <tcp_abandon+0x170>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	61fb      	str	r3, [r7, #28]
 800d158:	e00c      	b.n	800d174 <tcp_abandon+0xb8>
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	429a      	cmp	r2, r3
 800d162:	d104      	bne.n	800d16e <tcp_abandon+0xb2>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68da      	ldr	r2, [r3, #12]
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	60da      	str	r2, [r3, #12]
 800d16c:	e005      	b.n	800d17a <tcp_abandon+0xbe>
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1ef      	bne.n	800d15a <tcp_abandon+0x9e>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	60da      	str	r2, [r3, #12]
 800d180:	e00b      	b.n	800d19a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	8adb      	ldrh	r3, [r3, #22]
 800d18a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	4828      	ldr	r0, [pc, #160]	; (800d230 <tcp_abandon+0x174>)
 800d190:	f000 ff7a 	bl	800e088 <tcp_pcb_remove>
 800d194:	4b27      	ldr	r3, [pc, #156]	; (800d234 <tcp_abandon+0x178>)
 800d196:	2201      	movs	r2, #1
 800d198:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d004      	beq.n	800d1ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 fd1c 	bl	800dbe4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d004      	beq.n	800d1be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fd13 	bl	800dbe4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d004      	beq.n	800d1d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 fd0a 	bl	800dbe4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00e      	beq.n	800d1f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	8b12      	ldrh	r2, [r2, #24]
 800d1e0:	9202      	str	r2, [sp, #8]
 800d1e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1e4:	9201      	str	r2, [sp, #4]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	69b9      	ldr	r1, [r7, #24]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f004 fcbe 	bl	8011b70 <tcp_rst>
    }
    last_state = pcb->state;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7d1b      	ldrb	r3, [r3, #20]
 800d1f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff fd34 	bl	800cc68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d004      	beq.n	800d210 <tcp_abandon+0x154>
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f06f 010c 	mvn.w	r1, #12
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	4798      	blx	r3
  }
}
 800d210:	3728      	adds	r7, #40	; 0x28
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	08018e3c 	.word	0x08018e3c
 800d21c:	08018f80 	.word	0x08018f80
 800d220:	08018e80 	.word	0x08018e80
 800d224:	08018f9c 	.word	0x08018f9c
 800d228:	2000bba8 	.word	0x2000bba8
 800d22c:	2000bba4 	.word	0x2000bba4
 800d230:	2000bb98 	.word	0x2000bb98
 800d234:	2000bb94 	.word	0x2000bb94

0800d238 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d240:	2101      	movs	r1, #1
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff ff3a 	bl	800d0bc <tcp_abandon>
}
 800d248:	bf00      	nop
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <tcp_update_rcv_ann_wnd+0x1c>
 800d25e:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800d260:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d264:	4924      	ldr	r1, [pc, #144]	; (800d2f8 <tcp_update_rcv_ann_wnd+0xa8>)
 800d266:	4825      	ldr	r0, [pc, #148]	; (800d2fc <tcp_update_rcv_ann_wnd+0xac>)
 800d268:	f00a f87c 	bl	8017364 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d274:	4413      	add	r3, r2
 800d276:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d280:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d284:	bf28      	it	cs
 800d286:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d28a:	b292      	uxth	r2, r2
 800d28c:	4413      	add	r3, r2
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	db08      	blt.n	800d2a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	e020      	b.n	800d2ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	dd03      	ble.n	800d2be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d2bc:	e014      	b.n	800d2e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2d0:	d306      	bcc.n	800d2e0 <tcp_update_rcv_ann_wnd+0x90>
 800d2d2:	4b08      	ldr	r3, [pc, #32]	; (800d2f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800d2d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d2d8:	4909      	ldr	r1, [pc, #36]	; (800d300 <tcp_update_rcv_ann_wnd+0xb0>)
 800d2da:	4808      	ldr	r0, [pc, #32]	; (800d2fc <tcp_update_rcv_ann_wnd+0xac>)
 800d2dc:	f00a f842 	bl	8017364 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d2e8:	2300      	movs	r3, #0
  }
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	08018e3c 	.word	0x08018e3c
 800d2f8:	08019098 	.word	0x08019098
 800d2fc:	08018e80 	.word	0x08018e80
 800d300:	080190bc 	.word	0x080190bc

0800d304 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d107      	bne.n	800d326 <tcp_recved+0x22>
 800d316:	4b1f      	ldr	r3, [pc, #124]	; (800d394 <tcp_recved+0x90>)
 800d318:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d31c:	491e      	ldr	r1, [pc, #120]	; (800d398 <tcp_recved+0x94>)
 800d31e:	481f      	ldr	r0, [pc, #124]	; (800d39c <tcp_recved+0x98>)
 800d320:	f00a f820 	bl	8017364 <iprintf>
 800d324:	e032      	b.n	800d38c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	7d1b      	ldrb	r3, [r3, #20]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d106      	bne.n	800d33c <tcp_recved+0x38>
 800d32e:	4b19      	ldr	r3, [pc, #100]	; (800d394 <tcp_recved+0x90>)
 800d330:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d334:	491a      	ldr	r1, [pc, #104]	; (800d3a0 <tcp_recved+0x9c>)
 800d336:	4819      	ldr	r0, [pc, #100]	; (800d39c <tcp_recved+0x98>)
 800d338:	f00a f814 	bl	8017364 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d340:	887b      	ldrh	r3, [r7, #2]
 800d342:	4413      	add	r3, r2
 800d344:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d346:	89fb      	ldrh	r3, [r7, #14]
 800d348:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d34c:	d804      	bhi.n	800d358 <tcp_recved+0x54>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d352:	89fa      	ldrh	r2, [r7, #14]
 800d354:	429a      	cmp	r2, r3
 800d356:	d204      	bcs.n	800d362 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d35e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d360:	e002      	b.n	800d368 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	89fa      	ldrh	r2, [r7, #14]
 800d366:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff ff71 	bl	800d250 <tcp_update_rcv_ann_wnd>
 800d36e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d376:	d309      	bcc.n	800d38c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	8b5b      	ldrh	r3, [r3, #26]
 800d37c:	f043 0302 	orr.w	r3, r3, #2
 800d380:	b29a      	uxth	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f003 fe3e 	bl	8011008 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	08018e3c 	.word	0x08018e3c
 800d398:	080190d8 	.word	0x080190d8
 800d39c:	08018e80 	.word	0x08018e80
 800d3a0:	080190f0 	.word	0x080190f0

0800d3a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d3a4:	b5b0      	push	{r4, r5, r7, lr}
 800d3a6:	b090      	sub	sp, #64	; 0x40
 800d3a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d3b0:	4b94      	ldr	r3, [pc, #592]	; (800d604 <tcp_slowtmr+0x260>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	4a93      	ldr	r2, [pc, #588]	; (800d604 <tcp_slowtmr+0x260>)
 800d3b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d3ba:	4b93      	ldr	r3, [pc, #588]	; (800d608 <tcp_slowtmr+0x264>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	4b91      	ldr	r3, [pc, #580]	; (800d608 <tcp_slowtmr+0x264>)
 800d3c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d3ca:	4b90      	ldr	r3, [pc, #576]	; (800d60c <tcp_slowtmr+0x268>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d3d0:	e29f      	b.n	800d912 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	7d1b      	ldrb	r3, [r3, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <tcp_slowtmr+0x44>
 800d3da:	4b8d      	ldr	r3, [pc, #564]	; (800d610 <tcp_slowtmr+0x26c>)
 800d3dc:	f240 42be 	movw	r2, #1214	; 0x4be
 800d3e0:	498c      	ldr	r1, [pc, #560]	; (800d614 <tcp_slowtmr+0x270>)
 800d3e2:	488d      	ldr	r0, [pc, #564]	; (800d618 <tcp_slowtmr+0x274>)
 800d3e4:	f009 ffbe 	bl	8017364 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	7d1b      	ldrb	r3, [r3, #20]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d106      	bne.n	800d3fe <tcp_slowtmr+0x5a>
 800d3f0:	4b87      	ldr	r3, [pc, #540]	; (800d610 <tcp_slowtmr+0x26c>)
 800d3f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d3f6:	4989      	ldr	r1, [pc, #548]	; (800d61c <tcp_slowtmr+0x278>)
 800d3f8:	4887      	ldr	r0, [pc, #540]	; (800d618 <tcp_slowtmr+0x274>)
 800d3fa:	f009 ffb3 	bl	8017364 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	7d1b      	ldrb	r3, [r3, #20]
 800d402:	2b0a      	cmp	r3, #10
 800d404:	d106      	bne.n	800d414 <tcp_slowtmr+0x70>
 800d406:	4b82      	ldr	r3, [pc, #520]	; (800d610 <tcp_slowtmr+0x26c>)
 800d408:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d40c:	4984      	ldr	r1, [pc, #528]	; (800d620 <tcp_slowtmr+0x27c>)
 800d40e:	4882      	ldr	r0, [pc, #520]	; (800d618 <tcp_slowtmr+0x274>)
 800d410:	f009 ffa8 	bl	8017364 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	7f9a      	ldrb	r2, [r3, #30]
 800d418:	4b7b      	ldr	r3, [pc, #492]	; (800d608 <tcp_slowtmr+0x264>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d105      	bne.n	800d42c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d42a:	e272      	b.n	800d912 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d42c:	4b76      	ldr	r3, [pc, #472]	; (800d608 <tcp_slowtmr+0x264>)
 800d42e:	781a      	ldrb	r2, [r3, #0]
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d434:	2300      	movs	r3, #0
 800d436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	7d1b      	ldrb	r3, [r3, #20]
 800d444:	2b02      	cmp	r3, #2
 800d446:	d10a      	bne.n	800d45e <tcp_slowtmr+0xba>
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d44e:	2b05      	cmp	r3, #5
 800d450:	d905      	bls.n	800d45e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d456:	3301      	adds	r3, #1
 800d458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d45c:	e11e      	b.n	800d69c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d464:	2b0b      	cmp	r3, #11
 800d466:	d905      	bls.n	800d474 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d46c:	3301      	adds	r3, #1
 800d46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d472:	e113      	b.n	800d69c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d075      	beq.n	800d56a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d482:	2b00      	cmp	r3, #0
 800d484:	d006      	beq.n	800d494 <tcp_slowtmr+0xf0>
 800d486:	4b62      	ldr	r3, [pc, #392]	; (800d610 <tcp_slowtmr+0x26c>)
 800d488:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d48c:	4965      	ldr	r1, [pc, #404]	; (800d624 <tcp_slowtmr+0x280>)
 800d48e:	4862      	ldr	r0, [pc, #392]	; (800d618 <tcp_slowtmr+0x274>)
 800d490:	f009 ff68 	bl	8017364 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d106      	bne.n	800d4aa <tcp_slowtmr+0x106>
 800d49c:	4b5c      	ldr	r3, [pc, #368]	; (800d610 <tcp_slowtmr+0x26c>)
 800d49e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d4a2:	4961      	ldr	r1, [pc, #388]	; (800d628 <tcp_slowtmr+0x284>)
 800d4a4:	485c      	ldr	r0, [pc, #368]	; (800d618 <tcp_slowtmr+0x274>)
 800d4a6:	f009 ff5d 	bl	8017364 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d4b0:	2b0b      	cmp	r3, #11
 800d4b2:	d905      	bls.n	800d4c0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4be:	e0ed      	b.n	800d69c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	4a58      	ldr	r2, [pc, #352]	; (800d62c <tcp_slowtmr+0x288>)
 800d4ca:	5cd3      	ldrb	r3, [r2, r3]
 800d4cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4d4:	7c7a      	ldrb	r2, [r7, #17]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d907      	bls.n	800d4ea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4f0:	7c7a      	ldrb	r2, [r7, #17]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	f200 80d2 	bhi.w	800d69c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d502:	2b00      	cmp	r3, #0
 800d504:	d108      	bne.n	800d518 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d508:	f004 fc26 	bl	8011d58 <tcp_zero_window_probe>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d014      	beq.n	800d53c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d512:	2300      	movs	r3, #0
 800d514:	623b      	str	r3, [r7, #32]
 800d516:	e011      	b.n	800d53c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d51e:	4619      	mov	r1, r3
 800d520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d522:	f003 faeb 	bl	8010afc <tcp_split_unsent_seg>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d107      	bne.n	800d53c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d52e:	f003 fd6b 	bl	8011008 <tcp_output>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d101      	bne.n	800d53c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f000 80ac 	beq.w	800d69c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	2200      	movs	r2, #0
 800d548:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d552:	2b06      	cmp	r3, #6
 800d554:	f200 80a2 	bhi.w	800d69c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d55e:	3301      	adds	r3, #1
 800d560:	b2da      	uxtb	r2, r3
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d568:	e098      	b.n	800d69c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d570:	2b00      	cmp	r3, #0
 800d572:	db0f      	blt.n	800d594 <tcp_slowtmr+0x1f0>
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d57a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d57e:	4293      	cmp	r3, r2
 800d580:	d008      	beq.n	800d594 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d588:	b29b      	uxth	r3, r3
 800d58a:	3301      	adds	r3, #1
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	b21a      	sxth	r2, r3
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	db7b      	blt.n	800d69c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d5a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5a6:	f004 f821 	bl	80115ec <tcp_rexmit_rto_prepare>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d007      	beq.n	800d5c0 <tcp_slowtmr+0x21c>
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d171      	bne.n	800d69c <tcp_slowtmr+0x2f8>
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d06d      	beq.n	800d69c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c2:	7d1b      	ldrb	r3, [r3, #20]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d03a      	beq.n	800d63e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5ce:	2b0c      	cmp	r3, #12
 800d5d0:	bf28      	it	cs
 800d5d2:	230c      	movcs	r3, #12
 800d5d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d5dc:	10db      	asrs	r3, r3, #3
 800d5de:	b21b      	sxth	r3, r3
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d5e8:	4413      	add	r3, r2
 800d5ea:	7efa      	ldrb	r2, [r7, #27]
 800d5ec:	4910      	ldr	r1, [pc, #64]	; (800d630 <tcp_slowtmr+0x28c>)
 800d5ee:	5c8a      	ldrb	r2, [r1, r2]
 800d5f0:	4093      	lsls	r3, r2
 800d5f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	dc1a      	bgt.n	800d634 <tcp_slowtmr+0x290>
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	b21a      	sxth	r2, r3
 800d602:	e019      	b.n	800d638 <tcp_slowtmr+0x294>
 800d604:	2000bb9c 	.word	0x2000bb9c
 800d608:	20004ace 	.word	0x20004ace
 800d60c:	2000bb98 	.word	0x2000bb98
 800d610:	08018e3c 	.word	0x08018e3c
 800d614:	08019180 	.word	0x08019180
 800d618:	08018e80 	.word	0x08018e80
 800d61c:	080191ac 	.word	0x080191ac
 800d620:	080191d8 	.word	0x080191d8
 800d624:	08019208 	.word	0x08019208
 800d628:	0801923c 	.word	0x0801923c
 800d62c:	0801b334 	.word	0x0801b334
 800d630:	0801b324 	.word	0x0801b324
 800d634:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	2200      	movs	r2, #0
 800d642:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d650:	4293      	cmp	r3, r2
 800d652:	bf28      	it	cs
 800d654:	4613      	movcs	r3, r2
 800d656:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d658:	8a7b      	ldrh	r3, [r7, #18]
 800d65a:	085b      	lsrs	r3, r3, #1
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	b29b      	uxth	r3, r3
 800d672:	429a      	cmp	r2, r3
 800d674:	d206      	bcs.n	800d684 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d67a:	005b      	lsls	r3, r3, #1
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d680:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d686:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d690:	2200      	movs	r2, #0
 800d692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d698:	f004 f818 	bl	80116cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	7d1b      	ldrb	r3, [r3, #20]
 800d6a0:	2b06      	cmp	r3, #6
 800d6a2:	d111      	bne.n	800d6c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	8b5b      	ldrh	r3, [r3, #26]
 800d6a8:	f003 0310 	and.w	r3, r3, #16
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00b      	beq.n	800d6c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6b0:	4b9d      	ldr	r3, [pc, #628]	; (800d928 <tcp_slowtmr+0x584>)
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	6a1b      	ldr	r3, [r3, #32]
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	2b28      	cmp	r3, #40	; 0x28
 800d6bc:	d904      	bls.n	800d6c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d6be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ca:	7a5b      	ldrb	r3, [r3, #9]
 800d6cc:	f003 0308 	and.w	r3, r3, #8
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d04c      	beq.n	800d76e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	d003      	beq.n	800d6e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d6e0:	2b07      	cmp	r3, #7
 800d6e2:	d144      	bne.n	800d76e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6e4:	4b90      	ldr	r3, [pc, #576]	; (800d928 <tcp_slowtmr+0x584>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ea:	6a1b      	ldr	r3, [r3, #32]
 800d6ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6f4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d6f8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d6fc:	498b      	ldr	r1, [pc, #556]	; (800d92c <tcp_slowtmr+0x588>)
 800d6fe:	fba1 1303 	umull	r1, r3, r1, r3
 800d702:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d704:	429a      	cmp	r2, r3
 800d706:	d90a      	bls.n	800d71e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d70c:	3301      	adds	r3, #1
 800d70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d716:	3301      	adds	r3, #1
 800d718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d71c:	e027      	b.n	800d76e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d71e:	4b82      	ldr	r3, [pc, #520]	; (800d928 <tcp_slowtmr+0x584>)
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d734:	4618      	mov	r0, r3
 800d736:	4b7e      	ldr	r3, [pc, #504]	; (800d930 <tcp_slowtmr+0x58c>)
 800d738:	fb03 f300 	mul.w	r3, r3, r0
 800d73c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d73e:	497b      	ldr	r1, [pc, #492]	; (800d92c <tcp_slowtmr+0x588>)
 800d740:	fba1 1303 	umull	r1, r3, r1, r3
 800d744:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d746:	429a      	cmp	r2, r3
 800d748:	d911      	bls.n	800d76e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d74a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d74c:	f004 fac4 	bl	8011cd8 <tcp_keepalive>
 800d750:	4603      	mov	r3, r0
 800d752:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d756:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d107      	bne.n	800d76e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d764:	3301      	adds	r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d772:	2b00      	cmp	r3, #0
 800d774:	d011      	beq.n	800d79a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d776:	4b6c      	ldr	r3, [pc, #432]	; (800d928 <tcp_slowtmr+0x584>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d782:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d786:	4619      	mov	r1, r3
 800d788:	460b      	mov	r3, r1
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	440b      	add	r3, r1
 800d78e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d790:	429a      	cmp	r2, r3
 800d792:	d302      	bcc.n	800d79a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d796:	f000 fddb 	bl	800e350 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	7d1b      	ldrb	r3, [r3, #20]
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d10b      	bne.n	800d7ba <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7a2:	4b61      	ldr	r3, [pc, #388]	; (800d928 <tcp_slowtmr+0x584>)
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	6a1b      	ldr	r3, [r3, #32]
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	2b28      	cmp	r3, #40	; 0x28
 800d7ae:	d904      	bls.n	800d7ba <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	7d1b      	ldrb	r3, [r3, #20]
 800d7be:	2b09      	cmp	r3, #9
 800d7c0:	d10b      	bne.n	800d7da <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d7c2:	4b59      	ldr	r3, [pc, #356]	; (800d928 <tcp_slowtmr+0x584>)
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	2bf0      	cmp	r3, #240	; 0xf0
 800d7ce:	d904      	bls.n	800d7da <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d7da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d060      	beq.n	800d8a4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7e8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d7ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ec:	f000 fbfc 	bl	800dfe8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d010      	beq.n	800d818 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d7f6:	4b4f      	ldr	r3, [pc, #316]	; (800d934 <tcp_slowtmr+0x590>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d106      	bne.n	800d80e <tcp_slowtmr+0x46a>
 800d800:	4b4d      	ldr	r3, [pc, #308]	; (800d938 <tcp_slowtmr+0x594>)
 800d802:	f240 526d 	movw	r2, #1389	; 0x56d
 800d806:	494d      	ldr	r1, [pc, #308]	; (800d93c <tcp_slowtmr+0x598>)
 800d808:	484d      	ldr	r0, [pc, #308]	; (800d940 <tcp_slowtmr+0x59c>)
 800d80a:	f009 fdab 	bl	8017364 <iprintf>
        prev->next = pcb->next;
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	68da      	ldr	r2, [r3, #12]
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	60da      	str	r2, [r3, #12]
 800d816:	e00f      	b.n	800d838 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d818:	4b46      	ldr	r3, [pc, #280]	; (800d934 <tcp_slowtmr+0x590>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d81e:	429a      	cmp	r2, r3
 800d820:	d006      	beq.n	800d830 <tcp_slowtmr+0x48c>
 800d822:	4b45      	ldr	r3, [pc, #276]	; (800d938 <tcp_slowtmr+0x594>)
 800d824:	f240 5271 	movw	r2, #1393	; 0x571
 800d828:	4946      	ldr	r1, [pc, #280]	; (800d944 <tcp_slowtmr+0x5a0>)
 800d82a:	4845      	ldr	r0, [pc, #276]	; (800d940 <tcp_slowtmr+0x59c>)
 800d82c:	f009 fd9a 	bl	8017364 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	4a3f      	ldr	r2, [pc, #252]	; (800d934 <tcp_slowtmr+0x590>)
 800d836:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d013      	beq.n	800d868 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d848:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	3304      	adds	r3, #4
 800d84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d850:	8ad2      	ldrh	r2, [r2, #22]
 800d852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d854:	8b09      	ldrh	r1, [r1, #24]
 800d856:	9102      	str	r1, [sp, #8]
 800d858:	9201      	str	r2, [sp, #4]
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	462b      	mov	r3, r5
 800d85e:	4622      	mov	r2, r4
 800d860:	4601      	mov	r1, r0
 800d862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d864:	f004 f984 	bl	8011b70 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	7d1b      	ldrb	r3, [r3, #20]
 800d872:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d87e:	6838      	ldr	r0, [r7, #0]
 800d880:	f7ff f9f2 	bl	800cc68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d884:	4b30      	ldr	r3, [pc, #192]	; (800d948 <tcp_slowtmr+0x5a4>)
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d004      	beq.n	800d89a <tcp_slowtmr+0x4f6>
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f06f 010c 	mvn.w	r1, #12
 800d896:	68b8      	ldr	r0, [r7, #8]
 800d898:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d89a:	4b2b      	ldr	r3, [pc, #172]	; (800d948 <tcp_slowtmr+0x5a4>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d037      	beq.n	800d912 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d8a2:	e590      	b.n	800d3c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	7f1b      	ldrb	r3, [r3, #28]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8bc:	7f1a      	ldrb	r2, [r3, #28]
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	7f5b      	ldrb	r3, [r3, #29]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d325      	bcc.n	800d912 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d8cc:	4b1e      	ldr	r3, [pc, #120]	; (800d948 <tcp_slowtmr+0x5a4>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00b      	beq.n	800d8f4 <tcp_slowtmr+0x550>
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e4:	6912      	ldr	r2, [r2, #16]
 800d8e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	4798      	blx	r3
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d8f2:	e002      	b.n	800d8fa <tcp_slowtmr+0x556>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d8fa:	4b13      	ldr	r3, [pc, #76]	; (800d948 <tcp_slowtmr+0x5a4>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d000      	beq.n	800d904 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d902:	e560      	b.n	800d3c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d904:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d102      	bne.n	800d912 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d90c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d90e:	f003 fb7b 	bl	8011008 <tcp_output>
  while (pcb != NULL) {
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	2b00      	cmp	r3, #0
 800d916:	f47f ad5c 	bne.w	800d3d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d91e:	4b0b      	ldr	r3, [pc, #44]	; (800d94c <tcp_slowtmr+0x5a8>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d924:	e067      	b.n	800d9f6 <tcp_slowtmr+0x652>
 800d926:	bf00      	nop
 800d928:	2000bb9c 	.word	0x2000bb9c
 800d92c:	10624dd3 	.word	0x10624dd3
 800d930:	000124f8 	.word	0x000124f8
 800d934:	2000bb98 	.word	0x2000bb98
 800d938:	08018e3c 	.word	0x08018e3c
 800d93c:	08019274 	.word	0x08019274
 800d940:	08018e80 	.word	0x08018e80
 800d944:	080192a0 	.word	0x080192a0
 800d948:	2000bb94 	.word	0x2000bb94
 800d94c:	2000bba8 	.word	0x2000bba8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d952:	7d1b      	ldrb	r3, [r3, #20]
 800d954:	2b0a      	cmp	r3, #10
 800d956:	d006      	beq.n	800d966 <tcp_slowtmr+0x5c2>
 800d958:	4b2b      	ldr	r3, [pc, #172]	; (800da08 <tcp_slowtmr+0x664>)
 800d95a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d95e:	492b      	ldr	r1, [pc, #172]	; (800da0c <tcp_slowtmr+0x668>)
 800d960:	482b      	ldr	r0, [pc, #172]	; (800da10 <tcp_slowtmr+0x66c>)
 800d962:	f009 fcff 	bl	8017364 <iprintf>
    pcb_remove = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d96c:	4b29      	ldr	r3, [pc, #164]	; (800da14 <tcp_slowtmr+0x670>)
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	6a1b      	ldr	r3, [r3, #32]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	2bf0      	cmp	r3, #240	; 0xf0
 800d978:	d904      	bls.n	800d984 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d97e:	3301      	adds	r3, #1
 800d980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d02f      	beq.n	800d9ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d98e:	f000 fb2b 	bl	800dfe8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d994:	2b00      	cmp	r3, #0
 800d996:	d010      	beq.n	800d9ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d998:	4b1f      	ldr	r3, [pc, #124]	; (800da18 <tcp_slowtmr+0x674>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d106      	bne.n	800d9b0 <tcp_slowtmr+0x60c>
 800d9a2:	4b19      	ldr	r3, [pc, #100]	; (800da08 <tcp_slowtmr+0x664>)
 800d9a4:	f240 52af 	movw	r2, #1455	; 0x5af
 800d9a8:	491c      	ldr	r1, [pc, #112]	; (800da1c <tcp_slowtmr+0x678>)
 800d9aa:	4819      	ldr	r0, [pc, #100]	; (800da10 <tcp_slowtmr+0x66c>)
 800d9ac:	f009 fcda 	bl	8017364 <iprintf>
        prev->next = pcb->next;
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	60da      	str	r2, [r3, #12]
 800d9b8:	e00f      	b.n	800d9da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d9ba:	4b17      	ldr	r3, [pc, #92]	; (800da18 <tcp_slowtmr+0x674>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d006      	beq.n	800d9d2 <tcp_slowtmr+0x62e>
 800d9c4:	4b10      	ldr	r3, [pc, #64]	; (800da08 <tcp_slowtmr+0x664>)
 800d9c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d9ca:	4915      	ldr	r1, [pc, #84]	; (800da20 <tcp_slowtmr+0x67c>)
 800d9cc:	4810      	ldr	r0, [pc, #64]	; (800da10 <tcp_slowtmr+0x66c>)
 800d9ce:	f009 fcc9 	bl	8017364 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	4a10      	ldr	r2, [pc, #64]	; (800da18 <tcp_slowtmr+0x674>)
 800d9d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d9e4:	69f8      	ldr	r0, [r7, #28]
 800d9e6:	f7ff f93f 	bl	800cc68 <tcp_free>
 800d9ea:	e004      	b.n	800d9f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1a9      	bne.n	800d950 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d9fc:	bf00      	nop
 800d9fe:	bf00      	nop
 800da00:	3730      	adds	r7, #48	; 0x30
 800da02:	46bd      	mov	sp, r7
 800da04:	bdb0      	pop	{r4, r5, r7, pc}
 800da06:	bf00      	nop
 800da08:	08018e3c 	.word	0x08018e3c
 800da0c:	080192cc 	.word	0x080192cc
 800da10:	08018e80 	.word	0x08018e80
 800da14:	2000bb9c 	.word	0x2000bb9c
 800da18:	2000bba8 	.word	0x2000bba8
 800da1c:	080192fc 	.word	0x080192fc
 800da20:	08019324 	.word	0x08019324

0800da24 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da2a:	4b2d      	ldr	r3, [pc, #180]	; (800dae0 <tcp_fasttmr+0xbc>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4b2b      	ldr	r3, [pc, #172]	; (800dae0 <tcp_fasttmr+0xbc>)
 800da34:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800da36:	4b2b      	ldr	r3, [pc, #172]	; (800dae4 <tcp_fasttmr+0xc0>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da3c:	e048      	b.n	800dad0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7f9a      	ldrb	r2, [r3, #30]
 800da42:	4b27      	ldr	r3, [pc, #156]	; (800dae0 <tcp_fasttmr+0xbc>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d03f      	beq.n	800daca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800da4a:	4b25      	ldr	r3, [pc, #148]	; (800dae0 <tcp_fasttmr+0xbc>)
 800da4c:	781a      	ldrb	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	8b5b      	ldrh	r3, [r3, #26]
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d010      	beq.n	800da80 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	8b5b      	ldrh	r3, [r3, #26]
 800da62:	f043 0302 	orr.w	r3, r3, #2
 800da66:	b29a      	uxth	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f003 facb 	bl	8011008 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8b5b      	ldrh	r3, [r3, #26]
 800da76:	f023 0303 	bic.w	r3, r3, #3
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	8b5b      	ldrh	r3, [r3, #26]
 800da84:	f003 0308 	and.w	r3, r3, #8
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d009      	beq.n	800daa0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	8b5b      	ldrh	r3, [r3, #26]
 800da90:	f023 0308 	bic.w	r3, r3, #8
 800da94:	b29a      	uxth	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff fa78 	bl	800cf90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800daae:	4b0e      	ldr	r3, [pc, #56]	; (800dae8 <tcp_fasttmr+0xc4>)
 800dab0:	2200      	movs	r2, #0
 800dab2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f819 	bl	800daec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800daba:	4b0b      	ldr	r3, [pc, #44]	; (800dae8 <tcp_fasttmr+0xc4>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d000      	beq.n	800dac4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dac2:	e7b8      	b.n	800da36 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	607b      	str	r3, [r7, #4]
 800dac8:	e002      	b.n	800dad0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1b3      	bne.n	800da3e <tcp_fasttmr+0x1a>
    }
  }
}
 800dad6:	bf00      	nop
 800dad8:	bf00      	nop
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	20004ace 	.word	0x20004ace
 800dae4:	2000bb98 	.word	0x2000bb98
 800dae8:	2000bb94 	.word	0x2000bb94

0800daec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800daec:	b590      	push	{r4, r7, lr}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d109      	bne.n	800db0e <tcp_process_refused_data+0x22>
 800dafa:	4b37      	ldr	r3, [pc, #220]	; (800dbd8 <tcp_process_refused_data+0xec>)
 800dafc:	f240 6209 	movw	r2, #1545	; 0x609
 800db00:	4936      	ldr	r1, [pc, #216]	; (800dbdc <tcp_process_refused_data+0xf0>)
 800db02:	4837      	ldr	r0, [pc, #220]	; (800dbe0 <tcp_process_refused_data+0xf4>)
 800db04:	f009 fc2e 	bl	8017364 <iprintf>
 800db08:	f06f 030f 	mvn.w	r3, #15
 800db0c:	e060      	b.n	800dbd0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db12:	7b5b      	ldrb	r3, [r3, #13]
 800db14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d00b      	beq.n	800db44 <tcp_process_refused_data+0x58>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6918      	ldr	r0, [r3, #16]
 800db36:	2300      	movs	r3, #0
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	6879      	ldr	r1, [r7, #4]
 800db3c:	47a0      	blx	r4
 800db3e:	4603      	mov	r3, r0
 800db40:	73fb      	strb	r3, [r7, #15]
 800db42:	e007      	b.n	800db54 <tcp_process_refused_data+0x68>
 800db44:	2300      	movs	r3, #0
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	6879      	ldr	r1, [r7, #4]
 800db4a:	2000      	movs	r0, #0
 800db4c:	f000 f8a4 	bl	800dc98 <tcp_recv_null>
 800db50:	4603      	mov	r3, r0
 800db52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d12a      	bne.n	800dbb2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800db5c:	7bbb      	ldrb	r3, [r7, #14]
 800db5e:	f003 0320 	and.w	r3, r3, #32
 800db62:	2b00      	cmp	r3, #0
 800db64:	d033      	beq.n	800dbce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db6e:	d005      	beq.n	800db7c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db74:	3301      	adds	r3, #1
 800db76:	b29a      	uxth	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00b      	beq.n	800db9e <tcp_process_refused_data+0xb2>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6918      	ldr	r0, [r3, #16]
 800db90:	2300      	movs	r3, #0
 800db92:	2200      	movs	r2, #0
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	47a0      	blx	r4
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
 800db9c:	e001      	b.n	800dba2 <tcp_process_refused_data+0xb6>
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba6:	f113 0f0d 	cmn.w	r3, #13
 800dbaa:	d110      	bne.n	800dbce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dbac:	f06f 030c 	mvn.w	r3, #12
 800dbb0:	e00e      	b.n	800dbd0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbb6:	f113 0f0d 	cmn.w	r3, #13
 800dbba:	d102      	bne.n	800dbc2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dbbc:	f06f 030c 	mvn.w	r3, #12
 800dbc0:	e006      	b.n	800dbd0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dbc8:	f06f 0304 	mvn.w	r3, #4
 800dbcc:	e000      	b.n	800dbd0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3714      	adds	r7, #20
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd90      	pop	{r4, r7, pc}
 800dbd8:	08018e3c 	.word	0x08018e3c
 800dbdc:	0801934c 	.word	0x0801934c
 800dbe0:	08018e80 	.word	0x08018e80

0800dbe4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dbec:	e007      	b.n	800dbfe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 f80a 	bl	800dc0e <tcp_seg_free>
    seg = next;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1f4      	bne.n	800dbee <tcp_segs_free+0xa>
  }
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00c      	beq.n	800dc36 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fe fd61 	bl	800c6f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc2e:	6879      	ldr	r1, [r7, #4]
 800dc30:	2003      	movs	r0, #3
 800dc32:	f7fd fead 	bl	800b990 <memp_free>
  }
}
 800dc36:	bf00      	nop
 800dc38:	3708      	adds	r7, #8
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
	...

0800dc40 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <tcp_seg_copy+0x1c>
 800dc4e:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <tcp_seg_copy+0x4c>)
 800dc50:	f240 6282 	movw	r2, #1666	; 0x682
 800dc54:	490e      	ldr	r1, [pc, #56]	; (800dc90 <tcp_seg_copy+0x50>)
 800dc56:	480f      	ldr	r0, [pc, #60]	; (800dc94 <tcp_seg_copy+0x54>)
 800dc58:	f009 fb84 	bl	8017364 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dc5c:	2003      	movs	r0, #3
 800dc5e:	f7fd fe45 	bl	800b8ec <memp_malloc>
 800dc62:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <tcp_seg_copy+0x2e>
    return NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e00a      	b.n	800dc84 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dc6e:	2210      	movs	r2, #16
 800dc70:	6879      	ldr	r1, [r7, #4]
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f009 fb05 	bl	8017282 <memcpy>
  pbuf_ref(cseg->p);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fe fddd 	bl	800c83c <pbuf_ref>
  return cseg;
 800dc82:	68fb      	ldr	r3, [r7, #12]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	08018e3c 	.word	0x08018e3c
 800dc90:	08019390 	.word	0x08019390
 800dc94:	08018e80 	.word	0x08018e80

0800dc98 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d109      	bne.n	800dcc0 <tcp_recv_null+0x28>
 800dcac:	4b12      	ldr	r3, [pc, #72]	; (800dcf8 <tcp_recv_null+0x60>)
 800dcae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dcb2:	4912      	ldr	r1, [pc, #72]	; (800dcfc <tcp_recv_null+0x64>)
 800dcb4:	4812      	ldr	r0, [pc, #72]	; (800dd00 <tcp_recv_null+0x68>)
 800dcb6:	f009 fb55 	bl	8017364 <iprintf>
 800dcba:	f06f 030f 	mvn.w	r3, #15
 800dcbe:	e016      	b.n	800dcee <tcp_recv_null+0x56>

  if (p != NULL) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d009      	beq.n	800dcda <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	891b      	ldrh	r3, [r3, #8]
 800dcca:	4619      	mov	r1, r3
 800dccc:	68b8      	ldr	r0, [r7, #8]
 800dcce:	f7ff fb19 	bl	800d304 <tcp_recved>
    pbuf_free(p);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7fe fd0c 	bl	800c6f0 <pbuf_free>
 800dcd8:	e008      	b.n	800dcec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dcda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d104      	bne.n	800dcec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dce2:	68b8      	ldr	r0, [r7, #8]
 800dce4:	f7ff f9be 	bl	800d064 <tcp_close>
 800dce8:	4603      	mov	r3, r0
 800dcea:	e000      	b.n	800dcee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	08018e3c 	.word	0x08018e3c
 800dcfc:	080193ac 	.word	0x080193ac
 800dd00:	08018e80 	.word	0x08018e80

0800dd04 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	db01      	blt.n	800dd1a <tcp_kill_prio+0x16>
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	e000      	b.n	800dd1c <tcp_kill_prio+0x18>
 800dd1a:	237f      	movs	r3, #127	; 0x7f
 800dd1c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dd1e:	7afb      	ldrb	r3, [r7, #11]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d034      	beq.n	800dd8e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dd24:	7afb      	ldrb	r3, [r7, #11]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd32:	4b19      	ldr	r3, [pc, #100]	; (800dd98 <tcp_kill_prio+0x94>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	617b      	str	r3, [r7, #20]
 800dd38:	e01f      	b.n	800dd7a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	7d5b      	ldrb	r3, [r3, #21]
 800dd3e:	7afa      	ldrb	r2, [r7, #11]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d80c      	bhi.n	800dd5e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dd48:	7afa      	ldrb	r2, [r7, #11]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d112      	bne.n	800dd74 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd4e:	4b13      	ldr	r3, [pc, #76]	; (800dd9c <tcp_kill_prio+0x98>)
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d80a      	bhi.n	800dd74 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dd5e:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <tcp_kill_prio+0x98>)
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	7d5b      	ldrb	r3, [r3, #21]
 800dd72:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	617b      	str	r3, [r7, #20]
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1dc      	bne.n	800dd3a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d004      	beq.n	800dd90 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd86:	6938      	ldr	r0, [r7, #16]
 800dd88:	f7ff fa56 	bl	800d238 <tcp_abort>
 800dd8c:	e000      	b.n	800dd90 <tcp_kill_prio+0x8c>
    return;
 800dd8e:	bf00      	nop
  }
}
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2000bb98 	.word	0x2000bb98
 800dd9c:	2000bb9c 	.word	0x2000bb9c

0800dda0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ddaa:	79fb      	ldrb	r3, [r7, #7]
 800ddac:	2b08      	cmp	r3, #8
 800ddae:	d009      	beq.n	800ddc4 <tcp_kill_state+0x24>
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	2b09      	cmp	r3, #9
 800ddb4:	d006      	beq.n	800ddc4 <tcp_kill_state+0x24>
 800ddb6:	4b1a      	ldr	r3, [pc, #104]	; (800de20 <tcp_kill_state+0x80>)
 800ddb8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ddbc:	4919      	ldr	r1, [pc, #100]	; (800de24 <tcp_kill_state+0x84>)
 800ddbe:	481a      	ldr	r0, [pc, #104]	; (800de28 <tcp_kill_state+0x88>)
 800ddc0:	f009 fad0 	bl	8017364 <iprintf>

  inactivity = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddcc:	4b17      	ldr	r3, [pc, #92]	; (800de2c <tcp_kill_state+0x8c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	e017      	b.n	800de04 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	7d1b      	ldrb	r3, [r3, #20]
 800ddd8:	79fa      	ldrb	r2, [r7, #7]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d10f      	bne.n	800ddfe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ddde:	4b14      	ldr	r3, [pc, #80]	; (800de30 <tcp_kill_state+0x90>)
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	6a1b      	ldr	r3, [r3, #32]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d807      	bhi.n	800ddfe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ddee:	4b10      	ldr	r3, [pc, #64]	; (800de30 <tcp_kill_state+0x90>)
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1e4      	bne.n	800ddd4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d003      	beq.n	800de18 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800de10:	2100      	movs	r1, #0
 800de12:	6938      	ldr	r0, [r7, #16]
 800de14:	f7ff f952 	bl	800d0bc <tcp_abandon>
  }
}
 800de18:	bf00      	nop
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	08018e3c 	.word	0x08018e3c
 800de24:	080193c8 	.word	0x080193c8
 800de28:	08018e80 	.word	0x08018e80
 800de2c:	2000bb98 	.word	0x2000bb98
 800de30:	2000bb9c 	.word	0x2000bb9c

0800de34 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800de3e:	2300      	movs	r3, #0
 800de40:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de42:	4b12      	ldr	r3, [pc, #72]	; (800de8c <tcp_kill_timewait+0x58>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	e012      	b.n	800de70 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de4a:	4b11      	ldr	r3, [pc, #68]	; (800de90 <tcp_kill_timewait+0x5c>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	429a      	cmp	r2, r3
 800de58:	d807      	bhi.n	800de6a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800de5a:	4b0d      	ldr	r3, [pc, #52]	; (800de90 <tcp_kill_timewait+0x5c>)
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	60fb      	str	r3, [r7, #12]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e9      	bne.n	800de4a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de7c:	68b8      	ldr	r0, [r7, #8]
 800de7e:	f7ff f9db 	bl	800d238 <tcp_abort>
  }
}
 800de82:	bf00      	nop
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	2000bba8 	.word	0x2000bba8
 800de90:	2000bb9c 	.word	0x2000bb9c

0800de94 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800de9a:	4b10      	ldr	r3, [pc, #64]	; (800dedc <tcp_handle_closepend+0x48>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dea0:	e014      	b.n	800decc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	8b5b      	ldrh	r3, [r3, #26]
 800deac:	f003 0308 	and.w	r3, r3, #8
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d009      	beq.n	800dec8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	8b5b      	ldrh	r3, [r3, #26]
 800deb8:	f023 0308 	bic.w	r3, r3, #8
 800debc:	b29a      	uxth	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff f864 	bl	800cf90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1e7      	bne.n	800dea2 <tcp_handle_closepend+0xe>
  }
}
 800ded2:	bf00      	nop
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	2000bb98 	.word	0x2000bb98

0800dee0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4603      	mov	r3, r0
 800dee8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800deea:	2001      	movs	r0, #1
 800deec:	f7fd fcfe 	bl	800b8ec <memp_malloc>
 800def0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d126      	bne.n	800df46 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800def8:	f7ff ffcc 	bl	800de94 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800defc:	f7ff ff9a 	bl	800de34 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df00:	2001      	movs	r0, #1
 800df02:	f7fd fcf3 	bl	800b8ec <memp_malloc>
 800df06:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d11b      	bne.n	800df46 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800df0e:	2009      	movs	r0, #9
 800df10:	f7ff ff46 	bl	800dda0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df14:	2001      	movs	r0, #1
 800df16:	f7fd fce9 	bl	800b8ec <memp_malloc>
 800df1a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d111      	bne.n	800df46 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800df22:	2008      	movs	r0, #8
 800df24:	f7ff ff3c 	bl	800dda0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df28:	2001      	movs	r0, #1
 800df2a:	f7fd fcdf 	bl	800b8ec <memp_malloc>
 800df2e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d107      	bne.n	800df46 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800df36:	79fb      	ldrb	r3, [r7, #7]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fee3 	bl	800dd04 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df3e:	2001      	movs	r0, #1
 800df40:	f7fd fcd4 	bl	800b8ec <memp_malloc>
 800df44:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d03f      	beq.n	800dfcc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800df4c:	229c      	movs	r2, #156	; 0x9c
 800df4e:	2100      	movs	r1, #0
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f009 f9a4 	bl	801729e <memset>
    pcb->prio = prio;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	79fa      	ldrb	r2, [r7, #7]
 800df5a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	22ff      	movs	r2, #255	; 0xff
 800df7a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800df82:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2206      	movs	r2, #6
 800df88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2206      	movs	r2, #6
 800df90:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df98:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2201      	movs	r2, #1
 800df9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dfa2:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <tcp_alloc+0xf8>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dfaa:	4b0c      	ldr	r3, [pc, #48]	; (800dfdc <tcp_alloc+0xfc>)
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dfb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	4a08      	ldr	r2, [pc, #32]	; (800dfe0 <tcp_alloc+0x100>)
 800dfc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4a07      	ldr	r2, [pc, #28]	; (800dfe4 <tcp_alloc+0x104>)
 800dfc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	2000bb9c 	.word	0x2000bb9c
 800dfdc:	20004ace 	.word	0x20004ace
 800dfe0:	0800dc99 	.word	0x0800dc99
 800dfe4:	006ddd00 	.word	0x006ddd00

0800dfe8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d107      	bne.n	800e006 <tcp_pcb_purge+0x1e>
 800dff6:	4b21      	ldr	r3, [pc, #132]	; (800e07c <tcp_pcb_purge+0x94>)
 800dff8:	f640 0251 	movw	r2, #2129	; 0x851
 800dffc:	4920      	ldr	r1, [pc, #128]	; (800e080 <tcp_pcb_purge+0x98>)
 800dffe:	4821      	ldr	r0, [pc, #132]	; (800e084 <tcp_pcb_purge+0x9c>)
 800e000:	f009 f9b0 	bl	8017364 <iprintf>
 800e004:	e037      	b.n	800e076 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	7d1b      	ldrb	r3, [r3, #20]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d033      	beq.n	800e076 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e012:	2b0a      	cmp	r3, #10
 800e014:	d02f      	beq.n	800e076 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d02b      	beq.n	800e076 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e022:	2b00      	cmp	r3, #0
 800e024:	d007      	beq.n	800e036 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe fb60 	bl	800c6f0 <pbuf_free>
      pcb->refused_data = NULL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 f986 	bl	800e350 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e04a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e050:	4618      	mov	r0, r3
 800e052:	f7ff fdc7 	bl	800dbe4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff fdc2 	bl	800dbe4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	66da      	str	r2, [r3, #108]	; 0x6c
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	08018e3c 	.word	0x08018e3c
 800e080:	08019488 	.word	0x08019488
 800e084:	08018e80 	.word	0x08018e80

0800e088 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d106      	bne.n	800e0a6 <tcp_pcb_remove+0x1e>
 800e098:	4b3e      	ldr	r3, [pc, #248]	; (800e194 <tcp_pcb_remove+0x10c>)
 800e09a:	f640 0283 	movw	r2, #2179	; 0x883
 800e09e:	493e      	ldr	r1, [pc, #248]	; (800e198 <tcp_pcb_remove+0x110>)
 800e0a0:	483e      	ldr	r0, [pc, #248]	; (800e19c <tcp_pcb_remove+0x114>)
 800e0a2:	f009 f95f 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d106      	bne.n	800e0ba <tcp_pcb_remove+0x32>
 800e0ac:	4b39      	ldr	r3, [pc, #228]	; (800e194 <tcp_pcb_remove+0x10c>)
 800e0ae:	f640 0284 	movw	r2, #2180	; 0x884
 800e0b2:	493b      	ldr	r1, [pc, #236]	; (800e1a0 <tcp_pcb_remove+0x118>)
 800e0b4:	4839      	ldr	r0, [pc, #228]	; (800e19c <tcp_pcb_remove+0x114>)
 800e0b6:	f009 f955 	bl	8017364 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d105      	bne.n	800e0d0 <tcp_pcb_remove+0x48>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	e013      	b.n	800e0f8 <tcp_pcb_remove+0x70>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	e00c      	b.n	800e0f2 <tcp_pcb_remove+0x6a>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d104      	bne.n	800e0ec <tcp_pcb_remove+0x64>
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	68da      	ldr	r2, [r3, #12]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	60da      	str	r2, [r3, #12]
 800e0ea:	e005      	b.n	800e0f8 <tcp_pcb_remove+0x70>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	60fb      	str	r3, [r7, #12]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1ef      	bne.n	800e0d8 <tcp_pcb_remove+0x50>
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e0fe:	6838      	ldr	r0, [r7, #0]
 800e100:	f7ff ff72 	bl	800dfe8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	7d1b      	ldrb	r3, [r3, #20]
 800e108:	2b0a      	cmp	r3, #10
 800e10a:	d013      	beq.n	800e134 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e110:	2b01      	cmp	r3, #1
 800e112:	d00f      	beq.n	800e134 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	8b5b      	ldrh	r3, [r3, #26]
 800e118:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d009      	beq.n	800e134 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	8b5b      	ldrh	r3, [r3, #26]
 800e124:	f043 0302 	orr.w	r3, r3, #2
 800e128:	b29a      	uxth	r2, r3
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e12e:	6838      	ldr	r0, [r7, #0]
 800e130:	f002 ff6a 	bl	8011008 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	7d1b      	ldrb	r3, [r3, #20]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d020      	beq.n	800e17e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <tcp_pcb_remove+0xca>
 800e144:	4b13      	ldr	r3, [pc, #76]	; (800e194 <tcp_pcb_remove+0x10c>)
 800e146:	f640 0293 	movw	r2, #2195	; 0x893
 800e14a:	4916      	ldr	r1, [pc, #88]	; (800e1a4 <tcp_pcb_remove+0x11c>)
 800e14c:	4813      	ldr	r0, [pc, #76]	; (800e19c <tcp_pcb_remove+0x114>)
 800e14e:	f009 f909 	bl	8017364 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <tcp_pcb_remove+0xe0>
 800e15a:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <tcp_pcb_remove+0x10c>)
 800e15c:	f640 0294 	movw	r2, #2196	; 0x894
 800e160:	4911      	ldr	r1, [pc, #68]	; (800e1a8 <tcp_pcb_remove+0x120>)
 800e162:	480e      	ldr	r0, [pc, #56]	; (800e19c <tcp_pcb_remove+0x114>)
 800e164:	f009 f8fe 	bl	8017364 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d006      	beq.n	800e17e <tcp_pcb_remove+0xf6>
 800e170:	4b08      	ldr	r3, [pc, #32]	; (800e194 <tcp_pcb_remove+0x10c>)
 800e172:	f640 0296 	movw	r2, #2198	; 0x896
 800e176:	490d      	ldr	r1, [pc, #52]	; (800e1ac <tcp_pcb_remove+0x124>)
 800e178:	4808      	ldr	r0, [pc, #32]	; (800e19c <tcp_pcb_remove+0x114>)
 800e17a:	f009 f8f3 	bl	8017364 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2200      	movs	r2, #0
 800e182:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2200      	movs	r2, #0
 800e188:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e18a:	bf00      	nop
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	08018e3c 	.word	0x08018e3c
 800e198:	080194a4 	.word	0x080194a4
 800e19c:	08018e80 	.word	0x08018e80
 800e1a0:	080194c0 	.word	0x080194c0
 800e1a4:	080194e0 	.word	0x080194e0
 800e1a8:	080194f8 	.word	0x080194f8
 800e1ac:	08019514 	.word	0x08019514

0800e1b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <tcp_next_iss+0x1c>
 800e1be:	4b0a      	ldr	r3, [pc, #40]	; (800e1e8 <tcp_next_iss+0x38>)
 800e1c0:	f640 02af 	movw	r2, #2223	; 0x8af
 800e1c4:	4909      	ldr	r1, [pc, #36]	; (800e1ec <tcp_next_iss+0x3c>)
 800e1c6:	480a      	ldr	r0, [pc, #40]	; (800e1f0 <tcp_next_iss+0x40>)
 800e1c8:	f009 f8cc 	bl	8017364 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e1cc:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <tcp_next_iss+0x44>)
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <tcp_next_iss+0x48>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	4a07      	ldr	r2, [pc, #28]	; (800e1f4 <tcp_next_iss+0x44>)
 800e1d8:	6013      	str	r3, [r2, #0]
  return iss;
 800e1da:	4b06      	ldr	r3, [pc, #24]	; (800e1f4 <tcp_next_iss+0x44>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	08018e3c 	.word	0x08018e3c
 800e1ec:	0801952c 	.word	0x0801952c
 800e1f0:	08018e80 	.word	0x08018e80
 800e1f4:	20000014 	.word	0x20000014
 800e1f8:	2000bb9c 	.word	0x2000bb9c

0800e1fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d106      	bne.n	800e21e <tcp_eff_send_mss_netif+0x22>
 800e210:	4b14      	ldr	r3, [pc, #80]	; (800e264 <tcp_eff_send_mss_netif+0x68>)
 800e212:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e216:	4914      	ldr	r1, [pc, #80]	; (800e268 <tcp_eff_send_mss_netif+0x6c>)
 800e218:	4814      	ldr	r0, [pc, #80]	; (800e26c <tcp_eff_send_mss_netif+0x70>)
 800e21a:	f009 f8a3 	bl	8017364 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e224:	89fb      	ldrh	r3, [r7, #14]
 800e226:	e019      	b.n	800e25c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e22c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e22e:	8afb      	ldrh	r3, [r7, #22]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d012      	beq.n	800e25a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e234:	2328      	movs	r3, #40	; 0x28
 800e236:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e238:	8afa      	ldrh	r2, [r7, #22]
 800e23a:	8abb      	ldrh	r3, [r7, #20]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d904      	bls.n	800e24a <tcp_eff_send_mss_netif+0x4e>
 800e240:	8afa      	ldrh	r2, [r7, #22]
 800e242:	8abb      	ldrh	r3, [r7, #20]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	b29b      	uxth	r3, r3
 800e248:	e000      	b.n	800e24c <tcp_eff_send_mss_netif+0x50>
 800e24a:	2300      	movs	r3, #0
 800e24c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e24e:	8a7a      	ldrh	r2, [r7, #18]
 800e250:	89fb      	ldrh	r3, [r7, #14]
 800e252:	4293      	cmp	r3, r2
 800e254:	bf28      	it	cs
 800e256:	4613      	movcs	r3, r2
 800e258:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e25a:	89fb      	ldrh	r3, [r7, #14]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	08018e3c 	.word	0x08018e3c
 800e268:	08019548 	.word	0x08019548
 800e26c:	08018e80 	.word	0x08018e80

0800e270 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d119      	bne.n	800e2b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e284:	4b10      	ldr	r3, [pc, #64]	; (800e2c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e286:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e28a:	4910      	ldr	r1, [pc, #64]	; (800e2cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e28c:	4810      	ldr	r0, [pc, #64]	; (800e2d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e28e:	f009 f869 	bl	8017364 <iprintf>

  while (pcb != NULL) {
 800e292:	e011      	b.n	800e2b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d108      	bne.n	800e2b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7fe ffc6 	bl	800d238 <tcp_abort>
      pcb = next;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	60fb      	str	r3, [r7, #12]
 800e2b0:	e002      	b.n	800e2b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1ea      	bne.n	800e294 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e2be:	bf00      	nop
 800e2c0:	bf00      	nop
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	08018e3c 	.word	0x08018e3c
 800e2cc:	08019570 	.word	0x08019570
 800e2d0:	08018e80 	.word	0x08018e80

0800e2d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d02a      	beq.n	800e33a <tcp_netif_ip_addr_changed+0x66>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d026      	beq.n	800e33a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e2ec:	4b15      	ldr	r3, [pc, #84]	; (800e344 <tcp_netif_ip_addr_changed+0x70>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff ffbc 	bl	800e270 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e2f8:	4b13      	ldr	r3, [pc, #76]	; (800e348 <tcp_netif_ip_addr_changed+0x74>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff ffb6 	bl	800e270 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d017      	beq.n	800e33a <tcp_netif_ip_addr_changed+0x66>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d013      	beq.n	800e33a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e312:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <tcp_netif_ip_addr_changed+0x78>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e00c      	b.n	800e334 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	429a      	cmp	r2, r3
 800e324:	d103      	bne.n	800e32e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1ef      	bne.n	800e31a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e33a:	bf00      	nop
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	2000bb98 	.word	0x2000bb98
 800e348:	2000bba4 	.word	0x2000bba4
 800e34c:	2000bba0 	.word	0x2000bba0

0800e350 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d007      	beq.n	800e370 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff fc3d 	bl	800dbe4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e370:	bf00      	nop
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b08d      	sub	sp, #52	; 0x34
 800e37c:	af04      	add	r7, sp, #16
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d105      	bne.n	800e394 <tcp_input+0x1c>
 800e388:	4b9b      	ldr	r3, [pc, #620]	; (800e5f8 <tcp_input+0x280>)
 800e38a:	2283      	movs	r2, #131	; 0x83
 800e38c:	499b      	ldr	r1, [pc, #620]	; (800e5fc <tcp_input+0x284>)
 800e38e:	489c      	ldr	r0, [pc, #624]	; (800e600 <tcp_input+0x288>)
 800e390:	f008 ffe8 	bl	8017364 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4a9a      	ldr	r2, [pc, #616]	; (800e604 <tcp_input+0x28c>)
 800e39a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	895b      	ldrh	r3, [r3, #10]
 800e3a0:	2b13      	cmp	r3, #19
 800e3a2:	f240 83c4 	bls.w	800eb2e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e3a6:	4b98      	ldr	r3, [pc, #608]	; (800e608 <tcp_input+0x290>)
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	4a97      	ldr	r2, [pc, #604]	; (800e608 <tcp_input+0x290>)
 800e3ac:	6812      	ldr	r2, [r2, #0]
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f007 fdf9 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f040 83ba 	bne.w	800eb32 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e3be:	4b92      	ldr	r3, [pc, #584]	; (800e608 <tcp_input+0x290>)
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e3c6:	2be0      	cmp	r3, #224	; 0xe0
 800e3c8:	f000 83b3 	beq.w	800eb32 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e3cc:	4b8d      	ldr	r3, [pc, #564]	; (800e604 <tcp_input+0x28c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	899b      	ldrh	r3, [r3, #12]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fc fdd3 	bl	800af80 <lwip_htons>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	0b1b      	lsrs	r3, r3, #12
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e3e6:	7cbb      	ldrb	r3, [r7, #18]
 800e3e8:	2b13      	cmp	r3, #19
 800e3ea:	f240 83a4 	bls.w	800eb36 <tcp_input+0x7be>
 800e3ee:	7cbb      	ldrb	r3, [r7, #18]
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	891b      	ldrh	r3, [r3, #8]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	f200 839d 	bhi.w	800eb36 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e3fc:	7cbb      	ldrb	r3, [r7, #18]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	3b14      	subs	r3, #20
 800e402:	b29a      	uxth	r2, r3
 800e404:	4b81      	ldr	r3, [pc, #516]	; (800e60c <tcp_input+0x294>)
 800e406:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e408:	4b81      	ldr	r3, [pc, #516]	; (800e610 <tcp_input+0x298>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	895a      	ldrh	r2, [r3, #10]
 800e412:	7cbb      	ldrb	r3, [r7, #18]
 800e414:	b29b      	uxth	r3, r3
 800e416:	429a      	cmp	r2, r3
 800e418:	d309      	bcc.n	800e42e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e41a:	4b7c      	ldr	r3, [pc, #496]	; (800e60c <tcp_input+0x294>)
 800e41c:	881a      	ldrh	r2, [r3, #0]
 800e41e:	4b7d      	ldr	r3, [pc, #500]	; (800e614 <tcp_input+0x29c>)
 800e420:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e422:	7cbb      	ldrb	r3, [r7, #18]
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7fe f8dc 	bl	800c5e4 <pbuf_remove_header>
 800e42c:	e04e      	b.n	800e4cc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d105      	bne.n	800e442 <tcp_input+0xca>
 800e436:	4b70      	ldr	r3, [pc, #448]	; (800e5f8 <tcp_input+0x280>)
 800e438:	22c2      	movs	r2, #194	; 0xc2
 800e43a:	4977      	ldr	r1, [pc, #476]	; (800e618 <tcp_input+0x2a0>)
 800e43c:	4870      	ldr	r0, [pc, #448]	; (800e600 <tcp_input+0x288>)
 800e43e:	f008 ff91 	bl	8017364 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e442:	2114      	movs	r1, #20
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fe f8cd 	bl	800c5e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	895a      	ldrh	r2, [r3, #10]
 800e44e:	4b71      	ldr	r3, [pc, #452]	; (800e614 <tcp_input+0x29c>)
 800e450:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e452:	4b6e      	ldr	r3, [pc, #440]	; (800e60c <tcp_input+0x294>)
 800e454:	881a      	ldrh	r2, [r3, #0]
 800e456:	4b6f      	ldr	r3, [pc, #444]	; (800e614 <tcp_input+0x29c>)
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e45e:	4b6d      	ldr	r3, [pc, #436]	; (800e614 <tcp_input+0x29c>)
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7fe f8bd 	bl	800c5e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	895b      	ldrh	r3, [r3, #10]
 800e470:	8a3a      	ldrh	r2, [r7, #16]
 800e472:	429a      	cmp	r2, r3
 800e474:	f200 8361 	bhi.w	800eb3a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	4a64      	ldr	r2, [pc, #400]	; (800e610 <tcp_input+0x298>)
 800e480:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	8a3a      	ldrh	r2, [r7, #16]
 800e488:	4611      	mov	r1, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe f8aa 	bl	800c5e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	891a      	ldrh	r2, [r3, #8]
 800e494:	8a3b      	ldrh	r3, [r7, #16]
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	b29a      	uxth	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	895b      	ldrh	r3, [r3, #10]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d005      	beq.n	800e4b2 <tcp_input+0x13a>
 800e4a6:	4b54      	ldr	r3, [pc, #336]	; (800e5f8 <tcp_input+0x280>)
 800e4a8:	22df      	movs	r2, #223	; 0xdf
 800e4aa:	495c      	ldr	r1, [pc, #368]	; (800e61c <tcp_input+0x2a4>)
 800e4ac:	4854      	ldr	r0, [pc, #336]	; (800e600 <tcp_input+0x288>)
 800e4ae:	f008 ff59 	bl	8017364 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	891a      	ldrh	r2, [r3, #8]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	891b      	ldrh	r3, [r3, #8]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d005      	beq.n	800e4cc <tcp_input+0x154>
 800e4c0:	4b4d      	ldr	r3, [pc, #308]	; (800e5f8 <tcp_input+0x280>)
 800e4c2:	22e0      	movs	r2, #224	; 0xe0
 800e4c4:	4956      	ldr	r1, [pc, #344]	; (800e620 <tcp_input+0x2a8>)
 800e4c6:	484e      	ldr	r0, [pc, #312]	; (800e600 <tcp_input+0x288>)
 800e4c8:	f008 ff4c 	bl	8017364 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e4cc:	4b4d      	ldr	r3, [pc, #308]	; (800e604 <tcp_input+0x28c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	4a4b      	ldr	r2, [pc, #300]	; (800e604 <tcp_input+0x28c>)
 800e4d6:	6814      	ldr	r4, [r2, #0]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fc fd51 	bl	800af80 <lwip_htons>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e4e2:	4b48      	ldr	r3, [pc, #288]	; (800e604 <tcp_input+0x28c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	885b      	ldrh	r3, [r3, #2]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	4a46      	ldr	r2, [pc, #280]	; (800e604 <tcp_input+0x28c>)
 800e4ec:	6814      	ldr	r4, [r2, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fc fd46 	bl	800af80 <lwip_htons>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e4f8:	4b42      	ldr	r3, [pc, #264]	; (800e604 <tcp_input+0x28c>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	4a41      	ldr	r2, [pc, #260]	; (800e604 <tcp_input+0x28c>)
 800e500:	6814      	ldr	r4, [r2, #0]
 800e502:	4618      	mov	r0, r3
 800e504:	f7fc fd51 	bl	800afaa <lwip_htonl>
 800e508:	4603      	mov	r3, r0
 800e50a:	6063      	str	r3, [r4, #4]
 800e50c:	6863      	ldr	r3, [r4, #4]
 800e50e:	4a45      	ldr	r2, [pc, #276]	; (800e624 <tcp_input+0x2ac>)
 800e510:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e512:	4b3c      	ldr	r3, [pc, #240]	; (800e604 <tcp_input+0x28c>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	4a3a      	ldr	r2, [pc, #232]	; (800e604 <tcp_input+0x28c>)
 800e51a:	6814      	ldr	r4, [r2, #0]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fc fd44 	bl	800afaa <lwip_htonl>
 800e522:	4603      	mov	r3, r0
 800e524:	60a3      	str	r3, [r4, #8]
 800e526:	68a3      	ldr	r3, [r4, #8]
 800e528:	4a3f      	ldr	r2, [pc, #252]	; (800e628 <tcp_input+0x2b0>)
 800e52a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e52c:	4b35      	ldr	r3, [pc, #212]	; (800e604 <tcp_input+0x28c>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	89db      	ldrh	r3, [r3, #14]
 800e532:	b29b      	uxth	r3, r3
 800e534:	4a33      	ldr	r2, [pc, #204]	; (800e604 <tcp_input+0x28c>)
 800e536:	6814      	ldr	r4, [r2, #0]
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fc fd21 	bl	800af80 <lwip_htons>
 800e53e:	4603      	mov	r3, r0
 800e540:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e542:	4b30      	ldr	r3, [pc, #192]	; (800e604 <tcp_input+0x28c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	899b      	ldrh	r3, [r3, #12]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fc fd18 	bl	800af80 <lwip_htons>
 800e550:	4603      	mov	r3, r0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	4b34      	ldr	r3, [pc, #208]	; (800e62c <tcp_input+0x2b4>)
 800e55c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	891a      	ldrh	r2, [r3, #8]
 800e562:	4b33      	ldr	r3, [pc, #204]	; (800e630 <tcp_input+0x2b8>)
 800e564:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e566:	4b31      	ldr	r3, [pc, #196]	; (800e62c <tcp_input+0x2b4>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	f003 0303 	and.w	r3, r3, #3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00c      	beq.n	800e58c <tcp_input+0x214>
    tcplen++;
 800e572:	4b2f      	ldr	r3, [pc, #188]	; (800e630 <tcp_input+0x2b8>)
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	3301      	adds	r3, #1
 800e578:	b29a      	uxth	r2, r3
 800e57a:	4b2d      	ldr	r3, [pc, #180]	; (800e630 <tcp_input+0x2b8>)
 800e57c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	891a      	ldrh	r2, [r3, #8]
 800e582:	4b2b      	ldr	r3, [pc, #172]	; (800e630 <tcp_input+0x2b8>)
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	429a      	cmp	r2, r3
 800e588:	f200 82d9 	bhi.w	800eb3e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e58c:	2300      	movs	r3, #0
 800e58e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e590:	4b28      	ldr	r3, [pc, #160]	; (800e634 <tcp_input+0x2bc>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	61fb      	str	r3, [r7, #28]
 800e596:	e09d      	b.n	800e6d4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d105      	bne.n	800e5ac <tcp_input+0x234>
 800e5a0:	4b15      	ldr	r3, [pc, #84]	; (800e5f8 <tcp_input+0x280>)
 800e5a2:	22fb      	movs	r2, #251	; 0xfb
 800e5a4:	4924      	ldr	r1, [pc, #144]	; (800e638 <tcp_input+0x2c0>)
 800e5a6:	4816      	ldr	r0, [pc, #88]	; (800e600 <tcp_input+0x288>)
 800e5a8:	f008 fedc 	bl	8017364 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	7d1b      	ldrb	r3, [r3, #20]
 800e5b0:	2b0a      	cmp	r3, #10
 800e5b2:	d105      	bne.n	800e5c0 <tcp_input+0x248>
 800e5b4:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <tcp_input+0x280>)
 800e5b6:	22fc      	movs	r2, #252	; 0xfc
 800e5b8:	4920      	ldr	r1, [pc, #128]	; (800e63c <tcp_input+0x2c4>)
 800e5ba:	4811      	ldr	r0, [pc, #68]	; (800e600 <tcp_input+0x288>)
 800e5bc:	f008 fed2 	bl	8017364 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	7d1b      	ldrb	r3, [r3, #20]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d105      	bne.n	800e5d4 <tcp_input+0x25c>
 800e5c8:	4b0b      	ldr	r3, [pc, #44]	; (800e5f8 <tcp_input+0x280>)
 800e5ca:	22fd      	movs	r2, #253	; 0xfd
 800e5cc:	491c      	ldr	r1, [pc, #112]	; (800e640 <tcp_input+0x2c8>)
 800e5ce:	480c      	ldr	r0, [pc, #48]	; (800e600 <tcp_input+0x288>)
 800e5d0:	f008 fec8 	bl	8017364 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	7a1b      	ldrb	r3, [r3, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d033      	beq.n	800e644 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	7a1a      	ldrb	r2, [r3, #8]
 800e5e0:	4b09      	ldr	r3, [pc, #36]	; (800e608 <tcp_input+0x290>)
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d029      	beq.n	800e644 <tcp_input+0x2cc>
      prev = pcb;
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	61bb      	str	r3, [r7, #24]
      continue;
 800e5f4:	e06b      	b.n	800e6ce <tcp_input+0x356>
 800e5f6:	bf00      	nop
 800e5f8:	080195a4 	.word	0x080195a4
 800e5fc:	080195d8 	.word	0x080195d8
 800e600:	080195f0 	.word	0x080195f0
 800e604:	20004ae0 	.word	0x20004ae0
 800e608:	20008464 	.word	0x20008464
 800e60c:	20004ae4 	.word	0x20004ae4
 800e610:	20004ae8 	.word	0x20004ae8
 800e614:	20004ae6 	.word	0x20004ae6
 800e618:	08019618 	.word	0x08019618
 800e61c:	08019628 	.word	0x08019628
 800e620:	08019634 	.word	0x08019634
 800e624:	20004af0 	.word	0x20004af0
 800e628:	20004af4 	.word	0x20004af4
 800e62c:	20004afc 	.word	0x20004afc
 800e630:	20004afa 	.word	0x20004afa
 800e634:	2000bb98 	.word	0x2000bb98
 800e638:	08019654 	.word	0x08019654
 800e63c:	0801967c 	.word	0x0801967c
 800e640:	080196a8 	.word	0x080196a8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	8b1a      	ldrh	r2, [r3, #24]
 800e648:	4b94      	ldr	r3, [pc, #592]	; (800e89c <tcp_input+0x524>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	b29b      	uxth	r3, r3
 800e650:	429a      	cmp	r2, r3
 800e652:	d13a      	bne.n	800e6ca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	8ada      	ldrh	r2, [r3, #22]
 800e658:	4b90      	ldr	r3, [pc, #576]	; (800e89c <tcp_input+0x524>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	885b      	ldrh	r3, [r3, #2]
 800e65e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e660:	429a      	cmp	r2, r3
 800e662:	d132      	bne.n	800e6ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	4b8d      	ldr	r3, [pc, #564]	; (800e8a0 <tcp_input+0x528>)
 800e66a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d12c      	bne.n	800e6ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	4b8a      	ldr	r3, [pc, #552]	; (800e8a0 <tcp_input+0x528>)
 800e676:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e678:	429a      	cmp	r2, r3
 800e67a:	d126      	bne.n	800e6ca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	69fa      	ldr	r2, [r7, #28]
 800e682:	429a      	cmp	r2, r3
 800e684:	d106      	bne.n	800e694 <tcp_input+0x31c>
 800e686:	4b87      	ldr	r3, [pc, #540]	; (800e8a4 <tcp_input+0x52c>)
 800e688:	f240 120d 	movw	r2, #269	; 0x10d
 800e68c:	4986      	ldr	r1, [pc, #536]	; (800e8a8 <tcp_input+0x530>)
 800e68e:	4887      	ldr	r0, [pc, #540]	; (800e8ac <tcp_input+0x534>)
 800e690:	f008 fe68 	bl	8017364 <iprintf>
      if (prev != NULL) {
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00a      	beq.n	800e6b0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	68da      	ldr	r2, [r3, #12]
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e6a2:	4b83      	ldr	r3, [pc, #524]	; (800e8b0 <tcp_input+0x538>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e6aa:	4a81      	ldr	r2, [pc, #516]	; (800e8b0 <tcp_input+0x538>)
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	69fa      	ldr	r2, [r7, #28]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d111      	bne.n	800e6de <tcp_input+0x366>
 800e6ba:	4b7a      	ldr	r3, [pc, #488]	; (800e8a4 <tcp_input+0x52c>)
 800e6bc:	f240 1215 	movw	r2, #277	; 0x115
 800e6c0:	497c      	ldr	r1, [pc, #496]	; (800e8b4 <tcp_input+0x53c>)
 800e6c2:	487a      	ldr	r0, [pc, #488]	; (800e8ac <tcp_input+0x534>)
 800e6c4:	f008 fe4e 	bl	8017364 <iprintf>
      break;
 800e6c8:	e009      	b.n	800e6de <tcp_input+0x366>
    }
    prev = pcb;
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	61fb      	str	r3, [r7, #28]
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f47f af5e 	bne.w	800e598 <tcp_input+0x220>
 800e6dc:	e000      	b.n	800e6e0 <tcp_input+0x368>
      break;
 800e6de:	bf00      	nop
  }

  if (pcb == NULL) {
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f040 8095 	bne.w	800e812 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6e8:	4b73      	ldr	r3, [pc, #460]	; (800e8b8 <tcp_input+0x540>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	61fb      	str	r3, [r7, #28]
 800e6ee:	e03f      	b.n	800e770 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	7d1b      	ldrb	r3, [r3, #20]
 800e6f4:	2b0a      	cmp	r3, #10
 800e6f6:	d006      	beq.n	800e706 <tcp_input+0x38e>
 800e6f8:	4b6a      	ldr	r3, [pc, #424]	; (800e8a4 <tcp_input+0x52c>)
 800e6fa:	f240 121f 	movw	r2, #287	; 0x11f
 800e6fe:	496f      	ldr	r1, [pc, #444]	; (800e8bc <tcp_input+0x544>)
 800e700:	486a      	ldr	r0, [pc, #424]	; (800e8ac <tcp_input+0x534>)
 800e702:	f008 fe2f 	bl	8017364 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	7a1b      	ldrb	r3, [r3, #8]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d009      	beq.n	800e722 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	7a1a      	ldrb	r2, [r3, #8]
 800e712:	4b63      	ldr	r3, [pc, #396]	; (800e8a0 <tcp_input+0x528>)
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e71a:	3301      	adds	r3, #1
 800e71c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e71e:	429a      	cmp	r2, r3
 800e720:	d122      	bne.n	800e768 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	8b1a      	ldrh	r2, [r3, #24]
 800e726:	4b5d      	ldr	r3, [pc, #372]	; (800e89c <tcp_input+0x524>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	429a      	cmp	r2, r3
 800e730:	d11b      	bne.n	800e76a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	8ada      	ldrh	r2, [r3, #22]
 800e736:	4b59      	ldr	r3, [pc, #356]	; (800e89c <tcp_input+0x524>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	885b      	ldrh	r3, [r3, #2]
 800e73c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e73e:	429a      	cmp	r2, r3
 800e740:	d113      	bne.n	800e76a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	4b56      	ldr	r3, [pc, #344]	; (800e8a0 <tcp_input+0x528>)
 800e748:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d10d      	bne.n	800e76a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	4b53      	ldr	r3, [pc, #332]	; (800e8a0 <tcp_input+0x528>)
 800e754:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e756:	429a      	cmp	r2, r3
 800e758:	d107      	bne.n	800e76a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e75a:	69f8      	ldr	r0, [r7, #28]
 800e75c:	f000 fb54 	bl	800ee08 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f7fd ffc5 	bl	800c6f0 <pbuf_free>
        return;
 800e766:	e1f0      	b.n	800eb4a <tcp_input+0x7d2>
        continue;
 800e768:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	61fb      	str	r3, [r7, #28]
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1bc      	bne.n	800e6f0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e776:	2300      	movs	r3, #0
 800e778:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e77a:	4b51      	ldr	r3, [pc, #324]	; (800e8c0 <tcp_input+0x548>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	617b      	str	r3, [r7, #20]
 800e780:	e02a      	b.n	800e7d8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	7a1b      	ldrb	r3, [r3, #8]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00c      	beq.n	800e7a4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	7a1a      	ldrb	r2, [r3, #8]
 800e78e:	4b44      	ldr	r3, [pc, #272]	; (800e8a0 <tcp_input+0x528>)
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e796:	3301      	adds	r3, #1
 800e798:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d002      	beq.n	800e7a4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	61bb      	str	r3, [r7, #24]
        continue;
 800e7a2:	e016      	b.n	800e7d2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	8ada      	ldrh	r2, [r3, #22]
 800e7a8:	4b3c      	ldr	r3, [pc, #240]	; (800e89c <tcp_input+0x524>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	885b      	ldrh	r3, [r3, #2]
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d10c      	bne.n	800e7ce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	4b39      	ldr	r3, [pc, #228]	; (800e8a0 <tcp_input+0x528>)
 800e7ba:	695b      	ldr	r3, [r3, #20]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d00f      	beq.n	800e7e0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00d      	beq.n	800e7e2 <tcp_input+0x46a>
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d009      	beq.n	800e7e2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1d1      	bne.n	800e782 <tcp_input+0x40a>
 800e7de:	e000      	b.n	800e7e2 <tcp_input+0x46a>
            break;
 800e7e0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d014      	beq.n	800e812 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00a      	beq.n	800e804 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e7f6:	4b32      	ldr	r3, [pc, #200]	; (800e8c0 <tcp_input+0x548>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e7fe:	4a30      	ldr	r2, [pc, #192]	; (800e8c0 <tcp_input+0x548>)
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e804:	6978      	ldr	r0, [r7, #20]
 800e806:	f000 fa01 	bl	800ec0c <tcp_listen_input>
      }
      pbuf_free(p);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7fd ff70 	bl	800c6f0 <pbuf_free>
      return;
 800e810:	e19b      	b.n	800eb4a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 8160 	beq.w	800eada <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e81a:	4b2a      	ldr	r3, [pc, #168]	; (800e8c4 <tcp_input+0x54c>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	891a      	ldrh	r2, [r3, #8]
 800e824:	4b27      	ldr	r3, [pc, #156]	; (800e8c4 <tcp_input+0x54c>)
 800e826:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e828:	4a26      	ldr	r2, [pc, #152]	; (800e8c4 <tcp_input+0x54c>)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e82e:	4b1b      	ldr	r3, [pc, #108]	; (800e89c <tcp_input+0x524>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a24      	ldr	r2, [pc, #144]	; (800e8c4 <tcp_input+0x54c>)
 800e834:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e836:	4b24      	ldr	r3, [pc, #144]	; (800e8c8 <tcp_input+0x550>)
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e83c:	4b23      	ldr	r3, [pc, #140]	; (800e8cc <tcp_input+0x554>)
 800e83e:	2200      	movs	r2, #0
 800e840:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e842:	4b23      	ldr	r3, [pc, #140]	; (800e8d0 <tcp_input+0x558>)
 800e844:	2200      	movs	r2, #0
 800e846:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e848:	4b22      	ldr	r3, [pc, #136]	; (800e8d4 <tcp_input+0x55c>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	f003 0308 	and.w	r3, r3, #8
 800e850:	2b00      	cmp	r3, #0
 800e852:	d006      	beq.n	800e862 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	7b5b      	ldrb	r3, [r3, #13]
 800e858:	f043 0301 	orr.w	r3, r3, #1
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e866:	2b00      	cmp	r3, #0
 800e868:	d038      	beq.n	800e8dc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e86a:	69f8      	ldr	r0, [r7, #28]
 800e86c:	f7ff f93e 	bl	800daec <tcp_process_refused_data>
 800e870:	4603      	mov	r3, r0
 800e872:	f113 0f0d 	cmn.w	r3, #13
 800e876:	d007      	beq.n	800e888 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d02d      	beq.n	800e8dc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e880:	4b15      	ldr	r3, [pc, #84]	; (800e8d8 <tcp_input+0x560>)
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d029      	beq.n	800e8dc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f040 8104 	bne.w	800ea9a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e892:	69f8      	ldr	r0, [r7, #28]
 800e894:	f003 f9be 	bl	8011c14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e898:	e0ff      	b.n	800ea9a <tcp_input+0x722>
 800e89a:	bf00      	nop
 800e89c:	20004ae0 	.word	0x20004ae0
 800e8a0:	20008464 	.word	0x20008464
 800e8a4:	080195a4 	.word	0x080195a4
 800e8a8:	080196d0 	.word	0x080196d0
 800e8ac:	080195f0 	.word	0x080195f0
 800e8b0:	2000bb98 	.word	0x2000bb98
 800e8b4:	080196fc 	.word	0x080196fc
 800e8b8:	2000bba8 	.word	0x2000bba8
 800e8bc:	08019728 	.word	0x08019728
 800e8c0:	2000bba0 	.word	0x2000bba0
 800e8c4:	20004ad0 	.word	0x20004ad0
 800e8c8:	20004b00 	.word	0x20004b00
 800e8cc:	20004afd 	.word	0x20004afd
 800e8d0:	20004af8 	.word	0x20004af8
 800e8d4:	20004afc 	.word	0x20004afc
 800e8d8:	20004afa 	.word	0x20004afa
      }
    }
    tcp_input_pcb = pcb;
 800e8dc:	4a9c      	ldr	r2, [pc, #624]	; (800eb50 <tcp_input+0x7d8>)
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e8e2:	69f8      	ldr	r0, [r7, #28]
 800e8e4:	f000 fb0a 	bl	800eefc <tcp_process>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8f0:	f113 0f0d 	cmn.w	r3, #13
 800e8f4:	f000 80d3 	beq.w	800ea9e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e8f8:	4b96      	ldr	r3, [pc, #600]	; (800eb54 <tcp_input+0x7dc>)
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	f003 0308 	and.w	r3, r3, #8
 800e900:	2b00      	cmp	r3, #0
 800e902:	d015      	beq.n	800e930 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d008      	beq.n	800e920 <tcp_input+0x5a8>
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e914:	69fa      	ldr	r2, [r7, #28]
 800e916:	6912      	ldr	r2, [r2, #16]
 800e918:	f06f 010d 	mvn.w	r1, #13
 800e91c:	4610      	mov	r0, r2
 800e91e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e920:	69f9      	ldr	r1, [r7, #28]
 800e922:	488d      	ldr	r0, [pc, #564]	; (800eb58 <tcp_input+0x7e0>)
 800e924:	f7ff fbb0 	bl	800e088 <tcp_pcb_remove>
        tcp_free(pcb);
 800e928:	69f8      	ldr	r0, [r7, #28]
 800e92a:	f7fe f99d 	bl	800cc68 <tcp_free>
 800e92e:	e0c1      	b.n	800eab4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e930:	2300      	movs	r3, #0
 800e932:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e934:	4b89      	ldr	r3, [pc, #548]	; (800eb5c <tcp_input+0x7e4>)
 800e936:	881b      	ldrh	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d01d      	beq.n	800e978 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e93c:	4b87      	ldr	r3, [pc, #540]	; (800eb5c <tcp_input+0x7e4>)
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d00a      	beq.n	800e962 <tcp_input+0x5ea>
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e952:	69fa      	ldr	r2, [r7, #28]
 800e954:	6910      	ldr	r0, [r2, #16]
 800e956:	89fa      	ldrh	r2, [r7, #14]
 800e958:	69f9      	ldr	r1, [r7, #28]
 800e95a:	4798      	blx	r3
 800e95c:	4603      	mov	r3, r0
 800e95e:	74fb      	strb	r3, [r7, #19]
 800e960:	e001      	b.n	800e966 <tcp_input+0x5ee>
 800e962:	2300      	movs	r3, #0
 800e964:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e96a:	f113 0f0d 	cmn.w	r3, #13
 800e96e:	f000 8098 	beq.w	800eaa2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e972:	4b7a      	ldr	r3, [pc, #488]	; (800eb5c <tcp_input+0x7e4>)
 800e974:	2200      	movs	r2, #0
 800e976:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e978:	69f8      	ldr	r0, [r7, #28]
 800e97a:	f000 f907 	bl	800eb8c <tcp_input_delayed_close>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	f040 8090 	bne.w	800eaa6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e986:	4b76      	ldr	r3, [pc, #472]	; (800eb60 <tcp_input+0x7e8>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d041      	beq.n	800ea12 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e992:	2b00      	cmp	r3, #0
 800e994:	d006      	beq.n	800e9a4 <tcp_input+0x62c>
 800e996:	4b73      	ldr	r3, [pc, #460]	; (800eb64 <tcp_input+0x7ec>)
 800e998:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e99c:	4972      	ldr	r1, [pc, #456]	; (800eb68 <tcp_input+0x7f0>)
 800e99e:	4873      	ldr	r0, [pc, #460]	; (800eb6c <tcp_input+0x7f4>)
 800e9a0:	f008 fce0 	bl	8017364 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	8b5b      	ldrh	r3, [r3, #26]
 800e9a8:	f003 0310 	and.w	r3, r3, #16
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d008      	beq.n	800e9c2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e9b0:	4b6b      	ldr	r3, [pc, #428]	; (800eb60 <tcp_input+0x7e8>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fd fe9b 	bl	800c6f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e9ba:	69f8      	ldr	r0, [r7, #28]
 800e9bc:	f7fe fc3c 	bl	800d238 <tcp_abort>
            goto aborted;
 800e9c0:	e078      	b.n	800eab4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00c      	beq.n	800e9e6 <tcp_input+0x66e>
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	6918      	ldr	r0, [r3, #16]
 800e9d6:	4b62      	ldr	r3, [pc, #392]	; (800eb60 <tcp_input+0x7e8>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	69f9      	ldr	r1, [r7, #28]
 800e9de:	47a0      	blx	r4
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	74fb      	strb	r3, [r7, #19]
 800e9e4:	e008      	b.n	800e9f8 <tcp_input+0x680>
 800e9e6:	4b5e      	ldr	r3, [pc, #376]	; (800eb60 <tcp_input+0x7e8>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	69f9      	ldr	r1, [r7, #28]
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	f7ff f952 	bl	800dc98 <tcp_recv_null>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e9f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9fc:	f113 0f0d 	cmn.w	r3, #13
 800ea00:	d053      	beq.n	800eaaa <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea0a:	4b55      	ldr	r3, [pc, #340]	; (800eb60 <tcp_input+0x7e8>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea12:	4b50      	ldr	r3, [pc, #320]	; (800eb54 <tcp_input+0x7dc>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	f003 0320 	and.w	r3, r3, #32
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d030      	beq.n	800ea80 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d009      	beq.n	800ea3a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea2a:	7b5a      	ldrb	r2, [r3, #13]
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea30:	f042 0220 	orr.w	r2, r2, #32
 800ea34:	b2d2      	uxtb	r2, r2
 800ea36:	735a      	strb	r2, [r3, #13]
 800ea38:	e022      	b.n	800ea80 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea42:	d005      	beq.n	800ea50 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea48:	3301      	adds	r3, #1
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00b      	beq.n	800ea72 <tcp_input+0x6fa>
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	6918      	ldr	r0, [r3, #16]
 800ea64:	2300      	movs	r3, #0
 800ea66:	2200      	movs	r2, #0
 800ea68:	69f9      	ldr	r1, [r7, #28]
 800ea6a:	47a0      	blx	r4
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	74fb      	strb	r3, [r7, #19]
 800ea70:	e001      	b.n	800ea76 <tcp_input+0x6fe>
 800ea72:	2300      	movs	r3, #0
 800ea74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ea76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea7a:	f113 0f0d 	cmn.w	r3, #13
 800ea7e:	d016      	beq.n	800eaae <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ea80:	4b33      	ldr	r3, [pc, #204]	; (800eb50 <tcp_input+0x7d8>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ea86:	69f8      	ldr	r0, [r7, #28]
 800ea88:	f000 f880 	bl	800eb8c <tcp_input_delayed_close>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10f      	bne.n	800eab2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ea92:	69f8      	ldr	r0, [r7, #28]
 800ea94:	f002 fab8 	bl	8011008 <tcp_output>
 800ea98:	e00c      	b.n	800eab4 <tcp_input+0x73c>
        goto aborted;
 800ea9a:	bf00      	nop
 800ea9c:	e00a      	b.n	800eab4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ea9e:	bf00      	nop
 800eaa0:	e008      	b.n	800eab4 <tcp_input+0x73c>
              goto aborted;
 800eaa2:	bf00      	nop
 800eaa4:	e006      	b.n	800eab4 <tcp_input+0x73c>
          goto aborted;
 800eaa6:	bf00      	nop
 800eaa8:	e004      	b.n	800eab4 <tcp_input+0x73c>
            goto aborted;
 800eaaa:	bf00      	nop
 800eaac:	e002      	b.n	800eab4 <tcp_input+0x73c>
              goto aborted;
 800eaae:	bf00      	nop
 800eab0:	e000      	b.n	800eab4 <tcp_input+0x73c>
          goto aborted;
 800eab2:	bf00      	nop
    tcp_input_pcb = NULL;
 800eab4:	4b26      	ldr	r3, [pc, #152]	; (800eb50 <tcp_input+0x7d8>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eaba:	4b29      	ldr	r3, [pc, #164]	; (800eb60 <tcp_input+0x7e8>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eac0:	4b2b      	ldr	r3, [pc, #172]	; (800eb70 <tcp_input+0x7f8>)
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d03f      	beq.n	800eb48 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800eac8:	4b29      	ldr	r3, [pc, #164]	; (800eb70 <tcp_input+0x7f8>)
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fd fe0f 	bl	800c6f0 <pbuf_free>
      inseg.p = NULL;
 800ead2:	4b27      	ldr	r3, [pc, #156]	; (800eb70 <tcp_input+0x7f8>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ead8:	e036      	b.n	800eb48 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eada:	4b26      	ldr	r3, [pc, #152]	; (800eb74 <tcp_input+0x7fc>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	899b      	ldrh	r3, [r3, #12]
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fc fa4c 	bl	800af80 <lwip_htons>
 800eae8:	4603      	mov	r3, r0
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d118      	bne.n	800eb26 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaf4:	4b20      	ldr	r3, [pc, #128]	; (800eb78 <tcp_input+0x800>)
 800eaf6:	6819      	ldr	r1, [r3, #0]
 800eaf8:	4b20      	ldr	r3, [pc, #128]	; (800eb7c <tcp_input+0x804>)
 800eafa:	881b      	ldrh	r3, [r3, #0]
 800eafc:	461a      	mov	r2, r3
 800eafe:	4b20      	ldr	r3, [pc, #128]	; (800eb80 <tcp_input+0x808>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb04:	4b1b      	ldr	r3, [pc, #108]	; (800eb74 <tcp_input+0x7fc>)
 800eb06:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb08:	885b      	ldrh	r3, [r3, #2]
 800eb0a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb0c:	4a19      	ldr	r2, [pc, #100]	; (800eb74 <tcp_input+0x7fc>)
 800eb0e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb10:	8812      	ldrh	r2, [r2, #0]
 800eb12:	b292      	uxth	r2, r2
 800eb14:	9202      	str	r2, [sp, #8]
 800eb16:	9301      	str	r3, [sp, #4]
 800eb18:	4b1a      	ldr	r3, [pc, #104]	; (800eb84 <tcp_input+0x80c>)
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	4b1a      	ldr	r3, [pc, #104]	; (800eb88 <tcp_input+0x810>)
 800eb1e:	4602      	mov	r2, r0
 800eb20:	2000      	movs	r0, #0
 800eb22:	f003 f825 	bl	8011b70 <tcp_rst>
    pbuf_free(p);
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7fd fde2 	bl	800c6f0 <pbuf_free>
  return;
 800eb2c:	e00c      	b.n	800eb48 <tcp_input+0x7d0>
    goto dropped;
 800eb2e:	bf00      	nop
 800eb30:	e006      	b.n	800eb40 <tcp_input+0x7c8>
    goto dropped;
 800eb32:	bf00      	nop
 800eb34:	e004      	b.n	800eb40 <tcp_input+0x7c8>
    goto dropped;
 800eb36:	bf00      	nop
 800eb38:	e002      	b.n	800eb40 <tcp_input+0x7c8>
      goto dropped;
 800eb3a:	bf00      	nop
 800eb3c:	e000      	b.n	800eb40 <tcp_input+0x7c8>
      goto dropped;
 800eb3e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fd fdd5 	bl	800c6f0 <pbuf_free>
 800eb46:	e000      	b.n	800eb4a <tcp_input+0x7d2>
  return;
 800eb48:	bf00      	nop
}
 800eb4a:	3724      	adds	r7, #36	; 0x24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd90      	pop	{r4, r7, pc}
 800eb50:	2000bbac 	.word	0x2000bbac
 800eb54:	20004afd 	.word	0x20004afd
 800eb58:	2000bb98 	.word	0x2000bb98
 800eb5c:	20004af8 	.word	0x20004af8
 800eb60:	20004b00 	.word	0x20004b00
 800eb64:	080195a4 	.word	0x080195a4
 800eb68:	08019758 	.word	0x08019758
 800eb6c:	080195f0 	.word	0x080195f0
 800eb70:	20004ad0 	.word	0x20004ad0
 800eb74:	20004ae0 	.word	0x20004ae0
 800eb78:	20004af4 	.word	0x20004af4
 800eb7c:	20004afa 	.word	0x20004afa
 800eb80:	20004af0 	.word	0x20004af0
 800eb84:	20008474 	.word	0x20008474
 800eb88:	20008478 	.word	0x20008478

0800eb8c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d106      	bne.n	800eba8 <tcp_input_delayed_close+0x1c>
 800eb9a:	4b17      	ldr	r3, [pc, #92]	; (800ebf8 <tcp_input_delayed_close+0x6c>)
 800eb9c:	f240 225a 	movw	r2, #602	; 0x25a
 800eba0:	4916      	ldr	r1, [pc, #88]	; (800ebfc <tcp_input_delayed_close+0x70>)
 800eba2:	4817      	ldr	r0, [pc, #92]	; (800ec00 <tcp_input_delayed_close+0x74>)
 800eba4:	f008 fbde 	bl	8017364 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eba8:	4b16      	ldr	r3, [pc, #88]	; (800ec04 <tcp_input_delayed_close+0x78>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	f003 0310 	and.w	r3, r3, #16
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d01c      	beq.n	800ebee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	8b5b      	ldrh	r3, [r3, #26]
 800ebb8:	f003 0310 	and.w	r3, r3, #16
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10d      	bne.n	800ebdc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d008      	beq.n	800ebdc <tcp_input_delayed_close+0x50>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	6912      	ldr	r2, [r2, #16]
 800ebd4:	f06f 010e 	mvn.w	r1, #14
 800ebd8:	4610      	mov	r0, r2
 800ebda:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ebdc:	6879      	ldr	r1, [r7, #4]
 800ebde:	480a      	ldr	r0, [pc, #40]	; (800ec08 <tcp_input_delayed_close+0x7c>)
 800ebe0:	f7ff fa52 	bl	800e088 <tcp_pcb_remove>
    tcp_free(pcb);
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7fe f83f 	bl	800cc68 <tcp_free>
    return 1;
 800ebea:	2301      	movs	r3, #1
 800ebec:	e000      	b.n	800ebf0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	080195a4 	.word	0x080195a4
 800ebfc:	08019774 	.word	0x08019774
 800ec00:	080195f0 	.word	0x080195f0
 800ec04:	20004afd 	.word	0x20004afd
 800ec08:	2000bb98 	.word	0x2000bb98

0800ec0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec0c:	b590      	push	{r4, r7, lr}
 800ec0e:	b08b      	sub	sp, #44	; 0x2c
 800ec10:	af04      	add	r7, sp, #16
 800ec12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ec14:	4b6f      	ldr	r3, [pc, #444]	; (800edd4 <tcp_listen_input+0x1c8>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f003 0304 	and.w	r3, r3, #4
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f040 80d2 	bne.w	800edc6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d106      	bne.n	800ec36 <tcp_listen_input+0x2a>
 800ec28:	4b6b      	ldr	r3, [pc, #428]	; (800edd8 <tcp_listen_input+0x1cc>)
 800ec2a:	f240 2281 	movw	r2, #641	; 0x281
 800ec2e:	496b      	ldr	r1, [pc, #428]	; (800eddc <tcp_listen_input+0x1d0>)
 800ec30:	486b      	ldr	r0, [pc, #428]	; (800ede0 <tcp_listen_input+0x1d4>)
 800ec32:	f008 fb97 	bl	8017364 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ec36:	4b67      	ldr	r3, [pc, #412]	; (800edd4 <tcp_listen_input+0x1c8>)
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	f003 0310 	and.w	r3, r3, #16
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d019      	beq.n	800ec76 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec42:	4b68      	ldr	r3, [pc, #416]	; (800ede4 <tcp_listen_input+0x1d8>)
 800ec44:	6819      	ldr	r1, [r3, #0]
 800ec46:	4b68      	ldr	r3, [pc, #416]	; (800ede8 <tcp_listen_input+0x1dc>)
 800ec48:	881b      	ldrh	r3, [r3, #0]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	4b67      	ldr	r3, [pc, #412]	; (800edec <tcp_listen_input+0x1e0>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec52:	4b67      	ldr	r3, [pc, #412]	; (800edf0 <tcp_listen_input+0x1e4>)
 800ec54:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec56:	885b      	ldrh	r3, [r3, #2]
 800ec58:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec5a:	4a65      	ldr	r2, [pc, #404]	; (800edf0 <tcp_listen_input+0x1e4>)
 800ec5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec5e:	8812      	ldrh	r2, [r2, #0]
 800ec60:	b292      	uxth	r2, r2
 800ec62:	9202      	str	r2, [sp, #8]
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	4b63      	ldr	r3, [pc, #396]	; (800edf4 <tcp_listen_input+0x1e8>)
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	4b63      	ldr	r3, [pc, #396]	; (800edf8 <tcp_listen_input+0x1ec>)
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f002 ff7e 	bl	8011b70 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ec74:	e0a9      	b.n	800edca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ec76:	4b57      	ldr	r3, [pc, #348]	; (800edd4 <tcp_listen_input+0x1c8>)
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	f003 0302 	and.w	r3, r3, #2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f000 80a3 	beq.w	800edca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	7d5b      	ldrb	r3, [r3, #21]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7ff f929 	bl	800dee0 <tcp_alloc>
 800ec8e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d111      	bne.n	800ecba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	699b      	ldr	r3, [r3, #24]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <tcp_listen_input+0xa8>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	699b      	ldr	r3, [r3, #24]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	6910      	ldr	r0, [r2, #16]
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	2100      	movs	r1, #0
 800ecac:	4798      	blx	r3
 800ecae:	4603      	mov	r3, r0
 800ecb0:	73bb      	strb	r3, [r7, #14]
      return;
 800ecb2:	e08b      	b.n	800edcc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ecb4:	23f0      	movs	r3, #240	; 0xf0
 800ecb6:	73bb      	strb	r3, [r7, #14]
      return;
 800ecb8:	e088      	b.n	800edcc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ecba:	4b50      	ldr	r3, [pc, #320]	; (800edfc <tcp_listen_input+0x1f0>)
 800ecbc:	695a      	ldr	r2, [r3, #20]
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ecc2:	4b4e      	ldr	r3, [pc, #312]	; (800edfc <tcp_listen_input+0x1f0>)
 800ecc4:	691a      	ldr	r2, [r3, #16]
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	8ada      	ldrh	r2, [r3, #22]
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ecd2:	4b47      	ldr	r3, [pc, #284]	; (800edf0 <tcp_listen_input+0x1e4>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	2203      	movs	r2, #3
 800ece2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ece4:	4b41      	ldr	r3, [pc, #260]	; (800edec <tcp_listen_input+0x1e0>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	1c5a      	adds	r2, r3, #1
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ecf6:	6978      	ldr	r0, [r7, #20]
 800ecf8:	f7ff fa5a 	bl	800e1b0 <tcp_next_iss>
 800ecfc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	693a      	ldr	r2, [r7, #16]
 800ed08:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	693a      	ldr	r2, [r7, #16]
 800ed14:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed16:	4b35      	ldr	r3, [pc, #212]	; (800edec <tcp_listen_input+0x1e0>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	1e5a      	subs	r2, r3, #1
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	691a      	ldr	r2, [r3, #16]
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	7a5b      	ldrb	r3, [r3, #9]
 800ed32:	f003 030c 	and.w	r3, r3, #12
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	7a1a      	ldrb	r2, [r3, #8]
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ed44:	4b2e      	ldr	r3, [pc, #184]	; (800ee00 <tcp_listen_input+0x1f4>)
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	60da      	str	r2, [r3, #12]
 800ed4c:	4a2c      	ldr	r2, [pc, #176]	; (800ee00 <tcp_listen_input+0x1f4>)
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	6013      	str	r3, [r2, #0]
 800ed52:	f003 f8cf 	bl	8011ef4 <tcp_timer_needed>
 800ed56:	4b2b      	ldr	r3, [pc, #172]	; (800ee04 <tcp_listen_input+0x1f8>)
 800ed58:	2201      	movs	r2, #1
 800ed5a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ed5c:	6978      	ldr	r0, [r7, #20]
 800ed5e:	f001 fd8d 	bl	801087c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ed62:	4b23      	ldr	r3, [pc, #140]	; (800edf0 <tcp_listen_input+0x1e4>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	89db      	ldrh	r3, [r3, #14]
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	3304      	adds	r3, #4
 800ed84:	4618      	mov	r0, r3
 800ed86:	f006 fe5b 	bl	8015a40 <ip4_route>
 800ed8a:	4601      	mov	r1, r0
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	461a      	mov	r2, r3
 800ed92:	4620      	mov	r0, r4
 800ed94:	f7ff fa32 	bl	800e1fc <tcp_eff_send_mss_netif>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eda0:	2112      	movs	r1, #18
 800eda2:	6978      	ldr	r0, [r7, #20]
 800eda4:	f002 f842 	bl	8010e2c <tcp_enqueue_flags>
 800eda8:	4603      	mov	r3, r0
 800edaa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800edac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d004      	beq.n	800edbe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800edb4:	2100      	movs	r1, #0
 800edb6:	6978      	ldr	r0, [r7, #20]
 800edb8:	f7fe f980 	bl	800d0bc <tcp_abandon>
      return;
 800edbc:	e006      	b.n	800edcc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800edbe:	6978      	ldr	r0, [r7, #20]
 800edc0:	f002 f922 	bl	8011008 <tcp_output>
  return;
 800edc4:	e001      	b.n	800edca <tcp_listen_input+0x1be>
    return;
 800edc6:	bf00      	nop
 800edc8:	e000      	b.n	800edcc <tcp_listen_input+0x1c0>
  return;
 800edca:	bf00      	nop
}
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd90      	pop	{r4, r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20004afc 	.word	0x20004afc
 800edd8:	080195a4 	.word	0x080195a4
 800eddc:	0801979c 	.word	0x0801979c
 800ede0:	080195f0 	.word	0x080195f0
 800ede4:	20004af4 	.word	0x20004af4
 800ede8:	20004afa 	.word	0x20004afa
 800edec:	20004af0 	.word	0x20004af0
 800edf0:	20004ae0 	.word	0x20004ae0
 800edf4:	20008474 	.word	0x20008474
 800edf8:	20008478 	.word	0x20008478
 800edfc:	20008464 	.word	0x20008464
 800ee00:	2000bb98 	.word	0x2000bb98
 800ee04:	2000bb94 	.word	0x2000bb94

0800ee08 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ee10:	4b2f      	ldr	r3, [pc, #188]	; (800eed0 <tcp_timewait_input+0xc8>)
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	f003 0304 	and.w	r3, r3, #4
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d153      	bne.n	800eec4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d106      	bne.n	800ee30 <tcp_timewait_input+0x28>
 800ee22:	4b2c      	ldr	r3, [pc, #176]	; (800eed4 <tcp_timewait_input+0xcc>)
 800ee24:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee28:	492b      	ldr	r1, [pc, #172]	; (800eed8 <tcp_timewait_input+0xd0>)
 800ee2a:	482c      	ldr	r0, [pc, #176]	; (800eedc <tcp_timewait_input+0xd4>)
 800ee2c:	f008 fa9a 	bl	8017364 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee30:	4b27      	ldr	r3, [pc, #156]	; (800eed0 <tcp_timewait_input+0xc8>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d02a      	beq.n	800ee92 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ee3c:	4b28      	ldr	r3, [pc, #160]	; (800eee0 <tcp_timewait_input+0xd8>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	db2d      	blt.n	800eea6 <tcp_timewait_input+0x9e>
 800ee4a:	4b25      	ldr	r3, [pc, #148]	; (800eee0 <tcp_timewait_input+0xd8>)
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee52:	6879      	ldr	r1, [r7, #4]
 800ee54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee56:	440b      	add	r3, r1
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	dc23      	bgt.n	800eea6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee5e:	4b21      	ldr	r3, [pc, #132]	; (800eee4 <tcp_timewait_input+0xdc>)
 800ee60:	6819      	ldr	r1, [r3, #0]
 800ee62:	4b21      	ldr	r3, [pc, #132]	; (800eee8 <tcp_timewait_input+0xe0>)
 800ee64:	881b      	ldrh	r3, [r3, #0]
 800ee66:	461a      	mov	r2, r3
 800ee68:	4b1d      	ldr	r3, [pc, #116]	; (800eee0 <tcp_timewait_input+0xd8>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee6e:	4b1f      	ldr	r3, [pc, #124]	; (800eeec <tcp_timewait_input+0xe4>)
 800ee70:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee72:	885b      	ldrh	r3, [r3, #2]
 800ee74:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee76:	4a1d      	ldr	r2, [pc, #116]	; (800eeec <tcp_timewait_input+0xe4>)
 800ee78:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee7a:	8812      	ldrh	r2, [r2, #0]
 800ee7c:	b292      	uxth	r2, r2
 800ee7e:	9202      	str	r2, [sp, #8]
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	4b1b      	ldr	r3, [pc, #108]	; (800eef0 <tcp_timewait_input+0xe8>)
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	4b1b      	ldr	r3, [pc, #108]	; (800eef4 <tcp_timewait_input+0xec>)
 800ee88:	4602      	mov	r2, r0
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f002 fe70 	bl	8011b70 <tcp_rst>
      return;
 800ee90:	e01b      	b.n	800eeca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ee92:	4b0f      	ldr	r3, [pc, #60]	; (800eed0 <tcp_timewait_input+0xc8>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ee9e:	4b16      	ldr	r3, [pc, #88]	; (800eef8 <tcp_timewait_input+0xf0>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800eea6:	4b10      	ldr	r3, [pc, #64]	; (800eee8 <tcp_timewait_input+0xe0>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00c      	beq.n	800eec8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	8b5b      	ldrh	r3, [r3, #26]
 800eeb2:	f043 0302 	orr.w	r3, r3, #2
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f002 f8a3 	bl	8011008 <tcp_output>
  }
  return;
 800eec2:	e001      	b.n	800eec8 <tcp_timewait_input+0xc0>
    return;
 800eec4:	bf00      	nop
 800eec6:	e000      	b.n	800eeca <tcp_timewait_input+0xc2>
  return;
 800eec8:	bf00      	nop
}
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	20004afc 	.word	0x20004afc
 800eed4:	080195a4 	.word	0x080195a4
 800eed8:	080197bc 	.word	0x080197bc
 800eedc:	080195f0 	.word	0x080195f0
 800eee0:	20004af0 	.word	0x20004af0
 800eee4:	20004af4 	.word	0x20004af4
 800eee8:	20004afa 	.word	0x20004afa
 800eeec:	20004ae0 	.word	0x20004ae0
 800eef0:	20008474 	.word	0x20008474
 800eef4:	20008478 	.word	0x20008478
 800eef8:	2000bb9c 	.word	0x2000bb9c

0800eefc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800eefc:	b590      	push	{r4, r7, lr}
 800eefe:	b08d      	sub	sp, #52	; 0x34
 800ef00:	af04      	add	r7, sp, #16
 800ef02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <tcp_process+0x24>
 800ef12:	4ba5      	ldr	r3, [pc, #660]	; (800f1a8 <tcp_process+0x2ac>)
 800ef14:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef18:	49a4      	ldr	r1, [pc, #656]	; (800f1ac <tcp_process+0x2b0>)
 800ef1a:	48a5      	ldr	r0, [pc, #660]	; (800f1b0 <tcp_process+0x2b4>)
 800ef1c:	f008 fa22 	bl	8017364 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ef20:	4ba4      	ldr	r3, [pc, #656]	; (800f1b4 <tcp_process+0x2b8>)
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 0304 	and.w	r3, r3, #4
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d04e      	beq.n	800efca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	7d1b      	ldrb	r3, [r3, #20]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d108      	bne.n	800ef46 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef38:	4b9f      	ldr	r3, [pc, #636]	; (800f1b8 <tcp_process+0x2bc>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d123      	bne.n	800ef88 <tcp_process+0x8c>
        acceptable = 1;
 800ef40:	2301      	movs	r3, #1
 800ef42:	76fb      	strb	r3, [r7, #27]
 800ef44:	e020      	b.n	800ef88 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef4a:	4b9c      	ldr	r3, [pc, #624]	; (800f1bc <tcp_process+0x2c0>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d102      	bne.n	800ef58 <tcp_process+0x5c>
        acceptable = 1;
 800ef52:	2301      	movs	r3, #1
 800ef54:	76fb      	strb	r3, [r7, #27]
 800ef56:	e017      	b.n	800ef88 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ef58:	4b98      	ldr	r3, [pc, #608]	; (800f1bc <tcp_process+0x2c0>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	db10      	blt.n	800ef88 <tcp_process+0x8c>
 800ef66:	4b95      	ldr	r3, [pc, #596]	; (800f1bc <tcp_process+0x2c0>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6e:	6879      	ldr	r1, [r7, #4]
 800ef70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef72:	440b      	add	r3, r1
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	dc06      	bgt.n	800ef88 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	8b5b      	ldrh	r3, [r3, #26]
 800ef7e:	f043 0302 	orr.w	r3, r3, #2
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ef88:	7efb      	ldrb	r3, [r7, #27]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d01b      	beq.n	800efc6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	7d1b      	ldrb	r3, [r3, #20]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d106      	bne.n	800efa4 <tcp_process+0xa8>
 800ef96:	4b84      	ldr	r3, [pc, #528]	; (800f1a8 <tcp_process+0x2ac>)
 800ef98:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ef9c:	4988      	ldr	r1, [pc, #544]	; (800f1c0 <tcp_process+0x2c4>)
 800ef9e:	4884      	ldr	r0, [pc, #528]	; (800f1b0 <tcp_process+0x2b4>)
 800efa0:	f008 f9e0 	bl	8017364 <iprintf>
      recv_flags |= TF_RESET;
 800efa4:	4b87      	ldr	r3, [pc, #540]	; (800f1c4 <tcp_process+0x2c8>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	f043 0308 	orr.w	r3, r3, #8
 800efac:	b2da      	uxtb	r2, r3
 800efae:	4b85      	ldr	r3, [pc, #532]	; (800f1c4 <tcp_process+0x2c8>)
 800efb0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	8b5b      	ldrh	r3, [r3, #26]
 800efb6:	f023 0301 	bic.w	r3, r3, #1
 800efba:	b29a      	uxth	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800efc0:	f06f 030d 	mvn.w	r3, #13
 800efc4:	e37a      	b.n	800f6bc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e378      	b.n	800f6bc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800efca:	4b7a      	ldr	r3, [pc, #488]	; (800f1b4 <tcp_process+0x2b8>)
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	f003 0302 	and.w	r3, r3, #2
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d010      	beq.n	800eff8 <tcp_process+0xfc>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7d1b      	ldrb	r3, [r3, #20]
 800efda:	2b02      	cmp	r3, #2
 800efdc:	d00c      	beq.n	800eff8 <tcp_process+0xfc>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	7d1b      	ldrb	r3, [r3, #20]
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d008      	beq.n	800eff8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8b5b      	ldrh	r3, [r3, #26]
 800efea:	f043 0302 	orr.w	r3, r3, #2
 800efee:	b29a      	uxth	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	e361      	b.n	800f6bc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	8b5b      	ldrh	r3, [r3, #26]
 800effc:	f003 0310 	and.w	r3, r3, #16
 800f000:	2b00      	cmp	r3, #0
 800f002:	d103      	bne.n	800f00c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f004:	4b70      	ldr	r3, [pc, #448]	; (800f1c8 <tcp_process+0x2cc>)
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f001 fc2d 	bl	801087c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	7d1b      	ldrb	r3, [r3, #20]
 800f026:	3b02      	subs	r3, #2
 800f028:	2b07      	cmp	r3, #7
 800f02a:	f200 8337 	bhi.w	800f69c <tcp_process+0x7a0>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <tcp_process+0x138>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f055 	.word	0x0800f055
 800f038:	0800f285 	.word	0x0800f285
 800f03c:	0800f3fd 	.word	0x0800f3fd
 800f040:	0800f427 	.word	0x0800f427
 800f044:	0800f54b 	.word	0x0800f54b
 800f048:	0800f3fd 	.word	0x0800f3fd
 800f04c:	0800f5d7 	.word	0x0800f5d7
 800f050:	0800f667 	.word	0x0800f667
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f054:	4b57      	ldr	r3, [pc, #348]	; (800f1b4 <tcp_process+0x2b8>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	f003 0310 	and.w	r3, r3, #16
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f000 80e4 	beq.w	800f22a <tcp_process+0x32e>
 800f062:	4b54      	ldr	r3, [pc, #336]	; (800f1b4 <tcp_process+0x2b8>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	f003 0302 	and.w	r3, r3, #2
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f000 80dd 	beq.w	800f22a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	4b50      	ldr	r3, [pc, #320]	; (800f1b8 <tcp_process+0x2bc>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	f040 80d5 	bne.w	800f22a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f080:	4b4e      	ldr	r3, [pc, #312]	; (800f1bc <tcp_process+0x2c0>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f092:	4b49      	ldr	r3, [pc, #292]	; (800f1b8 <tcp_process+0x2bc>)
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f09a:	4b4c      	ldr	r3, [pc, #304]	; (800f1cc <tcp_process+0x2d0>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	89db      	ldrh	r3, [r3, #14]
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f0b4:	4b41      	ldr	r3, [pc, #260]	; (800f1bc <tcp_process+0x2c0>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	1e5a      	subs	r2, r3, #1
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2204      	movs	r2, #4
 800f0c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	3304      	adds	r3, #4
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f006 fcb7 	bl	8015a40 <ip4_route>
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	461a      	mov	r2, r3
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f7ff f88e 	bl	800e1fc <tcp_eff_send_mss_netif>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ec:	009a      	lsls	r2, r3, #2
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f0f8:	428b      	cmp	r3, r1
 800f0fa:	bf38      	it	cc
 800f0fc:	460b      	movcc	r3, r1
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d204      	bcs.n	800f10c <tcp_process+0x210>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	b29b      	uxth	r3, r3
 800f10a:	e00d      	b.n	800f128 <tcp_process+0x22c>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	f241 121c 	movw	r2, #4380	; 0x111c
 800f116:	4293      	cmp	r3, r2
 800f118:	d904      	bls.n	800f124 <tcp_process+0x228>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	b29b      	uxth	r3, r3
 800f122:	e001      	b.n	800f128 <tcp_process+0x22c>
 800f124:	f241 131c 	movw	r3, #4380	; 0x111c
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <tcp_process+0x24a>
 800f138:	4b1b      	ldr	r3, [pc, #108]	; (800f1a8 <tcp_process+0x2ac>)
 800f13a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f13e:	4924      	ldr	r1, [pc, #144]	; (800f1d0 <tcp_process+0x2d4>)
 800f140:	481b      	ldr	r0, [pc, #108]	; (800f1b0 <tcp_process+0x2b4>)
 800f142:	f008 f90f 	bl	8017364 <iprintf>
        --pcb->snd_queuelen;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f14c:	3b01      	subs	r3, #1
 800f14e:	b29a      	uxth	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f15a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d111      	bne.n	800f186 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f166:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <tcp_process+0x280>
 800f16e:	4b0e      	ldr	r3, [pc, #56]	; (800f1a8 <tcp_process+0x2ac>)
 800f170:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f174:	4917      	ldr	r1, [pc, #92]	; (800f1d4 <tcp_process+0x2d8>)
 800f176:	480e      	ldr	r0, [pc, #56]	; (800f1b0 <tcp_process+0x2b4>)
 800f178:	f008 f8f4 	bl	8017364 <iprintf>
          pcb->unsent = rseg->next;
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	66da      	str	r2, [r3, #108]	; 0x6c
 800f184:	e003      	b.n	800f18e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f18e:	69f8      	ldr	r0, [r7, #28]
 800f190:	f7fe fd3d 	bl	800dc0e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d11d      	bne.n	800f1d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1a2:	861a      	strh	r2, [r3, #48]	; 0x30
 800f1a4:	e01f      	b.n	800f1e6 <tcp_process+0x2ea>
 800f1a6:	bf00      	nop
 800f1a8:	080195a4 	.word	0x080195a4
 800f1ac:	080197dc 	.word	0x080197dc
 800f1b0:	080195f0 	.word	0x080195f0
 800f1b4:	20004afc 	.word	0x20004afc
 800f1b8:	20004af4 	.word	0x20004af4
 800f1bc:	20004af0 	.word	0x20004af0
 800f1c0:	080197f8 	.word	0x080197f8
 800f1c4:	20004afd 	.word	0x20004afd
 800f1c8:	2000bb9c 	.word	0x2000bb9c
 800f1cc:	20004ae0 	.word	0x20004ae0
 800f1d0:	08019818 	.word	0x08019818
 800f1d4:	08019830 	.word	0x08019830
        } else {
          pcb->rtime = 0;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00a      	beq.n	800f206 <tcp_process+0x30a>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	6910      	ldr	r0, [r2, #16]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	6879      	ldr	r1, [r7, #4]
 800f1fe:	4798      	blx	r3
 800f200:	4603      	mov	r3, r0
 800f202:	76bb      	strb	r3, [r7, #26]
 800f204:	e001      	b.n	800f20a <tcp_process+0x30e>
 800f206:	2300      	movs	r3, #0
 800f208:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f20a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f20e:	f113 0f0d 	cmn.w	r3, #13
 800f212:	d102      	bne.n	800f21a <tcp_process+0x31e>
          return ERR_ABRT;
 800f214:	f06f 030c 	mvn.w	r3, #12
 800f218:	e250      	b.n	800f6bc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	8b5b      	ldrh	r3, [r3, #26]
 800f21e:	f043 0302 	orr.w	r3, r3, #2
 800f222:	b29a      	uxth	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f228:	e23a      	b.n	800f6a0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f22a:	4b9d      	ldr	r3, [pc, #628]	; (800f4a0 <tcp_process+0x5a4>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	f003 0310 	and.w	r3, r3, #16
 800f232:	2b00      	cmp	r3, #0
 800f234:	f000 8234 	beq.w	800f6a0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f238:	4b9a      	ldr	r3, [pc, #616]	; (800f4a4 <tcp_process+0x5a8>)
 800f23a:	6819      	ldr	r1, [r3, #0]
 800f23c:	4b9a      	ldr	r3, [pc, #616]	; (800f4a8 <tcp_process+0x5ac>)
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	461a      	mov	r2, r3
 800f242:	4b9a      	ldr	r3, [pc, #616]	; (800f4ac <tcp_process+0x5b0>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f248:	4b99      	ldr	r3, [pc, #612]	; (800f4b0 <tcp_process+0x5b4>)
 800f24a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f24c:	885b      	ldrh	r3, [r3, #2]
 800f24e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f250:	4a97      	ldr	r2, [pc, #604]	; (800f4b0 <tcp_process+0x5b4>)
 800f252:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f254:	8812      	ldrh	r2, [r2, #0]
 800f256:	b292      	uxth	r2, r2
 800f258:	9202      	str	r2, [sp, #8]
 800f25a:	9301      	str	r3, [sp, #4]
 800f25c:	4b95      	ldr	r3, [pc, #596]	; (800f4b4 <tcp_process+0x5b8>)
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	4b95      	ldr	r3, [pc, #596]	; (800f4b8 <tcp_process+0x5bc>)
 800f262:	4602      	mov	r2, r0
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f002 fc83 	bl	8011b70 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f270:	2b05      	cmp	r3, #5
 800f272:	f200 8215 	bhi.w	800f6a0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f002 fa4d 	bl	801171c <tcp_rexmit_rto>
      break;
 800f282:	e20d      	b.n	800f6a0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f284:	4b86      	ldr	r3, [pc, #536]	; (800f4a0 <tcp_process+0x5a4>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	f003 0310 	and.w	r3, r3, #16
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f000 80a1 	beq.w	800f3d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f292:	4b84      	ldr	r3, [pc, #528]	; (800f4a4 <tcp_process+0x5a8>)
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	3b01      	subs	r3, #1
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	db7e      	blt.n	800f3a0 <tcp_process+0x4a4>
 800f2a2:	4b80      	ldr	r3, [pc, #512]	; (800f4a4 <tcp_process+0x5a8>)
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dc77      	bgt.n	800f3a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2204      	movs	r2, #4
 800f2b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d102      	bne.n	800f2c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f2be:	23fa      	movs	r3, #250	; 0xfa
 800f2c0:	76bb      	strb	r3, [r7, #26]
 800f2c2:	e01d      	b.n	800f300 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2c8:	699b      	ldr	r3, [r3, #24]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d106      	bne.n	800f2dc <tcp_process+0x3e0>
 800f2ce:	4b7b      	ldr	r3, [pc, #492]	; (800f4bc <tcp_process+0x5c0>)
 800f2d0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f2d4:	497a      	ldr	r1, [pc, #488]	; (800f4c0 <tcp_process+0x5c4>)
 800f2d6:	487b      	ldr	r0, [pc, #492]	; (800f4c4 <tcp_process+0x5c8>)
 800f2d8:	f008 f844 	bl	8017364 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2e0:	699b      	ldr	r3, [r3, #24]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00a      	beq.n	800f2fc <tcp_process+0x400>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	6910      	ldr	r0, [r2, #16]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	6879      	ldr	r1, [r7, #4]
 800f2f4:	4798      	blx	r3
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	76bb      	strb	r3, [r7, #26]
 800f2fa:	e001      	b.n	800f300 <tcp_process+0x404>
 800f2fc:	23f0      	movs	r3, #240	; 0xf0
 800f2fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f300:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00a      	beq.n	800f31e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f308:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f30c:	f113 0f0d 	cmn.w	r3, #13
 800f310:	d002      	beq.n	800f318 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7fd ff90 	bl	800d238 <tcp_abort>
            }
            return ERR_ABRT;
 800f318:	f06f 030c 	mvn.w	r3, #12
 800f31c:	e1ce      	b.n	800f6bc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fae0 	bl	800f8e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f324:	4b68      	ldr	r3, [pc, #416]	; (800f4c8 <tcp_process+0x5cc>)
 800f326:	881b      	ldrh	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d005      	beq.n	800f338 <tcp_process+0x43c>
            recv_acked--;
 800f32c:	4b66      	ldr	r3, [pc, #408]	; (800f4c8 <tcp_process+0x5cc>)
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	3b01      	subs	r3, #1
 800f332:	b29a      	uxth	r2, r3
 800f334:	4b64      	ldr	r3, [pc, #400]	; (800f4c8 <tcp_process+0x5cc>)
 800f336:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f33c:	009a      	lsls	r2, r3, #2
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	f241 111c 	movw	r1, #4380	; 0x111c
 800f348:	428b      	cmp	r3, r1
 800f34a:	bf38      	it	cc
 800f34c:	460b      	movcc	r3, r1
 800f34e:	429a      	cmp	r2, r3
 800f350:	d204      	bcs.n	800f35c <tcp_process+0x460>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	b29b      	uxth	r3, r3
 800f35a:	e00d      	b.n	800f378 <tcp_process+0x47c>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f360:	005b      	lsls	r3, r3, #1
 800f362:	f241 121c 	movw	r2, #4380	; 0x111c
 800f366:	4293      	cmp	r3, r2
 800f368:	d904      	bls.n	800f374 <tcp_process+0x478>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f36e:	005b      	lsls	r3, r3, #1
 800f370:	b29b      	uxth	r3, r3
 800f372:	e001      	b.n	800f378 <tcp_process+0x47c>
 800f374:	f241 131c 	movw	r3, #4380	; 0x111c
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f37e:	4b53      	ldr	r3, [pc, #332]	; (800f4cc <tcp_process+0x5d0>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	f003 0320 	and.w	r3, r3, #32
 800f386:	2b00      	cmp	r3, #0
 800f388:	d037      	beq.n	800f3fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	8b5b      	ldrh	r3, [r3, #26]
 800f38e:	f043 0302 	orr.w	r3, r3, #2
 800f392:	b29a      	uxth	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2207      	movs	r2, #7
 800f39c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f39e:	e02c      	b.n	800f3fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3a0:	4b40      	ldr	r3, [pc, #256]	; (800f4a4 <tcp_process+0x5a8>)
 800f3a2:	6819      	ldr	r1, [r3, #0]
 800f3a4:	4b40      	ldr	r3, [pc, #256]	; (800f4a8 <tcp_process+0x5ac>)
 800f3a6:	881b      	ldrh	r3, [r3, #0]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	4b40      	ldr	r3, [pc, #256]	; (800f4ac <tcp_process+0x5b0>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3b0:	4b3f      	ldr	r3, [pc, #252]	; (800f4b0 <tcp_process+0x5b4>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3b4:	885b      	ldrh	r3, [r3, #2]
 800f3b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3b8:	4a3d      	ldr	r2, [pc, #244]	; (800f4b0 <tcp_process+0x5b4>)
 800f3ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3bc:	8812      	ldrh	r2, [r2, #0]
 800f3be:	b292      	uxth	r2, r2
 800f3c0:	9202      	str	r2, [sp, #8]
 800f3c2:	9301      	str	r3, [sp, #4]
 800f3c4:	4b3b      	ldr	r3, [pc, #236]	; (800f4b4 <tcp_process+0x5b8>)
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	4b3b      	ldr	r3, [pc, #236]	; (800f4b8 <tcp_process+0x5bc>)
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f002 fbcf 	bl	8011b70 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f3d2:	e167      	b.n	800f6a4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f3d4:	4b32      	ldr	r3, [pc, #200]	; (800f4a0 <tcp_process+0x5a4>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	f003 0302 	and.w	r3, r3, #2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 8161 	beq.w	800f6a4 <tcp_process+0x7a8>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e6:	1e5a      	subs	r2, r3, #1
 800f3e8:	4b30      	ldr	r3, [pc, #192]	; (800f4ac <tcp_process+0x5b0>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	f040 8159 	bne.w	800f6a4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f002 f9b4 	bl	8011760 <tcp_rexmit>
      break;
 800f3f8:	e154      	b.n	800f6a4 <tcp_process+0x7a8>
 800f3fa:	e153      	b.n	800f6a4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fa71 	bl	800f8e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f402:	4b32      	ldr	r3, [pc, #200]	; (800f4cc <tcp_process+0x5d0>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	f003 0320 	and.w	r3, r3, #32
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f000 814c 	beq.w	800f6a8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	8b5b      	ldrh	r3, [r3, #26]
 800f414:	f043 0302 	orr.w	r3, r3, #2
 800f418:	b29a      	uxth	r2, r3
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2207      	movs	r2, #7
 800f422:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f424:	e140      	b.n	800f6a8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 fa5c 	bl	800f8e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f42c:	4b27      	ldr	r3, [pc, #156]	; (800f4cc <tcp_process+0x5d0>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 0320 	and.w	r3, r3, #32
 800f434:	2b00      	cmp	r3, #0
 800f436:	d071      	beq.n	800f51c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f438:	4b19      	ldr	r3, [pc, #100]	; (800f4a0 <tcp_process+0x5a4>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	f003 0310 	and.w	r3, r3, #16
 800f440:	2b00      	cmp	r3, #0
 800f442:	d060      	beq.n	800f506 <tcp_process+0x60a>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f448:	4b16      	ldr	r3, [pc, #88]	; (800f4a4 <tcp_process+0x5a8>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d15a      	bne.n	800f506 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f454:	2b00      	cmp	r3, #0
 800f456:	d156      	bne.n	800f506 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	8b5b      	ldrh	r3, [r3, #26]
 800f45c:	f043 0302 	orr.w	r3, r3, #2
 800f460:	b29a      	uxth	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7fe fdbe 	bl	800dfe8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f46c:	4b18      	ldr	r3, [pc, #96]	; (800f4d0 <tcp_process+0x5d4>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	429a      	cmp	r2, r3
 800f474:	d105      	bne.n	800f482 <tcp_process+0x586>
 800f476:	4b16      	ldr	r3, [pc, #88]	; (800f4d0 <tcp_process+0x5d4>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	4a14      	ldr	r2, [pc, #80]	; (800f4d0 <tcp_process+0x5d4>)
 800f47e:	6013      	str	r3, [r2, #0]
 800f480:	e02e      	b.n	800f4e0 <tcp_process+0x5e4>
 800f482:	4b13      	ldr	r3, [pc, #76]	; (800f4d0 <tcp_process+0x5d4>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	617b      	str	r3, [r7, #20]
 800f488:	e027      	b.n	800f4da <tcp_process+0x5de>
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	429a      	cmp	r2, r3
 800f492:	d11f      	bne.n	800f4d4 <tcp_process+0x5d8>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68da      	ldr	r2, [r3, #12]
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	60da      	str	r2, [r3, #12]
 800f49c:	e020      	b.n	800f4e0 <tcp_process+0x5e4>
 800f49e:	bf00      	nop
 800f4a0:	20004afc 	.word	0x20004afc
 800f4a4:	20004af4 	.word	0x20004af4
 800f4a8:	20004afa 	.word	0x20004afa
 800f4ac:	20004af0 	.word	0x20004af0
 800f4b0:	20004ae0 	.word	0x20004ae0
 800f4b4:	20008474 	.word	0x20008474
 800f4b8:	20008478 	.word	0x20008478
 800f4bc:	080195a4 	.word	0x080195a4
 800f4c0:	08019844 	.word	0x08019844
 800f4c4:	080195f0 	.word	0x080195f0
 800f4c8:	20004af8 	.word	0x20004af8
 800f4cc:	20004afd 	.word	0x20004afd
 800f4d0:	2000bb98 	.word	0x2000bb98
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	617b      	str	r3, [r7, #20]
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1d4      	bne.n	800f48a <tcp_process+0x58e>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	60da      	str	r2, [r3, #12]
 800f4e6:	4b77      	ldr	r3, [pc, #476]	; (800f6c4 <tcp_process+0x7c8>)
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	220a      	movs	r2, #10
 800f4f0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f4f2:	4b75      	ldr	r3, [pc, #468]	; (800f6c8 <tcp_process+0x7cc>)
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	60da      	str	r2, [r3, #12]
 800f4fa:	4a73      	ldr	r2, [pc, #460]	; (800f6c8 <tcp_process+0x7cc>)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	f002 fcf8 	bl	8011ef4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f504:	e0d2      	b.n	800f6ac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	8b5b      	ldrh	r3, [r3, #26]
 800f50a:	f043 0302 	orr.w	r3, r3, #2
 800f50e:	b29a      	uxth	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2208      	movs	r2, #8
 800f518:	751a      	strb	r2, [r3, #20]
      break;
 800f51a:	e0c7      	b.n	800f6ac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f51c:	4b6b      	ldr	r3, [pc, #428]	; (800f6cc <tcp_process+0x7d0>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	f003 0310 	and.w	r3, r3, #16
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 80c1 	beq.w	800f6ac <tcp_process+0x7b0>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f52e:	4b68      	ldr	r3, [pc, #416]	; (800f6d0 <tcp_process+0x7d4>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	f040 80ba 	bne.w	800f6ac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f040 80b5 	bne.w	800f6ac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2206      	movs	r2, #6
 800f546:	751a      	strb	r2, [r3, #20]
      break;
 800f548:	e0b0      	b.n	800f6ac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 f9ca 	bl	800f8e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f550:	4b60      	ldr	r3, [pc, #384]	; (800f6d4 <tcp_process+0x7d8>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	f003 0320 	and.w	r3, r3, #32
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f000 80a9 	beq.w	800f6b0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8b5b      	ldrh	r3, [r3, #26]
 800f562:	f043 0302 	orr.w	r3, r3, #2
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7fe fd3b 	bl	800dfe8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f572:	4b59      	ldr	r3, [pc, #356]	; (800f6d8 <tcp_process+0x7dc>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d105      	bne.n	800f588 <tcp_process+0x68c>
 800f57c:	4b56      	ldr	r3, [pc, #344]	; (800f6d8 <tcp_process+0x7dc>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	4a55      	ldr	r2, [pc, #340]	; (800f6d8 <tcp_process+0x7dc>)
 800f584:	6013      	str	r3, [r2, #0]
 800f586:	e013      	b.n	800f5b0 <tcp_process+0x6b4>
 800f588:	4b53      	ldr	r3, [pc, #332]	; (800f6d8 <tcp_process+0x7dc>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	613b      	str	r3, [r7, #16]
 800f58e:	e00c      	b.n	800f5aa <tcp_process+0x6ae>
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	429a      	cmp	r2, r3
 800f598:	d104      	bne.n	800f5a4 <tcp_process+0x6a8>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68da      	ldr	r2, [r3, #12]
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	e005      	b.n	800f5b0 <tcp_process+0x6b4>
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	613b      	str	r3, [r7, #16]
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1ef      	bne.n	800f590 <tcp_process+0x694>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	60da      	str	r2, [r3, #12]
 800f5b6:	4b43      	ldr	r3, [pc, #268]	; (800f6c4 <tcp_process+0x7c8>)
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	220a      	movs	r2, #10
 800f5c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f5c2:	4b41      	ldr	r3, [pc, #260]	; (800f6c8 <tcp_process+0x7cc>)
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	60da      	str	r2, [r3, #12]
 800f5ca:	4a3f      	ldr	r2, [pc, #252]	; (800f6c8 <tcp_process+0x7cc>)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6013      	str	r3, [r2, #0]
 800f5d0:	f002 fc90 	bl	8011ef4 <tcp_timer_needed>
      }
      break;
 800f5d4:	e06c      	b.n	800f6b0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f984 	bl	800f8e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f5dc:	4b3b      	ldr	r3, [pc, #236]	; (800f6cc <tcp_process+0x7d0>)
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	f003 0310 	and.w	r3, r3, #16
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d065      	beq.n	800f6b4 <tcp_process+0x7b8>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5ec:	4b38      	ldr	r3, [pc, #224]	; (800f6d0 <tcp_process+0x7d4>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d15f      	bne.n	800f6b4 <tcp_process+0x7b8>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d15b      	bne.n	800f6b4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7fe fcf3 	bl	800dfe8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f602:	4b35      	ldr	r3, [pc, #212]	; (800f6d8 <tcp_process+0x7dc>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d105      	bne.n	800f618 <tcp_process+0x71c>
 800f60c:	4b32      	ldr	r3, [pc, #200]	; (800f6d8 <tcp_process+0x7dc>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	4a31      	ldr	r2, [pc, #196]	; (800f6d8 <tcp_process+0x7dc>)
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	e013      	b.n	800f640 <tcp_process+0x744>
 800f618:	4b2f      	ldr	r3, [pc, #188]	; (800f6d8 <tcp_process+0x7dc>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	60fb      	str	r3, [r7, #12]
 800f61e:	e00c      	b.n	800f63a <tcp_process+0x73e>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	429a      	cmp	r2, r3
 800f628:	d104      	bne.n	800f634 <tcp_process+0x738>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68da      	ldr	r2, [r3, #12]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	60da      	str	r2, [r3, #12]
 800f632:	e005      	b.n	800f640 <tcp_process+0x744>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	60fb      	str	r3, [r7, #12]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1ef      	bne.n	800f620 <tcp_process+0x724>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	60da      	str	r2, [r3, #12]
 800f646:	4b1f      	ldr	r3, [pc, #124]	; (800f6c4 <tcp_process+0x7c8>)
 800f648:	2201      	movs	r2, #1
 800f64a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	220a      	movs	r2, #10
 800f650:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f652:	4b1d      	ldr	r3, [pc, #116]	; (800f6c8 <tcp_process+0x7cc>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	60da      	str	r2, [r3, #12]
 800f65a:	4a1b      	ldr	r2, [pc, #108]	; (800f6c8 <tcp_process+0x7cc>)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	f002 fc48 	bl	8011ef4 <tcp_timer_needed>
      }
      break;
 800f664:	e026      	b.n	800f6b4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 f93c 	bl	800f8e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f66c:	4b17      	ldr	r3, [pc, #92]	; (800f6cc <tcp_process+0x7d0>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	f003 0310 	and.w	r3, r3, #16
 800f674:	2b00      	cmp	r3, #0
 800f676:	d01f      	beq.n	800f6b8 <tcp_process+0x7bc>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f67c:	4b14      	ldr	r3, [pc, #80]	; (800f6d0 <tcp_process+0x7d4>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d119      	bne.n	800f6b8 <tcp_process+0x7bc>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d115      	bne.n	800f6b8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f68c:	4b11      	ldr	r3, [pc, #68]	; (800f6d4 <tcp_process+0x7d8>)
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	f043 0310 	orr.w	r3, r3, #16
 800f694:	b2da      	uxtb	r2, r3
 800f696:	4b0f      	ldr	r3, [pc, #60]	; (800f6d4 <tcp_process+0x7d8>)
 800f698:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f69a:	e00d      	b.n	800f6b8 <tcp_process+0x7bc>
    default:
      break;
 800f69c:	bf00      	nop
 800f69e:	e00c      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6a0:	bf00      	nop
 800f6a2:	e00a      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6a4:	bf00      	nop
 800f6a6:	e008      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6a8:	bf00      	nop
 800f6aa:	e006      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6ac:	bf00      	nop
 800f6ae:	e004      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6b0:	bf00      	nop
 800f6b2:	e002      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6b4:	bf00      	nop
 800f6b6:	e000      	b.n	800f6ba <tcp_process+0x7be>
      break;
 800f6b8:	bf00      	nop
  }
  return ERR_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3724      	adds	r7, #36	; 0x24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd90      	pop	{r4, r7, pc}
 800f6c4:	2000bb94 	.word	0x2000bb94
 800f6c8:	2000bba8 	.word	0x2000bba8
 800f6cc:	20004afc 	.word	0x20004afc
 800f6d0:	20004af4 	.word	0x20004af4
 800f6d4:	20004afd 	.word	0x20004afd
 800f6d8:	2000bb98 	.word	0x2000bb98

0800f6dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f6dc:	b590      	push	{r4, r7, lr}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d106      	bne.n	800f6fa <tcp_oos_insert_segment+0x1e>
 800f6ec:	4b3b      	ldr	r3, [pc, #236]	; (800f7dc <tcp_oos_insert_segment+0x100>)
 800f6ee:	f240 421f 	movw	r2, #1055	; 0x41f
 800f6f2:	493b      	ldr	r1, [pc, #236]	; (800f7e0 <tcp_oos_insert_segment+0x104>)
 800f6f4:	483b      	ldr	r0, [pc, #236]	; (800f7e4 <tcp_oos_insert_segment+0x108>)
 800f6f6:	f007 fe35 	bl	8017364 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	899b      	ldrh	r3, [r3, #12]
 800f700:	b29b      	uxth	r3, r3
 800f702:	4618      	mov	r0, r3
 800f704:	f7fb fc3c 	bl	800af80 <lwip_htons>
 800f708:	4603      	mov	r3, r0
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	f003 0301 	and.w	r3, r3, #1
 800f710:	2b00      	cmp	r3, #0
 800f712:	d028      	beq.n	800f766 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f714:	6838      	ldr	r0, [r7, #0]
 800f716:	f7fe fa65 	bl	800dbe4 <tcp_segs_free>
    next = NULL;
 800f71a:	2300      	movs	r3, #0
 800f71c:	603b      	str	r3, [r7, #0]
 800f71e:	e056      	b.n	800f7ce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	899b      	ldrh	r3, [r3, #12]
 800f726:	b29b      	uxth	r3, r3
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fb fc29 	bl	800af80 <lwip_htons>
 800f72e:	4603      	mov	r3, r0
 800f730:	b2db      	uxtb	r3, r3
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00d      	beq.n	800f756 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	899b      	ldrh	r3, [r3, #12]
 800f740:	b29c      	uxth	r4, r3
 800f742:	2001      	movs	r0, #1
 800f744:	f7fb fc1c 	bl	800af80 <lwip_htons>
 800f748:	4603      	mov	r3, r0
 800f74a:	461a      	mov	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	4322      	orrs	r2, r4
 800f752:	b292      	uxth	r2, r2
 800f754:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7fe fa54 	bl	800dc0e <tcp_seg_free>
    while (next &&
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00e      	beq.n	800f78a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	891b      	ldrh	r3, [r3, #8]
 800f770:	461a      	mov	r2, r3
 800f772:	4b1d      	ldr	r3, [pc, #116]	; (800f7e8 <tcp_oos_insert_segment+0x10c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	441a      	add	r2, r3
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	8909      	ldrh	r1, [r1, #8]
 800f782:	440b      	add	r3, r1
 800f784:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f786:	2b00      	cmp	r3, #0
 800f788:	daca      	bge.n	800f720 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d01e      	beq.n	800f7ce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	461a      	mov	r2, r3
 800f796:	4b14      	ldr	r3, [pc, #80]	; (800f7e8 <tcp_oos_insert_segment+0x10c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	441a      	add	r2, r3
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dd12      	ble.n	800f7ce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	4b0d      	ldr	r3, [pc, #52]	; (800f7e8 <tcp_oos_insert_segment+0x10c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	685a      	ldr	r2, [r3, #4]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	891b      	ldrh	r3, [r3, #8]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	f7fc fe0b 	bl	800c3e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	601a      	str	r2, [r3, #0]
}
 800f7d4:	bf00      	nop
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd90      	pop	{r4, r7, pc}
 800f7dc:	080195a4 	.word	0x080195a4
 800f7e0:	08019864 	.word	0x08019864
 800f7e4:	080195f0 	.word	0x080195f0
 800f7e8:	20004af0 	.word	0x20004af0

0800f7ec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f7ec:	b5b0      	push	{r4, r5, r7, lr}
 800f7ee:	b086      	sub	sp, #24
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
 800f7f8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f7fa:	e03e      	b.n	800f87a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fc fffe 	bl	800c80c <pbuf_clen>
 800f810:	4603      	mov	r3, r0
 800f812:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f81a:	8a7a      	ldrh	r2, [r7, #18]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d906      	bls.n	800f82e <tcp_free_acked_segments+0x42>
 800f820:	4b2a      	ldr	r3, [pc, #168]	; (800f8cc <tcp_free_acked_segments+0xe0>)
 800f822:	f240 4257 	movw	r2, #1111	; 0x457
 800f826:	492a      	ldr	r1, [pc, #168]	; (800f8d0 <tcp_free_acked_segments+0xe4>)
 800f828:	482a      	ldr	r0, [pc, #168]	; (800f8d4 <tcp_free_acked_segments+0xe8>)
 800f82a:	f007 fd9b 	bl	8017364 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f834:	8a7b      	ldrh	r3, [r7, #18]
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	b29a      	uxth	r2, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	891a      	ldrh	r2, [r3, #8]
 800f844:	4b24      	ldr	r3, [pc, #144]	; (800f8d8 <tcp_free_acked_segments+0xec>)
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	4413      	add	r3, r2
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	4b22      	ldr	r3, [pc, #136]	; (800f8d8 <tcp_free_acked_segments+0xec>)
 800f84e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f850:	6978      	ldr	r0, [r7, #20]
 800f852:	f7fe f9dc 	bl	800dc0e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00c      	beq.n	800f87a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d109      	bne.n	800f87a <tcp_free_acked_segments+0x8e>
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d106      	bne.n	800f87a <tcp_free_acked_segments+0x8e>
 800f86c:	4b17      	ldr	r3, [pc, #92]	; (800f8cc <tcp_free_acked_segments+0xe0>)
 800f86e:	f240 4261 	movw	r2, #1121	; 0x461
 800f872:	491a      	ldr	r1, [pc, #104]	; (800f8dc <tcp_free_acked_segments+0xf0>)
 800f874:	4817      	ldr	r0, [pc, #92]	; (800f8d4 <tcp_free_acked_segments+0xe8>)
 800f876:	f007 fd75 	bl	8017364 <iprintf>
  while (seg_list != NULL &&
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d020      	beq.n	800f8c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	4618      	mov	r0, r3
 800f888:	f7fb fb8f 	bl	800afaa <lwip_htonl>
 800f88c:	4604      	mov	r4, r0
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	891b      	ldrh	r3, [r3, #8]
 800f892:	461d      	mov	r5, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	899b      	ldrh	r3, [r3, #12]
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fb fb6f 	bl	800af80 <lwip_htons>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	f003 0303 	and.w	r3, r3, #3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d001      	beq.n	800f8b2 <tcp_free_acked_segments+0xc6>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e000      	b.n	800f8b4 <tcp_free_acked_segments+0xc8>
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	442b      	add	r3, r5
 800f8b6:	18e2      	adds	r2, r4, r3
 800f8b8:	4b09      	ldr	r3, [pc, #36]	; (800f8e0 <tcp_free_acked_segments+0xf4>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dd9c      	ble.n	800f7fc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f8c2:	68bb      	ldr	r3, [r7, #8]
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3718      	adds	r7, #24
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bdb0      	pop	{r4, r5, r7, pc}
 800f8cc:	080195a4 	.word	0x080195a4
 800f8d0:	0801988c 	.word	0x0801988c
 800f8d4:	080195f0 	.word	0x080195f0
 800f8d8:	20004af8 	.word	0x20004af8
 800f8dc:	080198b4 	.word	0x080198b4
 800f8e0:	20004af4 	.word	0x20004af4

0800f8e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f8e4:	b5b0      	push	{r4, r5, r7, lr}
 800f8e6:	b094      	sub	sp, #80	; 0x50
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d106      	bne.n	800f904 <tcp_receive+0x20>
 800f8f6:	4ba6      	ldr	r3, [pc, #664]	; (800fb90 <tcp_receive+0x2ac>)
 800f8f8:	f240 427b 	movw	r2, #1147	; 0x47b
 800f8fc:	49a5      	ldr	r1, [pc, #660]	; (800fb94 <tcp_receive+0x2b0>)
 800f8fe:	48a6      	ldr	r0, [pc, #664]	; (800fb98 <tcp_receive+0x2b4>)
 800f900:	f007 fd30 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	7d1b      	ldrb	r3, [r3, #20]
 800f908:	2b03      	cmp	r3, #3
 800f90a:	d806      	bhi.n	800f91a <tcp_receive+0x36>
 800f90c:	4ba0      	ldr	r3, [pc, #640]	; (800fb90 <tcp_receive+0x2ac>)
 800f90e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f912:	49a2      	ldr	r1, [pc, #648]	; (800fb9c <tcp_receive+0x2b8>)
 800f914:	48a0      	ldr	r0, [pc, #640]	; (800fb98 <tcp_receive+0x2b4>)
 800f916:	f007 fd25 	bl	8017364 <iprintf>

  if (flags & TCP_ACK) {
 800f91a:	4ba1      	ldr	r3, [pc, #644]	; (800fba0 <tcp_receive+0x2bc>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	f003 0310 	and.w	r3, r3, #16
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 8263 	beq.w	800fdee <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f92e:	461a      	mov	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f934:	4413      	add	r3, r2
 800f936:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f93c:	4b99      	ldr	r3, [pc, #612]	; (800fba4 <tcp_receive+0x2c0>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	2b00      	cmp	r3, #0
 800f944:	db1b      	blt.n	800f97e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f94a:	4b96      	ldr	r3, [pc, #600]	; (800fba4 <tcp_receive+0x2c0>)
 800f94c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f94e:	429a      	cmp	r2, r3
 800f950:	d106      	bne.n	800f960 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f956:	4b94      	ldr	r3, [pc, #592]	; (800fba8 <tcp_receive+0x2c4>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	db0e      	blt.n	800f97e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f964:	4b90      	ldr	r3, [pc, #576]	; (800fba8 <tcp_receive+0x2c4>)
 800f966:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f968:	429a      	cmp	r2, r3
 800f96a:	d125      	bne.n	800f9b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f96c:	4b8f      	ldr	r3, [pc, #572]	; (800fbac <tcp_receive+0x2c8>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	89db      	ldrh	r3, [r3, #14]
 800f972:	b29a      	uxth	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d91c      	bls.n	800f9b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f97e:	4b8b      	ldr	r3, [pc, #556]	; (800fbac <tcp_receive+0x2c8>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	89db      	ldrh	r3, [r3, #14]
 800f984:	b29a      	uxth	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f998:	429a      	cmp	r2, r3
 800f99a:	d205      	bcs.n	800f9a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f9a8:	4b7e      	ldr	r3, [pc, #504]	; (800fba4 <tcp_receive+0x2c0>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f9b0:	4b7d      	ldr	r3, [pc, #500]	; (800fba8 <tcp_receive+0x2c4>)
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f9b8:	4b7b      	ldr	r3, [pc, #492]	; (800fba8 <tcp_receive+0x2c4>)
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	dc58      	bgt.n	800fa78 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f9c6:	4b7a      	ldr	r3, [pc, #488]	; (800fbb0 <tcp_receive+0x2cc>)
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d14b      	bne.n	800fa66 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f9d8:	4413      	add	r3, r2
 800f9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d142      	bne.n	800fa66 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	db3d      	blt.n	800fa66 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9ee:	4b6e      	ldr	r3, [pc, #440]	; (800fba8 <tcp_receive+0x2c4>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d137      	bne.n	800fa66 <tcp_receive+0x182>
              found_dupack = 1;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa00:	2bff      	cmp	r3, #255	; 0xff
 800fa02:	d007      	beq.n	800fa14 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	b2da      	uxtb	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d91b      	bls.n	800fa56 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa28:	4413      	add	r3, r2
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d30a      	bcc.n	800fa4c <tcp_receive+0x168>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa40:	4413      	add	r3, r2
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa4a:	e004      	b.n	800fa56 <tcp_receive+0x172>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d902      	bls.n	800fa66 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f001 fee9 	bl	8011838 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fa66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f040 8160 	bne.w	800fd2e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa76:	e15a      	b.n	800fd2e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa78:	4b4b      	ldr	r3, [pc, #300]	; (800fba8 <tcp_receive+0x2c4>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	3b01      	subs	r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f2c0 814d 	blt.w	800fd24 <tcp_receive+0x440>
 800fa8a:	4b47      	ldr	r3, [pc, #284]	; (800fba8 <tcp_receive+0x2c4>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f300 8145 	bgt.w	800fd24 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	8b5b      	ldrh	r3, [r3, #26]
 800fa9e:	f003 0304 	and.w	r3, r3, #4
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d010      	beq.n	800fac8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	8b5b      	ldrh	r3, [r3, #26]
 800faaa:	f023 0304 	bic.w	r3, r3, #4
 800faae:	b29a      	uxth	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fad6:	10db      	asrs	r3, r3, #3
 800fad8:	b21b      	sxth	r3, r3
 800fada:	b29a      	uxth	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	4413      	add	r3, r2
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	b21a      	sxth	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800faf0:	4b2d      	ldr	r3, [pc, #180]	; (800fba8 <tcp_receive+0x2c4>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb08:	4b27      	ldr	r3, [pc, #156]	; (800fba8 <tcp_receive+0x2c4>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	7d1b      	ldrb	r3, [r3, #20]
 800fb14:	2b03      	cmp	r3, #3
 800fb16:	f240 8096 	bls.w	800fc46 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d244      	bcs.n	800fbb4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8b5b      	ldrh	r3, [r3, #26]
 800fb2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <tcp_receive+0x256>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <tcp_receive+0x258>
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fb40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb4a:	fb12 f303 	smulbb	r3, r2, r3
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb52:	4293      	cmp	r3, r2
 800fb54:	bf28      	it	cs
 800fb56:	4613      	movcs	r3, r2
 800fb58:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb62:	4413      	add	r3, r2
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d309      	bcc.n	800fb84 <tcp_receive+0x2a0>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb78:	4413      	add	r3, r2
 800fb7a:	b29a      	uxth	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb82:	e060      	b.n	800fc46 <tcp_receive+0x362>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb8e:	e05a      	b.n	800fc46 <tcp_receive+0x362>
 800fb90:	080195a4 	.word	0x080195a4
 800fb94:	080198d4 	.word	0x080198d4
 800fb98:	080195f0 	.word	0x080195f0
 800fb9c:	080198f0 	.word	0x080198f0
 800fba0:	20004afc 	.word	0x20004afc
 800fba4:	20004af0 	.word	0x20004af0
 800fba8:	20004af4 	.word	0x20004af4
 800fbac:	20004ae0 	.word	0x20004ae0
 800fbb0:	20004afa 	.word	0x20004afa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbbc:	4413      	add	r3, r2
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d309      	bcc.n	800fbde <tcp_receive+0x2fa>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbd2:	4413      	add	r3, r2
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fbdc:	e004      	b.n	800fbe8 <tcp_receive+0x304>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d326      	bcc.n	800fc46 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc18:	4413      	add	r3, r2
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d30a      	bcc.n	800fc3c <tcp_receive+0x358>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc30:	4413      	add	r3, r2
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc3a:	e004      	b.n	800fc46 <tcp_receive+0x362>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc4e:	4a98      	ldr	r2, [pc, #608]	; (800feb0 <tcp_receive+0x5cc>)
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7ff fdcb 	bl	800f7ec <tcp_free_acked_segments>
 800fc56:	4602      	mov	r2, r0
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc64:	4a93      	ldr	r2, [pc, #588]	; (800feb4 <tcp_receive+0x5d0>)
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7ff fdc0 	bl	800f7ec <tcp_free_acked_segments>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d104      	bne.n	800fc84 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc80:	861a      	strh	r2, [r3, #48]	; 0x30
 800fc82:	e002      	b.n	800fc8a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d103      	bne.n	800fca0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fca6:	4b84      	ldr	r3, [pc, #528]	; (800feb8 <tcp_receive+0x5d4>)
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	8b5b      	ldrh	r3, [r3, #26]
 800fcb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d035      	beq.n	800fd2c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d118      	bne.n	800fcfa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00c      	beq.n	800fcea <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fb f964 	bl	800afaa <lwip_htonl>
 800fce2:	4603      	mov	r3, r0
 800fce4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	dc20      	bgt.n	800fd2c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	8b5b      	ldrh	r3, [r3, #26]
 800fcee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fcf8:	e018      	b.n	800fd2c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fb f94f 	bl	800afaa <lwip_htonl>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	1ae3      	subs	r3, r4, r3
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	dc0b      	bgt.n	800fd2c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	8b5b      	ldrh	r3, [r3, #26]
 800fd18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd22:	e003      	b.n	800fd2c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f001 ff75 	bl	8011c14 <tcp_send_empty_ack>
 800fd2a:	e000      	b.n	800fd2e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd2c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d05b      	beq.n	800fdee <tcp_receive+0x50a>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd3a:	4b60      	ldr	r3, [pc, #384]	; (800febc <tcp_receive+0x5d8>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	da54      	bge.n	800fdee <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fd44:	4b5e      	ldr	r3, [pc, #376]	; (800fec0 <tcp_receive+0x5dc>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fd58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd62:	10db      	asrs	r3, r3, #3
 800fd64:	b21b      	sxth	r3, r3
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	1ad3      	subs	r3, r2, r3
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd7c:	4413      	add	r3, r2
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	b21a      	sxth	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fd86:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	da05      	bge.n	800fd9a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fd8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd92:	425b      	negs	r3, r3
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fd9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fda4:	109b      	asrs	r3, r3, #2
 800fda6:	b21b      	sxth	r3, r3
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdbe:	4413      	add	r3, r2
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	b21a      	sxth	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdce:	10db      	asrs	r3, r3, #3
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	4413      	add	r3, r2
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	b21a      	sxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fdee:	4b35      	ldr	r3, [pc, #212]	; (800fec4 <tcp_receive+0x5e0>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f000 84e1 	beq.w	80107ba <tcp_receive+0xed6>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7d1b      	ldrb	r3, [r3, #20]
 800fdfc:	2b06      	cmp	r3, #6
 800fdfe:	f200 84dc 	bhi.w	80107ba <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe06:	4b30      	ldr	r3, [pc, #192]	; (800fec8 <tcp_receive+0x5e4>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	1ad3      	subs	r3, r2, r3
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f2c0 808e 	blt.w	800ff30 <tcp_receive+0x64c>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe18:	4b2a      	ldr	r3, [pc, #168]	; (800fec4 <tcp_receive+0x5e0>)
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	4b2a      	ldr	r3, [pc, #168]	; (800fec8 <tcp_receive+0x5e4>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	440b      	add	r3, r1
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	3301      	adds	r3, #1
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f300 8081 	bgt.w	800ff30 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe2e:	4b27      	ldr	r3, [pc, #156]	; (800fecc <tcp_receive+0x5e8>)
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe38:	4b23      	ldr	r3, [pc, #140]	; (800fec8 <tcp_receive+0x5e4>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fe40:	4b22      	ldr	r3, [pc, #136]	; (800fecc <tcp_receive+0x5e8>)
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d106      	bne.n	800fe56 <tcp_receive+0x572>
 800fe48:	4b21      	ldr	r3, [pc, #132]	; (800fed0 <tcp_receive+0x5ec>)
 800fe4a:	f240 5294 	movw	r2, #1428	; 0x594
 800fe4e:	4921      	ldr	r1, [pc, #132]	; (800fed4 <tcp_receive+0x5f0>)
 800fe50:	4821      	ldr	r0, [pc, #132]	; (800fed8 <tcp_receive+0x5f4>)
 800fe52:	f007 fa87 	bl	8017364 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d906      	bls.n	800fe6e <tcp_receive+0x58a>
 800fe60:	4b1b      	ldr	r3, [pc, #108]	; (800fed0 <tcp_receive+0x5ec>)
 800fe62:	f240 5295 	movw	r2, #1429	; 0x595
 800fe66:	491d      	ldr	r1, [pc, #116]	; (800fedc <tcp_receive+0x5f8>)
 800fe68:	481b      	ldr	r0, [pc, #108]	; (800fed8 <tcp_receive+0x5f4>)
 800fe6a:	f007 fa7b 	bl	8017364 <iprintf>
      off = (u16_t)off32;
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fe74:	4b15      	ldr	r3, [pc, #84]	; (800fecc <tcp_receive+0x5e8>)
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	891b      	ldrh	r3, [r3, #8]
 800fe7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d906      	bls.n	800fe90 <tcp_receive+0x5ac>
 800fe82:	4b13      	ldr	r3, [pc, #76]	; (800fed0 <tcp_receive+0x5ec>)
 800fe84:	f240 5297 	movw	r2, #1431	; 0x597
 800fe88:	4915      	ldr	r1, [pc, #84]	; (800fee0 <tcp_receive+0x5fc>)
 800fe8a:	4813      	ldr	r0, [pc, #76]	; (800fed8 <tcp_receive+0x5f4>)
 800fe8c:	f007 fa6a 	bl	8017364 <iprintf>
      inseg.len -= off;
 800fe90:	4b0e      	ldr	r3, [pc, #56]	; (800fecc <tcp_receive+0x5e8>)
 800fe92:	891a      	ldrh	r2, [r3, #8]
 800fe94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe98:	1ad3      	subs	r3, r2, r3
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	4b0b      	ldr	r3, [pc, #44]	; (800fecc <tcp_receive+0x5e8>)
 800fe9e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fea0:	4b0a      	ldr	r3, [pc, #40]	; (800fecc <tcp_receive+0x5e8>)
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	891a      	ldrh	r2, [r3, #8]
 800fea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800feae:	e029      	b.n	800ff04 <tcp_receive+0x620>
 800feb0:	0801990c 	.word	0x0801990c
 800feb4:	08019914 	.word	0x08019914
 800feb8:	20004af8 	.word	0x20004af8
 800febc:	20004af4 	.word	0x20004af4
 800fec0:	2000bb9c 	.word	0x2000bb9c
 800fec4:	20004afa 	.word	0x20004afa
 800fec8:	20004af0 	.word	0x20004af0
 800fecc:	20004ad0 	.word	0x20004ad0
 800fed0:	080195a4 	.word	0x080195a4
 800fed4:	0801991c 	.word	0x0801991c
 800fed8:	080195f0 	.word	0x080195f0
 800fedc:	0801992c 	.word	0x0801992c
 800fee0:	0801993c 	.word	0x0801993c
        off -= p->len;
 800fee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fee6:	895b      	ldrh	r3, [r3, #10]
 800fee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fef4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fef6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fefa:	2200      	movs	r2, #0
 800fefc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fefe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff06:	895b      	ldrh	r3, [r3, #10]
 800ff08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d8e9      	bhi.n	800fee4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ff10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff14:	4619      	mov	r1, r3
 800ff16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff18:	f7fc fb64 	bl	800c5e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff20:	4a91      	ldr	r2, [pc, #580]	; (8010168 <tcp_receive+0x884>)
 800ff22:	6013      	str	r3, [r2, #0]
 800ff24:	4b91      	ldr	r3, [pc, #580]	; (801016c <tcp_receive+0x888>)
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	4a8f      	ldr	r2, [pc, #572]	; (8010168 <tcp_receive+0x884>)
 800ff2a:	6812      	ldr	r2, [r2, #0]
 800ff2c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff2e:	e00d      	b.n	800ff4c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff30:	4b8d      	ldr	r3, [pc, #564]	; (8010168 <tcp_receive+0x884>)
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	da06      	bge.n	800ff4c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	8b5b      	ldrh	r3, [r3, #26]
 800ff42:	f043 0302 	orr.w	r3, r3, #2
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff4c:	4b86      	ldr	r3, [pc, #536]	; (8010168 <tcp_receive+0x884>)
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f2c0 842a 	blt.w	80107b0 <tcp_receive+0xecc>
 800ff5c:	4b82      	ldr	r3, [pc, #520]	; (8010168 <tcp_receive+0x884>)
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff64:	6879      	ldr	r1, [r7, #4]
 800ff66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff68:	440b      	add	r3, r1
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f300 841e 	bgt.w	80107b0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff78:	4b7b      	ldr	r3, [pc, #492]	; (8010168 <tcp_receive+0x884>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	f040 829a 	bne.w	80104b6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ff82:	4b7a      	ldr	r3, [pc, #488]	; (801016c <tcp_receive+0x888>)
 800ff84:	891c      	ldrh	r4, [r3, #8]
 800ff86:	4b79      	ldr	r3, [pc, #484]	; (801016c <tcp_receive+0x888>)
 800ff88:	68db      	ldr	r3, [r3, #12]
 800ff8a:	899b      	ldrh	r3, [r3, #12]
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fa fff6 	bl	800af80 <lwip_htons>
 800ff94:	4603      	mov	r3, r0
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	f003 0303 	and.w	r3, r3, #3
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <tcp_receive+0x6c0>
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	e000      	b.n	800ffa6 <tcp_receive+0x6c2>
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4423      	add	r3, r4
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	4b71      	ldr	r3, [pc, #452]	; (8010170 <tcp_receive+0x88c>)
 800ffac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ffb2:	4b6f      	ldr	r3, [pc, #444]	; (8010170 <tcp_receive+0x88c>)
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d275      	bcs.n	80100a6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffba:	4b6c      	ldr	r3, [pc, #432]	; (801016c <tcp_receive+0x888>)
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	899b      	ldrh	r3, [r3, #12]
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fa ffdc 	bl	800af80 <lwip_htons>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	f003 0301 	and.w	r3, r3, #1
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d01f      	beq.n	8010014 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ffd4:	4b65      	ldr	r3, [pc, #404]	; (801016c <tcp_receive+0x888>)
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	899b      	ldrh	r3, [r3, #12]
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	b21b      	sxth	r3, r3
 800ffde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ffe2:	b21c      	sxth	r4, r3
 800ffe4:	4b61      	ldr	r3, [pc, #388]	; (801016c <tcp_receive+0x888>)
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	899b      	ldrh	r3, [r3, #12]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fa ffc7 	bl	800af80 <lwip_htons>
 800fff2:	4603      	mov	r3, r0
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fa ffbe 	bl	800af80 <lwip_htons>
 8010004:	4603      	mov	r3, r0
 8010006:	b21b      	sxth	r3, r3
 8010008:	4323      	orrs	r3, r4
 801000a:	b21a      	sxth	r2, r3
 801000c:	4b57      	ldr	r3, [pc, #348]	; (801016c <tcp_receive+0x888>)
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	b292      	uxth	r2, r2
 8010012:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010018:	4b54      	ldr	r3, [pc, #336]	; (801016c <tcp_receive+0x888>)
 801001a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801001c:	4b53      	ldr	r3, [pc, #332]	; (801016c <tcp_receive+0x888>)
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	899b      	ldrh	r3, [r3, #12]
 8010022:	b29b      	uxth	r3, r3
 8010024:	4618      	mov	r0, r3
 8010026:	f7fa ffab 	bl	800af80 <lwip_htons>
 801002a:	4603      	mov	r3, r0
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0302 	and.w	r3, r3, #2
 8010032:	2b00      	cmp	r3, #0
 8010034:	d005      	beq.n	8010042 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010036:	4b4d      	ldr	r3, [pc, #308]	; (801016c <tcp_receive+0x888>)
 8010038:	891b      	ldrh	r3, [r3, #8]
 801003a:	3b01      	subs	r3, #1
 801003c:	b29a      	uxth	r2, r3
 801003e:	4b4b      	ldr	r3, [pc, #300]	; (801016c <tcp_receive+0x888>)
 8010040:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010042:	4b4a      	ldr	r3, [pc, #296]	; (801016c <tcp_receive+0x888>)
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	4a49      	ldr	r2, [pc, #292]	; (801016c <tcp_receive+0x888>)
 8010048:	8912      	ldrh	r2, [r2, #8]
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f7fc f9c9 	bl	800c3e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010052:	4b46      	ldr	r3, [pc, #280]	; (801016c <tcp_receive+0x888>)
 8010054:	891c      	ldrh	r4, [r3, #8]
 8010056:	4b45      	ldr	r3, [pc, #276]	; (801016c <tcp_receive+0x888>)
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	899b      	ldrh	r3, [r3, #12]
 801005c:	b29b      	uxth	r3, r3
 801005e:	4618      	mov	r0, r3
 8010060:	f7fa ff8e 	bl	800af80 <lwip_htons>
 8010064:	4603      	mov	r3, r0
 8010066:	b2db      	uxtb	r3, r3
 8010068:	f003 0303 	and.w	r3, r3, #3
 801006c:	2b00      	cmp	r3, #0
 801006e:	d001      	beq.n	8010074 <tcp_receive+0x790>
 8010070:	2301      	movs	r3, #1
 8010072:	e000      	b.n	8010076 <tcp_receive+0x792>
 8010074:	2300      	movs	r3, #0
 8010076:	4423      	add	r3, r4
 8010078:	b29a      	uxth	r2, r3
 801007a:	4b3d      	ldr	r3, [pc, #244]	; (8010170 <tcp_receive+0x88c>)
 801007c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801007e:	4b3c      	ldr	r3, [pc, #240]	; (8010170 <tcp_receive+0x88c>)
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	461a      	mov	r2, r3
 8010084:	4b38      	ldr	r3, [pc, #224]	; (8010168 <tcp_receive+0x884>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	441a      	add	r2, r3
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	6879      	ldr	r1, [r7, #4]
 8010090:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010092:	440b      	add	r3, r1
 8010094:	429a      	cmp	r2, r3
 8010096:	d006      	beq.n	80100a6 <tcp_receive+0x7c2>
 8010098:	4b36      	ldr	r3, [pc, #216]	; (8010174 <tcp_receive+0x890>)
 801009a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801009e:	4936      	ldr	r1, [pc, #216]	; (8010178 <tcp_receive+0x894>)
 80100a0:	4836      	ldr	r0, [pc, #216]	; (801017c <tcp_receive+0x898>)
 80100a2:	f007 f95f 	bl	8017364 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 80e7 	beq.w	801027e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80100b0:	4b2e      	ldr	r3, [pc, #184]	; (801016c <tcp_receive+0x888>)
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	899b      	ldrh	r3, [r3, #12]
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fa ff61 	bl	800af80 <lwip_htons>
 80100be:	4603      	mov	r3, r0
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d010      	beq.n	80100ec <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80100ca:	e00a      	b.n	80100e2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100d0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f7fd fd96 	bl	800dc0e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1f0      	bne.n	80100cc <tcp_receive+0x7e8>
 80100ea:	e0c8      	b.n	801027e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80100f2:	e052      	b.n	801019a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80100f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	899b      	ldrh	r3, [r3, #12]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fa ff3f 	bl	800af80 <lwip_htons>
 8010102:	4603      	mov	r3, r0
 8010104:	b2db      	uxtb	r3, r3
 8010106:	f003 0301 	and.w	r3, r3, #1
 801010a:	2b00      	cmp	r3, #0
 801010c:	d03d      	beq.n	801018a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801010e:	4b17      	ldr	r3, [pc, #92]	; (801016c <tcp_receive+0x888>)
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	899b      	ldrh	r3, [r3, #12]
 8010114:	b29b      	uxth	r3, r3
 8010116:	4618      	mov	r0, r3
 8010118:	f7fa ff32 	bl	800af80 <lwip_htons>
 801011c:	4603      	mov	r3, r0
 801011e:	b2db      	uxtb	r3, r3
 8010120:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010124:	2b00      	cmp	r3, #0
 8010126:	d130      	bne.n	801018a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010128:	4b10      	ldr	r3, [pc, #64]	; (801016c <tcp_receive+0x888>)
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	899b      	ldrh	r3, [r3, #12]
 801012e:	b29c      	uxth	r4, r3
 8010130:	2001      	movs	r0, #1
 8010132:	f7fa ff25 	bl	800af80 <lwip_htons>
 8010136:	4603      	mov	r3, r0
 8010138:	461a      	mov	r2, r3
 801013a:	4b0c      	ldr	r3, [pc, #48]	; (801016c <tcp_receive+0x888>)
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	4322      	orrs	r2, r4
 8010140:	b292      	uxth	r2, r2
 8010142:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010144:	4b09      	ldr	r3, [pc, #36]	; (801016c <tcp_receive+0x888>)
 8010146:	891c      	ldrh	r4, [r3, #8]
 8010148:	4b08      	ldr	r3, [pc, #32]	; (801016c <tcp_receive+0x888>)
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	899b      	ldrh	r3, [r3, #12]
 801014e:	b29b      	uxth	r3, r3
 8010150:	4618      	mov	r0, r3
 8010152:	f7fa ff15 	bl	800af80 <lwip_htons>
 8010156:	4603      	mov	r3, r0
 8010158:	b2db      	uxtb	r3, r3
 801015a:	f003 0303 	and.w	r3, r3, #3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00e      	beq.n	8010180 <tcp_receive+0x89c>
 8010162:	2301      	movs	r3, #1
 8010164:	e00d      	b.n	8010182 <tcp_receive+0x89e>
 8010166:	bf00      	nop
 8010168:	20004af0 	.word	0x20004af0
 801016c:	20004ad0 	.word	0x20004ad0
 8010170:	20004afa 	.word	0x20004afa
 8010174:	080195a4 	.word	0x080195a4
 8010178:	0801994c 	.word	0x0801994c
 801017c:	080195f0 	.word	0x080195f0
 8010180:	2300      	movs	r3, #0
 8010182:	4423      	add	r3, r4
 8010184:	b29a      	uxth	r2, r3
 8010186:	4b98      	ldr	r3, [pc, #608]	; (80103e8 <tcp_receive+0xb04>)
 8010188:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801018a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801018c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801018e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010194:	6938      	ldr	r0, [r7, #16]
 8010196:	f7fd fd3a 	bl	800dc0e <tcp_seg_free>
            while (next &&
 801019a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00e      	beq.n	80101be <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80101a0:	4b91      	ldr	r3, [pc, #580]	; (80103e8 <tcp_receive+0xb04>)
 80101a2:	881b      	ldrh	r3, [r3, #0]
 80101a4:	461a      	mov	r2, r3
 80101a6:	4b91      	ldr	r3, [pc, #580]	; (80103ec <tcp_receive+0xb08>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	441a      	add	r2, r3
 80101ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101b4:	8909      	ldrh	r1, [r1, #8]
 80101b6:	440b      	add	r3, r1
 80101b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	da9a      	bge.n	80100f4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80101be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d059      	beq.n	8010278 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80101c4:	4b88      	ldr	r3, [pc, #544]	; (80103e8 <tcp_receive+0xb04>)
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	461a      	mov	r2, r3
 80101ca:	4b88      	ldr	r3, [pc, #544]	; (80103ec <tcp_receive+0xb08>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	441a      	add	r2, r3
 80101d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80101d8:	2b00      	cmp	r3, #0
 80101da:	dd4d      	ble.n	8010278 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80101dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	4b81      	ldr	r3, [pc, #516]	; (80103ec <tcp_receive+0xb08>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	4b80      	ldr	r3, [pc, #512]	; (80103f0 <tcp_receive+0xb0c>)
 80101f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80101f2:	4b7f      	ldr	r3, [pc, #508]	; (80103f0 <tcp_receive+0xb0c>)
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	899b      	ldrh	r3, [r3, #12]
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fa fec0 	bl	800af80 <lwip_htons>
 8010200:	4603      	mov	r3, r0
 8010202:	b2db      	uxtb	r3, r3
 8010204:	f003 0302 	and.w	r3, r3, #2
 8010208:	2b00      	cmp	r3, #0
 801020a:	d005      	beq.n	8010218 <tcp_receive+0x934>
                inseg.len -= 1;
 801020c:	4b78      	ldr	r3, [pc, #480]	; (80103f0 <tcp_receive+0xb0c>)
 801020e:	891b      	ldrh	r3, [r3, #8]
 8010210:	3b01      	subs	r3, #1
 8010212:	b29a      	uxth	r2, r3
 8010214:	4b76      	ldr	r3, [pc, #472]	; (80103f0 <tcp_receive+0xb0c>)
 8010216:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010218:	4b75      	ldr	r3, [pc, #468]	; (80103f0 <tcp_receive+0xb0c>)
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	4a74      	ldr	r2, [pc, #464]	; (80103f0 <tcp_receive+0xb0c>)
 801021e:	8912      	ldrh	r2, [r2, #8]
 8010220:	4611      	mov	r1, r2
 8010222:	4618      	mov	r0, r3
 8010224:	f7fc f8de 	bl	800c3e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010228:	4b71      	ldr	r3, [pc, #452]	; (80103f0 <tcp_receive+0xb0c>)
 801022a:	891c      	ldrh	r4, [r3, #8]
 801022c:	4b70      	ldr	r3, [pc, #448]	; (80103f0 <tcp_receive+0xb0c>)
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	899b      	ldrh	r3, [r3, #12]
 8010232:	b29b      	uxth	r3, r3
 8010234:	4618      	mov	r0, r3
 8010236:	f7fa fea3 	bl	800af80 <lwip_htons>
 801023a:	4603      	mov	r3, r0
 801023c:	b2db      	uxtb	r3, r3
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	2b00      	cmp	r3, #0
 8010244:	d001      	beq.n	801024a <tcp_receive+0x966>
 8010246:	2301      	movs	r3, #1
 8010248:	e000      	b.n	801024c <tcp_receive+0x968>
 801024a:	2300      	movs	r3, #0
 801024c:	4423      	add	r3, r4
 801024e:	b29a      	uxth	r2, r3
 8010250:	4b65      	ldr	r3, [pc, #404]	; (80103e8 <tcp_receive+0xb04>)
 8010252:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010254:	4b64      	ldr	r3, [pc, #400]	; (80103e8 <tcp_receive+0xb04>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	461a      	mov	r2, r3
 801025a:	4b64      	ldr	r3, [pc, #400]	; (80103ec <tcp_receive+0xb08>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	441a      	add	r2, r3
 8010260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	429a      	cmp	r2, r3
 8010268:	d006      	beq.n	8010278 <tcp_receive+0x994>
 801026a:	4b62      	ldr	r3, [pc, #392]	; (80103f4 <tcp_receive+0xb10>)
 801026c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010270:	4961      	ldr	r1, [pc, #388]	; (80103f8 <tcp_receive+0xb14>)
 8010272:	4862      	ldr	r0, [pc, #392]	; (80103fc <tcp_receive+0xb18>)
 8010274:	f007 f876 	bl	8017364 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801027c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801027e:	4b5a      	ldr	r3, [pc, #360]	; (80103e8 <tcp_receive+0xb04>)
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	4b59      	ldr	r3, [pc, #356]	; (80103ec <tcp_receive+0xb08>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	441a      	add	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010292:	4b55      	ldr	r3, [pc, #340]	; (80103e8 <tcp_receive+0xb04>)
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	429a      	cmp	r2, r3
 8010298:	d206      	bcs.n	80102a8 <tcp_receive+0x9c4>
 801029a:	4b56      	ldr	r3, [pc, #344]	; (80103f4 <tcp_receive+0xb10>)
 801029c:	f240 6207 	movw	r2, #1543	; 0x607
 80102a0:	4957      	ldr	r1, [pc, #348]	; (8010400 <tcp_receive+0xb1c>)
 80102a2:	4856      	ldr	r0, [pc, #344]	; (80103fc <tcp_receive+0xb18>)
 80102a4:	f007 f85e 	bl	8017364 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102ac:	4b4e      	ldr	r3, [pc, #312]	; (80103e8 <tcp_receive+0xb04>)
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7fc ffc9 	bl	800d250 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80102be:	4b4c      	ldr	r3, [pc, #304]	; (80103f0 <tcp_receive+0xb0c>)
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	891b      	ldrh	r3, [r3, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d006      	beq.n	80102d6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80102c8:	4b49      	ldr	r3, [pc, #292]	; (80103f0 <tcp_receive+0xb0c>)
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4a4d      	ldr	r2, [pc, #308]	; (8010404 <tcp_receive+0xb20>)
 80102ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80102d0:	4b47      	ldr	r3, [pc, #284]	; (80103f0 <tcp_receive+0xb0c>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80102d6:	4b46      	ldr	r3, [pc, #280]	; (80103f0 <tcp_receive+0xb0c>)
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	899b      	ldrh	r3, [r3, #12]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fa fe4e 	bl	800af80 <lwip_htons>
 80102e4:	4603      	mov	r3, r0
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	f003 0301 	and.w	r3, r3, #1
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f000 80b8 	beq.w	8010462 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80102f2:	4b45      	ldr	r3, [pc, #276]	; (8010408 <tcp_receive+0xb24>)
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f043 0320 	orr.w	r3, r3, #32
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	4b42      	ldr	r3, [pc, #264]	; (8010408 <tcp_receive+0xb24>)
 80102fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010300:	e0af      	b.n	8010462 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010306:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801030c:	68db      	ldr	r3, [r3, #12]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	4a36      	ldr	r2, [pc, #216]	; (80103ec <tcp_receive+0xb08>)
 8010312:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	891b      	ldrh	r3, [r3, #8]
 8010318:	461c      	mov	r4, r3
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	899b      	ldrh	r3, [r3, #12]
 8010320:	b29b      	uxth	r3, r3
 8010322:	4618      	mov	r0, r3
 8010324:	f7fa fe2c 	bl	800af80 <lwip_htons>
 8010328:	4603      	mov	r3, r0
 801032a:	b2db      	uxtb	r3, r3
 801032c:	f003 0303 	and.w	r3, r3, #3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d001      	beq.n	8010338 <tcp_receive+0xa54>
 8010334:	2301      	movs	r3, #1
 8010336:	e000      	b.n	801033a <tcp_receive+0xa56>
 8010338:	2300      	movs	r3, #0
 801033a:	191a      	adds	r2, r3, r4
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010340:	441a      	add	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801034a:	461c      	mov	r4, r3
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	891b      	ldrh	r3, [r3, #8]
 8010350:	461d      	mov	r5, r3
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	899b      	ldrh	r3, [r3, #12]
 8010358:	b29b      	uxth	r3, r3
 801035a:	4618      	mov	r0, r3
 801035c:	f7fa fe10 	bl	800af80 <lwip_htons>
 8010360:	4603      	mov	r3, r0
 8010362:	b2db      	uxtb	r3, r3
 8010364:	f003 0303 	and.w	r3, r3, #3
 8010368:	2b00      	cmp	r3, #0
 801036a:	d001      	beq.n	8010370 <tcp_receive+0xa8c>
 801036c:	2301      	movs	r3, #1
 801036e:	e000      	b.n	8010372 <tcp_receive+0xa8e>
 8010370:	2300      	movs	r3, #0
 8010372:	442b      	add	r3, r5
 8010374:	429c      	cmp	r4, r3
 8010376:	d206      	bcs.n	8010386 <tcp_receive+0xaa2>
 8010378:	4b1e      	ldr	r3, [pc, #120]	; (80103f4 <tcp_receive+0xb10>)
 801037a:	f240 622b 	movw	r2, #1579	; 0x62b
 801037e:	4923      	ldr	r1, [pc, #140]	; (801040c <tcp_receive+0xb28>)
 8010380:	481e      	ldr	r0, [pc, #120]	; (80103fc <tcp_receive+0xb18>)
 8010382:	f006 ffef 	bl	8017364 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	891b      	ldrh	r3, [r3, #8]
 801038a:	461c      	mov	r4, r3
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	68db      	ldr	r3, [r3, #12]
 8010390:	899b      	ldrh	r3, [r3, #12]
 8010392:	b29b      	uxth	r3, r3
 8010394:	4618      	mov	r0, r3
 8010396:	f7fa fdf3 	bl	800af80 <lwip_htons>
 801039a:	4603      	mov	r3, r0
 801039c:	b2db      	uxtb	r3, r3
 801039e:	f003 0303 	and.w	r3, r3, #3
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d001      	beq.n	80103aa <tcp_receive+0xac6>
 80103a6:	2301      	movs	r3, #1
 80103a8:	e000      	b.n	80103ac <tcp_receive+0xac8>
 80103aa:	2300      	movs	r3, #0
 80103ac:	1919      	adds	r1, r3, r4
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103b2:	b28b      	uxth	r3, r1
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7fc ff47 	bl	800d250 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	891b      	ldrh	r3, [r3, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d028      	beq.n	801041e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80103cc:	4b0d      	ldr	r3, [pc, #52]	; (8010404 <tcp_receive+0xb20>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d01d      	beq.n	8010410 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80103d4:	4b0b      	ldr	r3, [pc, #44]	; (8010404 <tcp_receive+0xb20>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	4619      	mov	r1, r3
 80103de:	4610      	mov	r0, r2
 80103e0:	f7fc fa54 	bl	800c88c <pbuf_cat>
 80103e4:	e018      	b.n	8010418 <tcp_receive+0xb34>
 80103e6:	bf00      	nop
 80103e8:	20004afa 	.word	0x20004afa
 80103ec:	20004af0 	.word	0x20004af0
 80103f0:	20004ad0 	.word	0x20004ad0
 80103f4:	080195a4 	.word	0x080195a4
 80103f8:	08019984 	.word	0x08019984
 80103fc:	080195f0 	.word	0x080195f0
 8010400:	080199c0 	.word	0x080199c0
 8010404:	20004b00 	.word	0x20004b00
 8010408:	20004afd 	.word	0x20004afd
 801040c:	080199e0 	.word	0x080199e0
            } else {
              recv_data = cseg->p;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	4a70      	ldr	r2, [pc, #448]	; (80105d8 <tcp_receive+0xcf4>)
 8010416:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2200      	movs	r2, #0
 801041c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	899b      	ldrh	r3, [r3, #12]
 8010424:	b29b      	uxth	r3, r3
 8010426:	4618      	mov	r0, r3
 8010428:	f7fa fdaa 	bl	800af80 <lwip_htons>
 801042c:	4603      	mov	r3, r0
 801042e:	b2db      	uxtb	r3, r3
 8010430:	f003 0301 	and.w	r3, r3, #1
 8010434:	2b00      	cmp	r3, #0
 8010436:	d00d      	beq.n	8010454 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010438:	4b68      	ldr	r3, [pc, #416]	; (80105dc <tcp_receive+0xcf8>)
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	f043 0320 	orr.w	r3, r3, #32
 8010440:	b2da      	uxtb	r2, r3
 8010442:	4b66      	ldr	r3, [pc, #408]	; (80105dc <tcp_receive+0xcf8>)
 8010444:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	7d1b      	ldrb	r3, [r3, #20]
 801044a:	2b04      	cmp	r3, #4
 801044c:	d102      	bne.n	8010454 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2207      	movs	r2, #7
 8010452:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801045c:	68b8      	ldr	r0, [r7, #8]
 801045e:	f7fd fbd6 	bl	800dc0e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010466:	2b00      	cmp	r3, #0
 8010468:	d008      	beq.n	801047c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	685a      	ldr	r2, [r3, #4]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010476:	429a      	cmp	r2, r3
 8010478:	f43f af43 	beq.w	8010302 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8b5b      	ldrh	r3, [r3, #26]
 8010480:	f003 0301 	and.w	r3, r3, #1
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00e      	beq.n	80104a6 <tcp_receive+0xbc2>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	8b5b      	ldrh	r3, [r3, #26]
 801048c:	f023 0301 	bic.w	r3, r3, #1
 8010490:	b29a      	uxth	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	835a      	strh	r2, [r3, #26]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	8b5b      	ldrh	r3, [r3, #26]
 801049a:	f043 0302 	orr.w	r3, r3, #2
 801049e:	b29a      	uxth	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80104a4:	e188      	b.n	80107b8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8b5b      	ldrh	r3, [r3, #26]
 80104aa:	f043 0301 	orr.w	r3, r3, #1
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80104b4:	e180      	b.n	80107b8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d106      	bne.n	80104cc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80104be:	4848      	ldr	r0, [pc, #288]	; (80105e0 <tcp_receive+0xcfc>)
 80104c0:	f7fd fbbe 	bl	800dc40 <tcp_seg_copy>
 80104c4:	4602      	mov	r2, r0
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	675a      	str	r2, [r3, #116]	; 0x74
 80104ca:	e16d      	b.n	80107a8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80104cc:	2300      	movs	r3, #0
 80104ce:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80104d6:	e157      	b.n	8010788 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80104d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	4b41      	ldr	r3, [pc, #260]	; (80105e4 <tcp_receive+0xd00>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d11d      	bne.n	8010522 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80104e6:	4b3e      	ldr	r3, [pc, #248]	; (80105e0 <tcp_receive+0xcfc>)
 80104e8:	891a      	ldrh	r2, [r3, #8]
 80104ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ec:	891b      	ldrh	r3, [r3, #8]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	f240 814f 	bls.w	8010792 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80104f4:	483a      	ldr	r0, [pc, #232]	; (80105e0 <tcp_receive+0xcfc>)
 80104f6:	f7fd fba3 	bl	800dc40 <tcp_seg_copy>
 80104fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f000 8149 	beq.w	8010796 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010506:	2b00      	cmp	r3, #0
 8010508:	d003      	beq.n	8010512 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050c:	697a      	ldr	r2, [r7, #20]
 801050e:	601a      	str	r2, [r3, #0]
 8010510:	e002      	b.n	8010518 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	697a      	ldr	r2, [r7, #20]
 8010516:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801051a:	6978      	ldr	r0, [r7, #20]
 801051c:	f7ff f8de 	bl	800f6dc <tcp_oos_insert_segment>
                }
                break;
 8010520:	e139      	b.n	8010796 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010524:	2b00      	cmp	r3, #0
 8010526:	d117      	bne.n	8010558 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010528:	4b2e      	ldr	r3, [pc, #184]	; (80105e4 <tcp_receive+0xd00>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	2b00      	cmp	r3, #0
 8010536:	da57      	bge.n	80105e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010538:	4829      	ldr	r0, [pc, #164]	; (80105e0 <tcp_receive+0xcfc>)
 801053a:	f7fd fb81 	bl	800dc40 <tcp_seg_copy>
 801053e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 8129 	beq.w	801079a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	69ba      	ldr	r2, [r7, #24]
 801054c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801054e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010550:	69b8      	ldr	r0, [r7, #24]
 8010552:	f7ff f8c3 	bl	800f6dc <tcp_oos_insert_segment>
                  }
                  break;
 8010556:	e120      	b.n	801079a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010558:	4b22      	ldr	r3, [pc, #136]	; (80105e4 <tcp_receive+0xd00>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	3b01      	subs	r3, #1
 8010566:	2b00      	cmp	r3, #0
 8010568:	db3e      	blt.n	80105e8 <tcp_receive+0xd04>
 801056a:	4b1e      	ldr	r3, [pc, #120]	; (80105e4 <tcp_receive+0xd00>)
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	3301      	adds	r3, #1
 8010578:	2b00      	cmp	r3, #0
 801057a:	dc35      	bgt.n	80105e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801057c:	4818      	ldr	r0, [pc, #96]	; (80105e0 <tcp_receive+0xcfc>)
 801057e:	f7fd fb5f 	bl	800dc40 <tcp_seg_copy>
 8010582:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 8109 	beq.w	801079e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801058c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010594:	8912      	ldrh	r2, [r2, #8]
 8010596:	441a      	add	r2, r3
 8010598:	4b12      	ldr	r3, [pc, #72]	; (80105e4 <tcp_receive+0xd00>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	dd12      	ble.n	80105c8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80105a2:	4b10      	ldr	r3, [pc, #64]	; (80105e4 <tcp_receive+0xd00>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80105b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105be:	891b      	ldrh	r3, [r3, #8]
 80105c0:	4619      	mov	r1, r3
 80105c2:	4610      	mov	r0, r2
 80105c4:	f7fb ff0e 	bl	800c3e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80105c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ca:	69fa      	ldr	r2, [r7, #28]
 80105cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80105ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105d0:	69f8      	ldr	r0, [r7, #28]
 80105d2:	f7ff f883 	bl	800f6dc <tcp_oos_insert_segment>
                  }
                  break;
 80105d6:	e0e2      	b.n	801079e <tcp_receive+0xeba>
 80105d8:	20004b00 	.word	0x20004b00
 80105dc:	20004afd 	.word	0x20004afd
 80105e0:	20004ad0 	.word	0x20004ad0
 80105e4:	20004af0 	.word	0x20004af0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f040 80c6 	bne.w	8010782 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80105f6:	4b80      	ldr	r3, [pc, #512]	; (80107f8 <tcp_receive+0xf14>)
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010602:	2b00      	cmp	r3, #0
 8010604:	f340 80bd 	ble.w	8010782 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	899b      	ldrh	r3, [r3, #12]
 801060e:	b29b      	uxth	r3, r3
 8010610:	4618      	mov	r0, r3
 8010612:	f7fa fcb5 	bl	800af80 <lwip_htons>
 8010616:	4603      	mov	r3, r0
 8010618:	b2db      	uxtb	r3, r3
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	f040 80bf 	bne.w	80107a2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010624:	4875      	ldr	r0, [pc, #468]	; (80107fc <tcp_receive+0xf18>)
 8010626:	f7fd fb0b 	bl	800dc40 <tcp_seg_copy>
 801062a:	4602      	mov	r2, r0
 801062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 80b6 	beq.w	80107a6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801063a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010642:	8912      	ldrh	r2, [r2, #8]
 8010644:	441a      	add	r2, r3
 8010646:	4b6c      	ldr	r3, [pc, #432]	; (80107f8 <tcp_receive+0xf14>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	2b00      	cmp	r3, #0
 801064e:	dd12      	ble.n	8010676 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010650:	4b69      	ldr	r3, [pc, #420]	; (80107f8 <tcp_receive+0xf14>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	b29a      	uxth	r2, r3
 8010656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	b29b      	uxth	r3, r3
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	b29a      	uxth	r2, r3
 8010662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010664:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	685a      	ldr	r2, [r3, #4]
 801066a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066c:	891b      	ldrh	r3, [r3, #8]
 801066e:	4619      	mov	r1, r3
 8010670:	4610      	mov	r0, r2
 8010672:	f7fb feb7 	bl	800c3e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010676:	4b62      	ldr	r3, [pc, #392]	; (8010800 <tcp_receive+0xf1c>)
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	461a      	mov	r2, r3
 801067c:	4b5e      	ldr	r3, [pc, #376]	; (80107f8 <tcp_receive+0xf14>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	441a      	add	r2, r3
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010686:	6879      	ldr	r1, [r7, #4]
 8010688:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801068a:	440b      	add	r3, r1
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	f340 8089 	ble.w	80107a6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	899b      	ldrh	r3, [r3, #12]
 801069c:	b29b      	uxth	r3, r3
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fa fc6e 	bl	800af80 <lwip_htons>
 80106a4:	4603      	mov	r3, r0
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d022      	beq.n	80106f6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	899b      	ldrh	r3, [r3, #12]
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	b21b      	sxth	r3, r3
 80106bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80106c0:	b21c      	sxth	r4, r3
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	68db      	ldr	r3, [r3, #12]
 80106c8:	899b      	ldrh	r3, [r3, #12]
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fa fc57 	bl	800af80 <lwip_htons>
 80106d2:	4603      	mov	r3, r0
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80106dc:	b29b      	uxth	r3, r3
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fa fc4e 	bl	800af80 <lwip_htons>
 80106e4:	4603      	mov	r3, r0
 80106e6:	b21b      	sxth	r3, r3
 80106e8:	4323      	orrs	r3, r4
 80106ea:	b21a      	sxth	r2, r3
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	b292      	uxth	r2, r2
 80106f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010700:	4413      	add	r3, r2
 8010702:	b299      	uxth	r1, r3
 8010704:	4b3c      	ldr	r3, [pc, #240]	; (80107f8 <tcp_receive+0xf14>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	b29a      	uxth	r2, r3
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	1a8a      	subs	r2, r1, r2
 8010710:	b292      	uxth	r2, r2
 8010712:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	891b      	ldrh	r3, [r3, #8]
 8010720:	4619      	mov	r1, r3
 8010722:	4610      	mov	r0, r2
 8010724:	f7fb fe5e 	bl	800c3e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	891c      	ldrh	r4, [r3, #8]
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fa fc21 	bl	800af80 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	f003 0303 	and.w	r3, r3, #3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <tcp_receive+0xe6a>
 801074a:	2301      	movs	r3, #1
 801074c:	e000      	b.n	8010750 <tcp_receive+0xe6c>
 801074e:	2300      	movs	r3, #0
 8010750:	4423      	add	r3, r4
 8010752:	b29a      	uxth	r2, r3
 8010754:	4b2a      	ldr	r3, [pc, #168]	; (8010800 <tcp_receive+0xf1c>)
 8010756:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010758:	4b29      	ldr	r3, [pc, #164]	; (8010800 <tcp_receive+0xf1c>)
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	461a      	mov	r2, r3
 801075e:	4b26      	ldr	r3, [pc, #152]	; (80107f8 <tcp_receive+0xf14>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	441a      	add	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010768:	6879      	ldr	r1, [r7, #4]
 801076a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801076c:	440b      	add	r3, r1
 801076e:	429a      	cmp	r2, r3
 8010770:	d019      	beq.n	80107a6 <tcp_receive+0xec2>
 8010772:	4b24      	ldr	r3, [pc, #144]	; (8010804 <tcp_receive+0xf20>)
 8010774:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010778:	4923      	ldr	r1, [pc, #140]	; (8010808 <tcp_receive+0xf24>)
 801077a:	4824      	ldr	r0, [pc, #144]	; (801080c <tcp_receive+0xf28>)
 801077c:	f006 fdf2 	bl	8017364 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010780:	e011      	b.n	80107a6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	63bb      	str	r3, [r7, #56]	; 0x38
 8010788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078a:	2b00      	cmp	r3, #0
 801078c:	f47f aea4 	bne.w	80104d8 <tcp_receive+0xbf4>
 8010790:	e00a      	b.n	80107a8 <tcp_receive+0xec4>
                break;
 8010792:	bf00      	nop
 8010794:	e008      	b.n	80107a8 <tcp_receive+0xec4>
                break;
 8010796:	bf00      	nop
 8010798:	e006      	b.n	80107a8 <tcp_receive+0xec4>
                  break;
 801079a:	bf00      	nop
 801079c:	e004      	b.n	80107a8 <tcp_receive+0xec4>
                  break;
 801079e:	bf00      	nop
 80107a0:	e002      	b.n	80107a8 <tcp_receive+0xec4>
                  break;
 80107a2:	bf00      	nop
 80107a4:	e000      	b.n	80107a8 <tcp_receive+0xec4>
                break;
 80107a6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f001 fa33 	bl	8011c14 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80107ae:	e003      	b.n	80107b8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f001 fa2f 	bl	8011c14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107b6:	e01a      	b.n	80107ee <tcp_receive+0xf0a>
 80107b8:	e019      	b.n	80107ee <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80107ba:	4b0f      	ldr	r3, [pc, #60]	; (80107f8 <tcp_receive+0xf14>)
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	db0a      	blt.n	80107de <tcp_receive+0xefa>
 80107c8:	4b0b      	ldr	r3, [pc, #44]	; (80107f8 <tcp_receive+0xf14>)
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d0:	6879      	ldr	r1, [r7, #4]
 80107d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107d4:	440b      	add	r3, r1
 80107d6:	1ad3      	subs	r3, r2, r3
 80107d8:	3301      	adds	r3, #1
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dd07      	ble.n	80107ee <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	8b5b      	ldrh	r3, [r3, #26]
 80107e2:	f043 0302 	orr.w	r3, r3, #2
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80107ec:	e7ff      	b.n	80107ee <tcp_receive+0xf0a>
 80107ee:	bf00      	nop
 80107f0:	3750      	adds	r7, #80	; 0x50
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bdb0      	pop	{r4, r5, r7, pc}
 80107f6:	bf00      	nop
 80107f8:	20004af0 	.word	0x20004af0
 80107fc:	20004ad0 	.word	0x20004ad0
 8010800:	20004afa 	.word	0x20004afa
 8010804:	080195a4 	.word	0x080195a4
 8010808:	0801994c 	.word	0x0801994c
 801080c:	080195f0 	.word	0x080195f0

08010810 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010816:	4b15      	ldr	r3, [pc, #84]	; (801086c <tcp_get_next_optbyte+0x5c>)
 8010818:	881b      	ldrh	r3, [r3, #0]
 801081a:	1c5a      	adds	r2, r3, #1
 801081c:	b291      	uxth	r1, r2
 801081e:	4a13      	ldr	r2, [pc, #76]	; (801086c <tcp_get_next_optbyte+0x5c>)
 8010820:	8011      	strh	r1, [r2, #0]
 8010822:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010824:	4b12      	ldr	r3, [pc, #72]	; (8010870 <tcp_get_next_optbyte+0x60>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <tcp_get_next_optbyte+0x26>
 801082c:	4b11      	ldr	r3, [pc, #68]	; (8010874 <tcp_get_next_optbyte+0x64>)
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	88fa      	ldrh	r2, [r7, #6]
 8010832:	429a      	cmp	r2, r3
 8010834:	d208      	bcs.n	8010848 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010836:	4b10      	ldr	r3, [pc, #64]	; (8010878 <tcp_get_next_optbyte+0x68>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	3314      	adds	r3, #20
 801083c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801083e:	88fb      	ldrh	r3, [r7, #6]
 8010840:	683a      	ldr	r2, [r7, #0]
 8010842:	4413      	add	r3, r2
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	e00b      	b.n	8010860 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010848:	88fb      	ldrh	r3, [r7, #6]
 801084a:	b2da      	uxtb	r2, r3
 801084c:	4b09      	ldr	r3, [pc, #36]	; (8010874 <tcp_get_next_optbyte+0x64>)
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	b2db      	uxtb	r3, r3
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010856:	4b06      	ldr	r3, [pc, #24]	; (8010870 <tcp_get_next_optbyte+0x60>)
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	797b      	ldrb	r3, [r7, #5]
 801085c:	4413      	add	r3, r2
 801085e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010860:	4618      	mov	r0, r3
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	20004aec 	.word	0x20004aec
 8010870:	20004ae8 	.word	0x20004ae8
 8010874:	20004ae6 	.word	0x20004ae6
 8010878:	20004ae0 	.word	0x20004ae0

0801087c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d106      	bne.n	8010898 <tcp_parseopt+0x1c>
 801088a:	4b32      	ldr	r3, [pc, #200]	; (8010954 <tcp_parseopt+0xd8>)
 801088c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010890:	4931      	ldr	r1, [pc, #196]	; (8010958 <tcp_parseopt+0xdc>)
 8010892:	4832      	ldr	r0, [pc, #200]	; (801095c <tcp_parseopt+0xe0>)
 8010894:	f006 fd66 	bl	8017364 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010898:	4b31      	ldr	r3, [pc, #196]	; (8010960 <tcp_parseopt+0xe4>)
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d055      	beq.n	801094c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80108a0:	4b30      	ldr	r3, [pc, #192]	; (8010964 <tcp_parseopt+0xe8>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	801a      	strh	r2, [r3, #0]
 80108a6:	e045      	b.n	8010934 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80108a8:	f7ff ffb2 	bl	8010810 <tcp_get_next_optbyte>
 80108ac:	4603      	mov	r3, r0
 80108ae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	2b02      	cmp	r3, #2
 80108b4:	d006      	beq.n	80108c4 <tcp_parseopt+0x48>
 80108b6:	2b02      	cmp	r3, #2
 80108b8:	dc2b      	bgt.n	8010912 <tcp_parseopt+0x96>
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d041      	beq.n	8010942 <tcp_parseopt+0xc6>
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d127      	bne.n	8010912 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80108c2:	e037      	b.n	8010934 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80108c4:	f7ff ffa4 	bl	8010810 <tcp_get_next_optbyte>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	d13b      	bne.n	8010946 <tcp_parseopt+0xca>
 80108ce:	4b25      	ldr	r3, [pc, #148]	; (8010964 <tcp_parseopt+0xe8>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	3301      	adds	r3, #1
 80108d4:	4a22      	ldr	r2, [pc, #136]	; (8010960 <tcp_parseopt+0xe4>)
 80108d6:	8812      	ldrh	r2, [r2, #0]
 80108d8:	4293      	cmp	r3, r2
 80108da:	da34      	bge.n	8010946 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80108dc:	f7ff ff98 	bl	8010810 <tcp_get_next_optbyte>
 80108e0:	4603      	mov	r3, r0
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	021b      	lsls	r3, r3, #8
 80108e6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80108e8:	f7ff ff92 	bl	8010810 <tcp_get_next_optbyte>
 80108ec:	4603      	mov	r3, r0
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	89bb      	ldrh	r3, [r7, #12]
 80108f2:	4313      	orrs	r3, r2
 80108f4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80108f6:	89bb      	ldrh	r3, [r7, #12]
 80108f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80108fc:	d804      	bhi.n	8010908 <tcp_parseopt+0x8c>
 80108fe:	89bb      	ldrh	r3, [r7, #12]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d001      	beq.n	8010908 <tcp_parseopt+0x8c>
 8010904:	89ba      	ldrh	r2, [r7, #12]
 8010906:	e001      	b.n	801090c <tcp_parseopt+0x90>
 8010908:	f44f 7206 	mov.w	r2, #536	; 0x218
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010910:	e010      	b.n	8010934 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010912:	f7ff ff7d 	bl	8010810 <tcp_get_next_optbyte>
 8010916:	4603      	mov	r3, r0
 8010918:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801091a:	7afb      	ldrb	r3, [r7, #11]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d914      	bls.n	801094a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010920:	7afb      	ldrb	r3, [r7, #11]
 8010922:	b29a      	uxth	r2, r3
 8010924:	4b0f      	ldr	r3, [pc, #60]	; (8010964 <tcp_parseopt+0xe8>)
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	4413      	add	r3, r2
 801092a:	b29b      	uxth	r3, r3
 801092c:	3b02      	subs	r3, #2
 801092e:	b29a      	uxth	r2, r3
 8010930:	4b0c      	ldr	r3, [pc, #48]	; (8010964 <tcp_parseopt+0xe8>)
 8010932:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010934:	4b0b      	ldr	r3, [pc, #44]	; (8010964 <tcp_parseopt+0xe8>)
 8010936:	881a      	ldrh	r2, [r3, #0]
 8010938:	4b09      	ldr	r3, [pc, #36]	; (8010960 <tcp_parseopt+0xe4>)
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	429a      	cmp	r2, r3
 801093e:	d3b3      	bcc.n	80108a8 <tcp_parseopt+0x2c>
 8010940:	e004      	b.n	801094c <tcp_parseopt+0xd0>
          return;
 8010942:	bf00      	nop
 8010944:	e002      	b.n	801094c <tcp_parseopt+0xd0>
            return;
 8010946:	bf00      	nop
 8010948:	e000      	b.n	801094c <tcp_parseopt+0xd0>
            return;
 801094a:	bf00      	nop
      }
    }
  }
}
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	080195a4 	.word	0x080195a4
 8010958:	08019a08 	.word	0x08019a08
 801095c:	080195f0 	.word	0x080195f0
 8010960:	20004ae4 	.word	0x20004ae4
 8010964:	20004aec 	.word	0x20004aec

08010968 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010968:	b480      	push	{r7}
 801096a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801096c:	4b05      	ldr	r3, [pc, #20]	; (8010984 <tcp_trigger_input_pcb_close+0x1c>)
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	f043 0310 	orr.w	r3, r3, #16
 8010974:	b2da      	uxtb	r2, r3
 8010976:	4b03      	ldr	r3, [pc, #12]	; (8010984 <tcp_trigger_input_pcb_close+0x1c>)
 8010978:	701a      	strb	r2, [r3, #0]
}
 801097a:	bf00      	nop
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	20004afd 	.word	0x20004afd

08010988 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00a      	beq.n	80109b0 <tcp_route+0x28>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	7a1b      	ldrb	r3, [r3, #8]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d006      	beq.n	80109b0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	7a1b      	ldrb	r3, [r3, #8]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7fb fb14 	bl	800bfd4 <netif_get_by_index>
 80109ac:	4603      	mov	r3, r0
 80109ae:	e003      	b.n	80109b8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f005 f845 	bl	8015a40 <ip4_route>
 80109b6:	4603      	mov	r3, r0
  }
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80109c0:	b590      	push	{r4, r7, lr}
 80109c2:	b087      	sub	sp, #28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	603b      	str	r3, [r7, #0]
 80109cc:	4613      	mov	r3, r2
 80109ce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d105      	bne.n	80109e2 <tcp_create_segment+0x22>
 80109d6:	4b44      	ldr	r3, [pc, #272]	; (8010ae8 <tcp_create_segment+0x128>)
 80109d8:	22a3      	movs	r2, #163	; 0xa3
 80109da:	4944      	ldr	r1, [pc, #272]	; (8010aec <tcp_create_segment+0x12c>)
 80109dc:	4844      	ldr	r0, [pc, #272]	; (8010af0 <tcp_create_segment+0x130>)
 80109de:	f006 fcc1 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d105      	bne.n	80109f4 <tcp_create_segment+0x34>
 80109e8:	4b3f      	ldr	r3, [pc, #252]	; (8010ae8 <tcp_create_segment+0x128>)
 80109ea:	22a4      	movs	r2, #164	; 0xa4
 80109ec:	4941      	ldr	r1, [pc, #260]	; (8010af4 <tcp_create_segment+0x134>)
 80109ee:	4840      	ldr	r0, [pc, #256]	; (8010af0 <tcp_create_segment+0x130>)
 80109f0:	f006 fcb8 	bl	8017364 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80109f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	f003 0304 	and.w	r3, r3, #4
 8010a00:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a02:	2003      	movs	r0, #3
 8010a04:	f7fa ff72 	bl	800b8ec <memp_malloc>
 8010a08:	6138      	str	r0, [r7, #16]
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d104      	bne.n	8010a1a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010a10:	68b8      	ldr	r0, [r7, #8]
 8010a12:	f7fb fe6d 	bl	800c6f0 <pbuf_free>
    return NULL;
 8010a16:	2300      	movs	r3, #0
 8010a18:	e061      	b.n	8010ade <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a20:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	891a      	ldrh	r2, [r3, #8]
 8010a32:	7dfb      	ldrb	r3, [r7, #23]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d205      	bcs.n	8010a46 <tcp_create_segment+0x86>
 8010a3a:	4b2b      	ldr	r3, [pc, #172]	; (8010ae8 <tcp_create_segment+0x128>)
 8010a3c:	22b0      	movs	r2, #176	; 0xb0
 8010a3e:	492e      	ldr	r1, [pc, #184]	; (8010af8 <tcp_create_segment+0x138>)
 8010a40:	482b      	ldr	r0, [pc, #172]	; (8010af0 <tcp_create_segment+0x130>)
 8010a42:	f006 fc8f 	bl	8017364 <iprintf>
  seg->len = p->tot_len - optlen;
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	891a      	ldrh	r2, [r3, #8]
 8010a4a:	7dfb      	ldrb	r3, [r7, #23]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010a56:	2114      	movs	r1, #20
 8010a58:	68b8      	ldr	r0, [r7, #8]
 8010a5a:	f7fb fdb3 	bl	800c5c4 <pbuf_add_header>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d004      	beq.n	8010a6e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010a64:	6938      	ldr	r0, [r7, #16]
 8010a66:	f7fd f8d2 	bl	800dc0e <tcp_seg_free>
    return NULL;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e037      	b.n	8010ade <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	685a      	ldr	r2, [r3, #4]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	8ada      	ldrh	r2, [r3, #22]
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	68dc      	ldr	r4, [r3, #12]
 8010a80:	4610      	mov	r0, r2
 8010a82:	f7fa fa7d 	bl	800af80 <lwip_htons>
 8010a86:	4603      	mov	r3, r0
 8010a88:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	8b1a      	ldrh	r2, [r3, #24]
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	68dc      	ldr	r4, [r3, #12]
 8010a92:	4610      	mov	r0, r2
 8010a94:	f7fa fa74 	bl	800af80 <lwip_htons>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	68dc      	ldr	r4, [r3, #12]
 8010aa0:	6838      	ldr	r0, [r7, #0]
 8010aa2:	f7fa fa82 	bl	800afaa <lwip_htonl>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010aaa:	7dfb      	ldrb	r3, [r7, #23]
 8010aac:	089b      	lsrs	r3, r3, #2
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	3305      	adds	r3, #5
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	031b      	lsls	r3, r3, #12
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	68dc      	ldr	r4, [r3, #12]
 8010ac6:	4610      	mov	r0, r2
 8010ac8:	f7fa fa5a 	bl	800af80 <lwip_htons>
 8010acc:	4603      	mov	r3, r0
 8010ace:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	749a      	strb	r2, [r3, #18]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	74da      	strb	r2, [r3, #19]
  return seg;
 8010adc:	693b      	ldr	r3, [r7, #16]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	371c      	adds	r7, #28
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd90      	pop	{r4, r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	08019a24 	.word	0x08019a24
 8010aec:	08019a58 	.word	0x08019a58
 8010af0:	08019a78 	.word	0x08019a78
 8010af4:	08019aa0 	.word	0x08019aa0
 8010af8:	08019ac4 	.word	0x08019ac4

08010afc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010afc:	b590      	push	{r4, r7, lr}
 8010afe:	b08b      	sub	sp, #44	; 0x2c
 8010b00:	af02      	add	r7, sp, #8
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	460b      	mov	r3, r1
 8010b06:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	61fb      	str	r3, [r7, #28]
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010b10:	2300      	movs	r3, #0
 8010b12:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d106      	bne.n	8010b28 <tcp_split_unsent_seg+0x2c>
 8010b1a:	4b95      	ldr	r3, [pc, #596]	; (8010d70 <tcp_split_unsent_seg+0x274>)
 8010b1c:	f240 324b 	movw	r2, #843	; 0x34b
 8010b20:	4994      	ldr	r1, [pc, #592]	; (8010d74 <tcp_split_unsent_seg+0x278>)
 8010b22:	4895      	ldr	r0, [pc, #596]	; (8010d78 <tcp_split_unsent_seg+0x27c>)
 8010b24:	f006 fc1e 	bl	8017364 <iprintf>

  useg = pcb->unsent;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b2c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d102      	bne.n	8010b3a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010b34:	f04f 33ff 	mov.w	r3, #4294967295
 8010b38:	e116      	b.n	8010d68 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010b3a:	887b      	ldrh	r3, [r7, #2]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d109      	bne.n	8010b54 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010b40:	4b8b      	ldr	r3, [pc, #556]	; (8010d70 <tcp_split_unsent_seg+0x274>)
 8010b42:	f240 3253 	movw	r2, #851	; 0x353
 8010b46:	498d      	ldr	r1, [pc, #564]	; (8010d7c <tcp_split_unsent_seg+0x280>)
 8010b48:	488b      	ldr	r0, [pc, #556]	; (8010d78 <tcp_split_unsent_seg+0x27c>)
 8010b4a:	f006 fc0b 	bl	8017364 <iprintf>
    return ERR_VAL;
 8010b4e:	f06f 0305 	mvn.w	r3, #5
 8010b52:	e109      	b.n	8010d68 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	891b      	ldrh	r3, [r3, #8]
 8010b58:	887a      	ldrh	r2, [r7, #2]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d301      	bcc.n	8010b62 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e102      	b.n	8010d68 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b66:	887a      	ldrh	r2, [r7, #2]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d906      	bls.n	8010b7a <tcp_split_unsent_seg+0x7e>
 8010b6c:	4b80      	ldr	r3, [pc, #512]	; (8010d70 <tcp_split_unsent_seg+0x274>)
 8010b6e:	f240 325b 	movw	r2, #859	; 0x35b
 8010b72:	4983      	ldr	r1, [pc, #524]	; (8010d80 <tcp_split_unsent_seg+0x284>)
 8010b74:	4880      	ldr	r0, [pc, #512]	; (8010d78 <tcp_split_unsent_seg+0x27c>)
 8010b76:	f006 fbf5 	bl	8017364 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	891b      	ldrh	r3, [r3, #8]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d106      	bne.n	8010b90 <tcp_split_unsent_seg+0x94>
 8010b82:	4b7b      	ldr	r3, [pc, #492]	; (8010d70 <tcp_split_unsent_seg+0x274>)
 8010b84:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010b88:	497e      	ldr	r1, [pc, #504]	; (8010d84 <tcp_split_unsent_seg+0x288>)
 8010b8a:	487b      	ldr	r0, [pc, #492]	; (8010d78 <tcp_split_unsent_seg+0x27c>)
 8010b8c:	f006 fbea 	bl	8017364 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	7a9b      	ldrb	r3, [r3, #10]
 8010b94:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	f003 0304 	and.w	r3, r3, #4
 8010ba0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	891a      	ldrh	r2, [r3, #8]
 8010ba6:	887b      	ldrh	r3, [r7, #2]
 8010ba8:	1ad3      	subs	r3, r2, r3
 8010baa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010bac:	7bbb      	ldrb	r3, [r7, #14]
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	89bb      	ldrh	r3, [r7, #12]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bba:	4619      	mov	r1, r3
 8010bbc:	2036      	movs	r0, #54	; 0x36
 8010bbe:	f7fb fab3 	bl	800c128 <pbuf_alloc>
 8010bc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f000 80b7 	beq.w	8010d3a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	891a      	ldrh	r2, [r3, #8]
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	891b      	ldrh	r3, [r3, #8]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	887b      	ldrh	r3, [r7, #2]
 8010bdc:	4413      	add	r3, r2
 8010bde:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	6858      	ldr	r0, [r3, #4]
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	685a      	ldr	r2, [r3, #4]
 8010be8:	7bbb      	ldrb	r3, [r7, #14]
 8010bea:	18d1      	adds	r1, r2, r3
 8010bec:	897b      	ldrh	r3, [r7, #10]
 8010bee:	89ba      	ldrh	r2, [r7, #12]
 8010bf0:	f7fb ff84 	bl	800cafc <pbuf_copy_partial>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	89bb      	ldrh	r3, [r7, #12]
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	f040 809f 	bne.w	8010d3e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	899b      	ldrh	r3, [r3, #12]
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fa f9b9 	bl	800af80 <lwip_htons>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c16:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010c18:	2300      	movs	r3, #0
 8010c1a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010c1c:	7efb      	ldrb	r3, [r7, #27]
 8010c1e:	f003 0308 	and.w	r3, r3, #8
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d007      	beq.n	8010c36 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c26:	7efb      	ldrb	r3, [r7, #27]
 8010c28:	f023 0308 	bic.w	r3, r3, #8
 8010c2c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c2e:	7ebb      	ldrb	r3, [r7, #26]
 8010c30:	f043 0308 	orr.w	r3, r3, #8
 8010c34:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010c36:	7efb      	ldrb	r3, [r7, #27]
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d007      	beq.n	8010c50 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010c40:	7efb      	ldrb	r3, [r7, #27]
 8010c42:	f023 0301 	bic.w	r3, r3, #1
 8010c46:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010c48:	7ebb      	ldrb	r3, [r7, #26]
 8010c4a:	f043 0301 	orr.w	r3, r3, #1
 8010c4e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fa f9a7 	bl	800afaa <lwip_htonl>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	887b      	ldrh	r3, [r7, #2]
 8010c60:	18d1      	adds	r1, r2, r3
 8010c62:	7eba      	ldrb	r2, [r7, #26]
 8010c64:	7bfb      	ldrb	r3, [r7, #15]
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	6939      	ldr	r1, [r7, #16]
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7ff fea7 	bl	80109c0 <tcp_create_segment>
 8010c72:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d063      	beq.n	8010d42 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fb fdc4 	bl	800c80c <pbuf_clen>
 8010c84:	4603      	mov	r3, r0
 8010c86:	461a      	mov	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c8e:	1a9b      	subs	r3, r3, r2
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	6858      	ldr	r0, [r3, #4]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	891a      	ldrh	r2, [r3, #8]
 8010ca2:	89bb      	ldrh	r3, [r7, #12]
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	4619      	mov	r1, r3
 8010caa:	f7fb fb9b 	bl	800c3e4 <pbuf_realloc>
  useg->len -= remainder;
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	891a      	ldrh	r2, [r3, #8]
 8010cb2:	89bb      	ldrh	r3, [r7, #12]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	899b      	ldrh	r3, [r3, #12]
 8010cc2:	b29c      	uxth	r4, r3
 8010cc4:	7efb      	ldrb	r3, [r7, #27]
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fa f959 	bl	800af80 <lwip_htons>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	4322      	orrs	r2, r4
 8010cd8:	b292      	uxth	r2, r2
 8010cda:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fb fd93 	bl	800c80c <pbuf_clen>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	461a      	mov	r2, r3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf0:	4413      	add	r3, r2
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fb fd84 	bl	800c80c <pbuf_clen>
 8010d04:	4603      	mov	r3, r0
 8010d06:	461a      	mov	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d0e:	4413      	add	r3, r2
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	69fa      	ldr	r2, [r7, #28]
 8010d24:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d103      	bne.n	8010d36 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	e016      	b.n	8010d68 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010d3a:	bf00      	nop
 8010d3c:	e002      	b.n	8010d44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d3e:	bf00      	nop
 8010d40:	e000      	b.n	8010d44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d42:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d006      	beq.n	8010d58 <tcp_split_unsent_seg+0x25c>
 8010d4a:	4b09      	ldr	r3, [pc, #36]	; (8010d70 <tcp_split_unsent_seg+0x274>)
 8010d4c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010d50:	490d      	ldr	r1, [pc, #52]	; (8010d88 <tcp_split_unsent_seg+0x28c>)
 8010d52:	4809      	ldr	r0, [pc, #36]	; (8010d78 <tcp_split_unsent_seg+0x27c>)
 8010d54:	f006 fb06 	bl	8017364 <iprintf>
  if (p != NULL) {
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d002      	beq.n	8010d64 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010d5e:	6938      	ldr	r0, [r7, #16]
 8010d60:	f7fb fcc6 	bl	800c6f0 <pbuf_free>
  }

  return ERR_MEM;
 8010d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3724      	adds	r7, #36	; 0x24
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd90      	pop	{r4, r7, pc}
 8010d70:	08019a24 	.word	0x08019a24
 8010d74:	08019db8 	.word	0x08019db8
 8010d78:	08019a78 	.word	0x08019a78
 8010d7c:	08019ddc 	.word	0x08019ddc
 8010d80:	08019e00 	.word	0x08019e00
 8010d84:	08019e10 	.word	0x08019e10
 8010d88:	08019e20 	.word	0x08019e20

08010d8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010d8c:	b590      	push	{r4, r7, lr}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <tcp_send_fin+0x1c>
 8010d9a:	4b21      	ldr	r3, [pc, #132]	; (8010e20 <tcp_send_fin+0x94>)
 8010d9c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010da0:	4920      	ldr	r1, [pc, #128]	; (8010e24 <tcp_send_fin+0x98>)
 8010da2:	4821      	ldr	r0, [pc, #132]	; (8010e28 <tcp_send_fin+0x9c>)
 8010da4:	f006 fade 	bl	8017364 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d02e      	beq.n	8010e0e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010db4:	60fb      	str	r3, [r7, #12]
 8010db6:	e002      	b.n	8010dbe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1f8      	bne.n	8010db8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	899b      	ldrh	r3, [r3, #12]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fa f8d6 	bl	800af80 <lwip_htons>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	f003 0307 	and.w	r3, r3, #7
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d116      	bne.n	8010e0e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	899b      	ldrh	r3, [r3, #12]
 8010de6:	b29c      	uxth	r4, r3
 8010de8:	2001      	movs	r0, #1
 8010dea:	f7fa f8c9 	bl	800af80 <lwip_htons>
 8010dee:	4603      	mov	r3, r0
 8010df0:	461a      	mov	r2, r3
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	4322      	orrs	r2, r4
 8010df8:	b292      	uxth	r2, r2
 8010dfa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	8b5b      	ldrh	r3, [r3, #26]
 8010e00:	f043 0320 	orr.w	r3, r3, #32
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	e004      	b.n	8010e18 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010e0e:	2101      	movs	r1, #1
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f80b 	bl	8010e2c <tcp_enqueue_flags>
 8010e16:	4603      	mov	r3, r0
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3714      	adds	r7, #20
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd90      	pop	{r4, r7, pc}
 8010e20:	08019a24 	.word	0x08019a24
 8010e24:	08019e2c 	.word	0x08019e2c
 8010e28:	08019a78 	.word	0x08019a78

08010e2c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b08a      	sub	sp, #40	; 0x28
 8010e30:	af02      	add	r7, sp, #8
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	460b      	mov	r3, r1
 8010e36:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e40:	78fb      	ldrb	r3, [r7, #3]
 8010e42:	f003 0303 	and.w	r3, r3, #3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <tcp_enqueue_flags+0x2c>
 8010e4a:	4b67      	ldr	r3, [pc, #412]	; (8010fe8 <tcp_enqueue_flags+0x1bc>)
 8010e4c:	f240 4211 	movw	r2, #1041	; 0x411
 8010e50:	4966      	ldr	r1, [pc, #408]	; (8010fec <tcp_enqueue_flags+0x1c0>)
 8010e52:	4867      	ldr	r0, [pc, #412]	; (8010ff0 <tcp_enqueue_flags+0x1c4>)
 8010e54:	f006 fa86 	bl	8017364 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <tcp_enqueue_flags+0x40>
 8010e5e:	4b62      	ldr	r3, [pc, #392]	; (8010fe8 <tcp_enqueue_flags+0x1bc>)
 8010e60:	f240 4213 	movw	r2, #1043	; 0x413
 8010e64:	4963      	ldr	r1, [pc, #396]	; (8010ff4 <tcp_enqueue_flags+0x1c8>)
 8010e66:	4862      	ldr	r0, [pc, #392]	; (8010ff0 <tcp_enqueue_flags+0x1c4>)
 8010e68:	f006 fa7c 	bl	8017364 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010e6c:	78fb      	ldrb	r3, [r7, #3]
 8010e6e:	f003 0302 	and.w	r3, r3, #2
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010e76:	2301      	movs	r3, #1
 8010e78:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010e7a:	7ffb      	ldrb	r3, [r7, #31]
 8010e7c:	009b      	lsls	r3, r3, #2
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	f003 0304 	and.w	r3, r3, #4
 8010e84:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e8e:	4619      	mov	r1, r3
 8010e90:	2036      	movs	r0, #54	; 0x36
 8010e92:	f7fb f949 	bl	800c128 <pbuf_alloc>
 8010e96:	6138      	str	r0, [r7, #16]
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d109      	bne.n	8010eb2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8b5b      	ldrh	r3, [r3, #26]
 8010ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010eac:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb0:	e095      	b.n	8010fde <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	895a      	ldrh	r2, [r3, #10]
 8010eb6:	7dfb      	ldrb	r3, [r7, #23]
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d206      	bcs.n	8010ecc <tcp_enqueue_flags+0xa0>
 8010ebe:	4b4a      	ldr	r3, [pc, #296]	; (8010fe8 <tcp_enqueue_flags+0x1bc>)
 8010ec0:	f240 4239 	movw	r2, #1081	; 0x439
 8010ec4:	494c      	ldr	r1, [pc, #304]	; (8010ff8 <tcp_enqueue_flags+0x1cc>)
 8010ec6:	484a      	ldr	r0, [pc, #296]	; (8010ff0 <tcp_enqueue_flags+0x1c4>)
 8010ec8:	f006 fa4c 	bl	8017364 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010ed0:	78fa      	ldrb	r2, [r7, #3]
 8010ed2:	7ffb      	ldrb	r3, [r7, #31]
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	6939      	ldr	r1, [r7, #16]
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff fd70 	bl	80109c0 <tcp_create_segment>
 8010ee0:	60f8      	str	r0, [r7, #12]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d109      	bne.n	8010efc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	8b5b      	ldrh	r3, [r3, #26]
 8010eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ef0:	b29a      	uxth	r2, r3
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8010efa:	e070      	b.n	8010fde <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	f003 0303 	and.w	r3, r3, #3
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d006      	beq.n	8010f16 <tcp_enqueue_flags+0xea>
 8010f08:	4b37      	ldr	r3, [pc, #220]	; (8010fe8 <tcp_enqueue_flags+0x1bc>)
 8010f0a:	f240 4242 	movw	r2, #1090	; 0x442
 8010f0e:	493b      	ldr	r1, [pc, #236]	; (8010ffc <tcp_enqueue_flags+0x1d0>)
 8010f10:	4837      	ldr	r0, [pc, #220]	; (8010ff0 <tcp_enqueue_flags+0x1c4>)
 8010f12:	f006 fa27 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	891b      	ldrh	r3, [r3, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d006      	beq.n	8010f2c <tcp_enqueue_flags+0x100>
 8010f1e:	4b32      	ldr	r3, [pc, #200]	; (8010fe8 <tcp_enqueue_flags+0x1bc>)
 8010f20:	f240 4243 	movw	r2, #1091	; 0x443
 8010f24:	4936      	ldr	r1, [pc, #216]	; (8011000 <tcp_enqueue_flags+0x1d4>)
 8010f26:	4832      	ldr	r0, [pc, #200]	; (8010ff0 <tcp_enqueue_flags+0x1c4>)
 8010f28:	f006 fa1c 	bl	8017364 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d103      	bne.n	8010f3c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f3a:	e00d      	b.n	8010f58 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f40:	61bb      	str	r3, [r7, #24]
 8010f42:	e002      	b.n	8010f4a <tcp_enqueue_flags+0x11e>
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	61bb      	str	r3, [r7, #24]
 8010f4a:	69bb      	ldr	r3, [r7, #24]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1f8      	bne.n	8010f44 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010f60:	78fb      	ldrb	r3, [r7, #3]
 8010f62:	f003 0302 	and.w	r3, r3, #2
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d104      	bne.n	8010f74 <tcp_enqueue_flags+0x148>
 8010f6a:	78fb      	ldrb	r3, [r7, #3]
 8010f6c:	f003 0301 	and.w	r3, r3, #1
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d004      	beq.n	8010f7e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f78:	1c5a      	adds	r2, r3, #1
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010f7e:	78fb      	ldrb	r3, [r7, #3]
 8010f80:	f003 0301 	and.w	r3, r3, #1
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d006      	beq.n	8010f96 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	8b5b      	ldrh	r3, [r3, #26]
 8010f8c:	f043 0320 	orr.w	r3, r3, #32
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fb fc36 	bl	800c80c <pbuf_clen>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010faa:	4413      	add	r3, r2
 8010fac:	b29a      	uxth	r2, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00e      	beq.n	8010fdc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10a      	bne.n	8010fdc <tcp_enqueue_flags+0x1b0>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <tcp_enqueue_flags+0x1b0>
 8010fce:	4b06      	ldr	r3, [pc, #24]	; (8010fe8 <tcp_enqueue_flags+0x1bc>)
 8010fd0:	f240 4265 	movw	r2, #1125	; 0x465
 8010fd4:	490b      	ldr	r1, [pc, #44]	; (8011004 <tcp_enqueue_flags+0x1d8>)
 8010fd6:	4806      	ldr	r0, [pc, #24]	; (8010ff0 <tcp_enqueue_flags+0x1c4>)
 8010fd8:	f006 f9c4 	bl	8017364 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3720      	adds	r7, #32
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	08019a24 	.word	0x08019a24
 8010fec:	08019e48 	.word	0x08019e48
 8010ff0:	08019a78 	.word	0x08019a78
 8010ff4:	08019ea0 	.word	0x08019ea0
 8010ff8:	08019ec0 	.word	0x08019ec0
 8010ffc:	08019efc 	.word	0x08019efc
 8011000:	08019f14 	.word	0x08019f14
 8011004:	08019f40 	.word	0x08019f40

08011008 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011008:	b5b0      	push	{r4, r5, r7, lr}
 801100a:	b08a      	sub	sp, #40	; 0x28
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <tcp_output+0x1c>
 8011016:	4b9e      	ldr	r3, [pc, #632]	; (8011290 <tcp_output+0x288>)
 8011018:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801101c:	499d      	ldr	r1, [pc, #628]	; (8011294 <tcp_output+0x28c>)
 801101e:	489e      	ldr	r0, [pc, #632]	; (8011298 <tcp_output+0x290>)
 8011020:	f006 f9a0 	bl	8017364 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	7d1b      	ldrb	r3, [r3, #20]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d106      	bne.n	801103a <tcp_output+0x32>
 801102c:	4b98      	ldr	r3, [pc, #608]	; (8011290 <tcp_output+0x288>)
 801102e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011032:	499a      	ldr	r1, [pc, #616]	; (801129c <tcp_output+0x294>)
 8011034:	4898      	ldr	r0, [pc, #608]	; (8011298 <tcp_output+0x290>)
 8011036:	f006 f995 	bl	8017364 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801103a:	4b99      	ldr	r3, [pc, #612]	; (80112a0 <tcp_output+0x298>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	429a      	cmp	r2, r3
 8011042:	d101      	bne.n	8011048 <tcp_output+0x40>
    return ERR_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	e1ce      	b.n	80113e6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011054:	4293      	cmp	r3, r2
 8011056:	bf28      	it	cs
 8011058:	4613      	movcs	r3, r2
 801105a:	b29b      	uxth	r3, r3
 801105c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011062:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	2b00      	cmp	r3, #0
 8011068:	d10b      	bne.n	8011082 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	8b5b      	ldrh	r3, [r3, #26]
 801106e:	f003 0302 	and.w	r3, r3, #2
 8011072:	2b00      	cmp	r3, #0
 8011074:	f000 81aa 	beq.w	80113cc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 fdcb 	bl	8011c14 <tcp_send_empty_ack>
 801107e:	4603      	mov	r3, r0
 8011080:	e1b1      	b.n	80113e6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011082:	6879      	ldr	r1, [r7, #4]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3304      	adds	r3, #4
 8011088:	461a      	mov	r2, r3
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7ff fc7c 	bl	8010988 <tcp_route>
 8011090:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d102      	bne.n	801109e <tcp_output+0x96>
    return ERR_RTE;
 8011098:	f06f 0303 	mvn.w	r3, #3
 801109c:	e1a3      	b.n	80113e6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d003      	beq.n	80110ac <tcp_output+0xa4>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d111      	bne.n	80110d0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d002      	beq.n	80110b8 <tcp_output+0xb0>
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	3304      	adds	r3, #4
 80110b6:	e000      	b.n	80110ba <tcp_output+0xb2>
 80110b8:	2300      	movs	r3, #0
 80110ba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d102      	bne.n	80110c8 <tcp_output+0xc0>
      return ERR_RTE;
 80110c2:	f06f 0303 	mvn.w	r3, #3
 80110c6:	e18e      	b.n	80113e6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80110d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7f9 ff67 	bl	800afaa <lwip_htonl>
 80110dc:	4602      	mov	r2, r0
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110e6:	8912      	ldrh	r2, [r2, #8]
 80110e8:	4413      	add	r3, r2
 80110ea:	69ba      	ldr	r2, [r7, #24]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d227      	bcs.n	8011140 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110f6:	461a      	mov	r2, r3
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d114      	bne.n	8011128 <tcp_output+0x120>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011102:	2b00      	cmp	r3, #0
 8011104:	d110      	bne.n	8011128 <tcp_output+0x120>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801110c:	2b00      	cmp	r3, #0
 801110e:	d10b      	bne.n	8011128 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2200      	movs	r2, #0
 8011114:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	8b5b      	ldrh	r3, [r3, #26]
 801112c:	f003 0302 	and.w	r3, r3, #2
 8011130:	2b00      	cmp	r3, #0
 8011132:	f000 814d 	beq.w	80113d0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 fd6c 	bl	8011c14 <tcp_send_empty_ack>
 801113c:	4603      	mov	r3, r0
 801113e:	e152      	b.n	80113e6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801114c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801114e:	6a3b      	ldr	r3, [r7, #32]
 8011150:	2b00      	cmp	r3, #0
 8011152:	f000 811c 	beq.w	801138e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011156:	e002      	b.n	801115e <tcp_output+0x156>
 8011158:	6a3b      	ldr	r3, [r7, #32]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	623b      	str	r3, [r7, #32]
 801115e:	6a3b      	ldr	r3, [r7, #32]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1f8      	bne.n	8011158 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011166:	e112      	b.n	801138e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	899b      	ldrh	r3, [r3, #12]
 801116e:	b29b      	uxth	r3, r3
 8011170:	4618      	mov	r0, r3
 8011172:	f7f9 ff05 	bl	800af80 <lwip_htons>
 8011176:	4603      	mov	r3, r0
 8011178:	b2db      	uxtb	r3, r3
 801117a:	f003 0304 	and.w	r3, r3, #4
 801117e:	2b00      	cmp	r3, #0
 8011180:	d006      	beq.n	8011190 <tcp_output+0x188>
 8011182:	4b43      	ldr	r3, [pc, #268]	; (8011290 <tcp_output+0x288>)
 8011184:	f240 5236 	movw	r2, #1334	; 0x536
 8011188:	4946      	ldr	r1, [pc, #280]	; (80112a4 <tcp_output+0x29c>)
 801118a:	4843      	ldr	r0, [pc, #268]	; (8011298 <tcp_output+0x290>)
 801118c:	f006 f8ea 	bl	8017364 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011194:	2b00      	cmp	r3, #0
 8011196:	d01f      	beq.n	80111d8 <tcp_output+0x1d0>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8b5b      	ldrh	r3, [r3, #26]
 801119c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d119      	bne.n	80111d8 <tcp_output+0x1d0>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00b      	beq.n	80111c4 <tcp_output+0x1bc>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d110      	bne.n	80111d8 <tcp_output+0x1d0>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111ba:	891a      	ldrh	r2, [r3, #8]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d209      	bcs.n	80111d8 <tcp_output+0x1d0>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d004      	beq.n	80111d8 <tcp_output+0x1d0>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111d4:	2b08      	cmp	r3, #8
 80111d6:	d901      	bls.n	80111dc <tcp_output+0x1d4>
 80111d8:	2301      	movs	r3, #1
 80111da:	e000      	b.n	80111de <tcp_output+0x1d6>
 80111dc:	2300      	movs	r3, #0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d106      	bne.n	80111f0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	8b5b      	ldrh	r3, [r3, #26]
 80111e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	f000 80e4 	beq.w	80113b8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	7d1b      	ldrb	r3, [r3, #20]
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d00d      	beq.n	8011214 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80111f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	899b      	ldrh	r3, [r3, #12]
 80111fe:	b29c      	uxth	r4, r3
 8011200:	2010      	movs	r0, #16
 8011202:	f7f9 febd 	bl	800af80 <lwip_htons>
 8011206:	4603      	mov	r3, r0
 8011208:	461a      	mov	r2, r3
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	4322      	orrs	r2, r4
 8011210:	b292      	uxth	r2, r2
 8011212:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011214:	697a      	ldr	r2, [r7, #20]
 8011216:	6879      	ldr	r1, [r7, #4]
 8011218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801121a:	f000 f909 	bl	8011430 <tcp_output_segment>
 801121e:	4603      	mov	r3, r0
 8011220:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d009      	beq.n	801123e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	8b5b      	ldrh	r3, [r3, #26]
 801122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011232:	b29a      	uxth	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	835a      	strh	r2, [r3, #26]
      return err;
 8011238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801123c:	e0d3      	b.n	80113e6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	7d1b      	ldrb	r3, [r3, #20]
 801124a:	2b02      	cmp	r3, #2
 801124c:	d006      	beq.n	801125c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	8b5b      	ldrh	r3, [r3, #26]
 8011252:	f023 0303 	bic.w	r3, r3, #3
 8011256:	b29a      	uxth	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	4618      	mov	r0, r3
 8011264:	f7f9 fea1 	bl	800afaa <lwip_htonl>
 8011268:	4604      	mov	r4, r0
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	891b      	ldrh	r3, [r3, #8]
 801126e:	461d      	mov	r5, r3
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	899b      	ldrh	r3, [r3, #12]
 8011276:	b29b      	uxth	r3, r3
 8011278:	4618      	mov	r0, r3
 801127a:	f7f9 fe81 	bl	800af80 <lwip_htons>
 801127e:	4603      	mov	r3, r0
 8011280:	b2db      	uxtb	r3, r3
 8011282:	f003 0303 	and.w	r3, r3, #3
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00e      	beq.n	80112a8 <tcp_output+0x2a0>
 801128a:	2301      	movs	r3, #1
 801128c:	e00d      	b.n	80112aa <tcp_output+0x2a2>
 801128e:	bf00      	nop
 8011290:	08019a24 	.word	0x08019a24
 8011294:	08019f68 	.word	0x08019f68
 8011298:	08019a78 	.word	0x08019a78
 801129c:	08019f80 	.word	0x08019f80
 80112a0:	2000bbac 	.word	0x2000bbac
 80112a4:	08019fa8 	.word	0x08019fa8
 80112a8:	2300      	movs	r3, #0
 80112aa:	442b      	add	r3, r5
 80112ac:	4423      	add	r3, r4
 80112ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	da02      	bge.n	80112c2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	68ba      	ldr	r2, [r7, #8]
 80112c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	891b      	ldrh	r3, [r3, #8]
 80112c6:	461c      	mov	r4, r3
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	899b      	ldrh	r3, [r3, #12]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7f9 fe55 	bl	800af80 <lwip_htons>
 80112d6:	4603      	mov	r3, r0
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	f003 0303 	and.w	r3, r3, #3
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d001      	beq.n	80112e6 <tcp_output+0x2de>
 80112e2:	2301      	movs	r3, #1
 80112e4:	e000      	b.n	80112e8 <tcp_output+0x2e0>
 80112e6:	2300      	movs	r3, #0
 80112e8:	4423      	add	r3, r4
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d049      	beq.n	8011382 <tcp_output+0x37a>
      seg->next = NULL;
 80112ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f0:	2200      	movs	r2, #0
 80112f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d105      	bne.n	8011308 <tcp_output+0x300>
        pcb->unacked = seg;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011300:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	623b      	str	r3, [r7, #32]
 8011306:	e03f      	b.n	8011388 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	4618      	mov	r0, r3
 8011310:	f7f9 fe4b 	bl	800afaa <lwip_htonl>
 8011314:	4604      	mov	r4, r0
 8011316:	6a3b      	ldr	r3, [r7, #32]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	4618      	mov	r0, r3
 801131e:	f7f9 fe44 	bl	800afaa <lwip_htonl>
 8011322:	4603      	mov	r3, r0
 8011324:	1ae3      	subs	r3, r4, r3
 8011326:	2b00      	cmp	r3, #0
 8011328:	da24      	bge.n	8011374 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	3370      	adds	r3, #112	; 0x70
 801132e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011330:	e002      	b.n	8011338 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d011      	beq.n	8011364 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	4618      	mov	r0, r3
 801134a:	f7f9 fe2e 	bl	800afaa <lwip_htonl>
 801134e:	4604      	mov	r4, r0
 8011350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	4618      	mov	r0, r3
 8011358:	f7f9 fe27 	bl	800afaa <lwip_htonl>
 801135c:	4603      	mov	r3, r0
 801135e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011360:	2b00      	cmp	r3, #0
 8011362:	dbe6      	blt.n	8011332 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	e009      	b.n	8011388 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011374:	6a3b      	ldr	r3, [r7, #32]
 8011376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011378:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	623b      	str	r3, [r7, #32]
 8011380:	e002      	b.n	8011388 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011384:	f7fc fc43 	bl	800dc0e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801138c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	2b00      	cmp	r3, #0
 8011392:	d012      	beq.n	80113ba <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	4618      	mov	r0, r3
 801139c:	f7f9 fe05 	bl	800afaa <lwip_htonl>
 80113a0:	4602      	mov	r2, r0
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113a6:	1ad3      	subs	r3, r2, r3
 80113a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113aa:	8912      	ldrh	r2, [r2, #8]
 80113ac:	4413      	add	r3, r2
  while (seg != NULL &&
 80113ae:	69ba      	ldr	r2, [r7, #24]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	f4bf aed9 	bcs.w	8011168 <tcp_output+0x160>
 80113b6:	e000      	b.n	80113ba <tcp_output+0x3b2>
      break;
 80113b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d108      	bne.n	80113d4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2200      	movs	r2, #0
 80113c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80113ca:	e004      	b.n	80113d6 <tcp_output+0x3ce>
    goto output_done;
 80113cc:	bf00      	nop
 80113ce:	e002      	b.n	80113d6 <tcp_output+0x3ce>
    goto output_done;
 80113d0:	bf00      	nop
 80113d2:	e000      	b.n	80113d6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80113d4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	8b5b      	ldrh	r3, [r3, #26]
 80113da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113de:	b29a      	uxth	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80113e4:	2300      	movs	r3, #0
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3728      	adds	r7, #40	; 0x28
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bdb0      	pop	{r4, r5, r7, pc}
 80113ee:	bf00      	nop

080113f0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <tcp_output_segment_busy+0x1c>
 80113fe:	4b09      	ldr	r3, [pc, #36]	; (8011424 <tcp_output_segment_busy+0x34>)
 8011400:	f240 529a 	movw	r2, #1434	; 0x59a
 8011404:	4908      	ldr	r1, [pc, #32]	; (8011428 <tcp_output_segment_busy+0x38>)
 8011406:	4809      	ldr	r0, [pc, #36]	; (801142c <tcp_output_segment_busy+0x3c>)
 8011408:	f005 ffac 	bl	8017364 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	7b9b      	ldrb	r3, [r3, #14]
 8011412:	2b01      	cmp	r3, #1
 8011414:	d001      	beq.n	801141a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011416:	2301      	movs	r3, #1
 8011418:	e000      	b.n	801141c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801141a:	2300      	movs	r3, #0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3708      	adds	r7, #8
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	08019a24 	.word	0x08019a24
 8011428:	08019fc0 	.word	0x08019fc0
 801142c:	08019a78 	.word	0x08019a78

08011430 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011430:	b5b0      	push	{r4, r5, r7, lr}
 8011432:	b08c      	sub	sp, #48	; 0x30
 8011434:	af04      	add	r7, sp, #16
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d106      	bne.n	8011450 <tcp_output_segment+0x20>
 8011442:	4b63      	ldr	r3, [pc, #396]	; (80115d0 <tcp_output_segment+0x1a0>)
 8011444:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011448:	4962      	ldr	r1, [pc, #392]	; (80115d4 <tcp_output_segment+0x1a4>)
 801144a:	4863      	ldr	r0, [pc, #396]	; (80115d8 <tcp_output_segment+0x1a8>)
 801144c:	f005 ff8a 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d106      	bne.n	8011464 <tcp_output_segment+0x34>
 8011456:	4b5e      	ldr	r3, [pc, #376]	; (80115d0 <tcp_output_segment+0x1a0>)
 8011458:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801145c:	495f      	ldr	r1, [pc, #380]	; (80115dc <tcp_output_segment+0x1ac>)
 801145e:	485e      	ldr	r0, [pc, #376]	; (80115d8 <tcp_output_segment+0x1a8>)
 8011460:	f005 ff80 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d106      	bne.n	8011478 <tcp_output_segment+0x48>
 801146a:	4b59      	ldr	r3, [pc, #356]	; (80115d0 <tcp_output_segment+0x1a0>)
 801146c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011470:	495b      	ldr	r1, [pc, #364]	; (80115e0 <tcp_output_segment+0x1b0>)
 8011472:	4859      	ldr	r0, [pc, #356]	; (80115d8 <tcp_output_segment+0x1a8>)
 8011474:	f005 ff76 	bl	8017364 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f7ff ffb9 	bl	80113f0 <tcp_output_segment_busy>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d001      	beq.n	8011488 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011484:	2300      	movs	r3, #0
 8011486:	e09f      	b.n	80115c8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	68dc      	ldr	r4, [r3, #12]
 8011490:	4610      	mov	r0, r2
 8011492:	f7f9 fd8a 	bl	800afaa <lwip_htonl>
 8011496:	4603      	mov	r3, r0
 8011498:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	68dc      	ldr	r4, [r3, #12]
 80114a2:	4610      	mov	r0, r2
 80114a4:	f7f9 fd6c 	bl	800af80 <lwip_htons>
 80114a8:	4603      	mov	r3, r0
 80114aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80114b4:	441a      	add	r2, r3
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	3314      	adds	r3, #20
 80114c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	7a9b      	ldrb	r3, [r3, #10]
 80114c6:	f003 0301 	and.w	r3, r3, #1
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d015      	beq.n	80114fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	3304      	adds	r3, #4
 80114d2:	461a      	mov	r2, r3
 80114d4:	6879      	ldr	r1, [r7, #4]
 80114d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80114da:	f7fc fe8f 	bl	800e1fc <tcp_eff_send_mss_netif>
 80114de:	4603      	mov	r3, r0
 80114e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80114e2:	8b7b      	ldrh	r3, [r7, #26]
 80114e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7f9 fd5e 	bl	800afaa <lwip_htonl>
 80114ee:	4602      	mov	r2, r0
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	3304      	adds	r3, #4
 80114f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011500:	2b00      	cmp	r3, #0
 8011502:	da02      	bge.n	801150a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	2200      	movs	r2, #0
 8011508:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801150e:	2b00      	cmp	r3, #0
 8011510:	d10c      	bne.n	801152c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011512:	4b34      	ldr	r3, [pc, #208]	; (80115e4 <tcp_output_segment+0x1b4>)
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	4618      	mov	r0, r3
 8011522:	f7f9 fd42 	bl	800afaa <lwip_htonl>
 8011526:	4602      	mov	r2, r0
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	68da      	ldr	r2, [r3, #12]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	8959      	ldrh	r1, [r3, #10]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	8b3a      	ldrh	r2, [r7, #24]
 8011546:	1a8a      	subs	r2, r1, r2
 8011548:	b292      	uxth	r2, r2
 801154a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	8919      	ldrh	r1, [r3, #8]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	8b3a      	ldrh	r2, [r7, #24]
 8011558:	1a8a      	subs	r2, r1, r2
 801155a:	b292      	uxth	r2, r2
 801155c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	68d2      	ldr	r2, [r2, #12]
 8011566:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	2200      	movs	r2, #0
 801156e:	741a      	strb	r2, [r3, #16]
 8011570:	2200      	movs	r2, #0
 8011572:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	f103 0214 	add.w	r2, r3, #20
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	7a9b      	ldrb	r3, [r3, #10]
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	f003 0304 	and.w	r3, r3, #4
 8011586:	4413      	add	r3, r2
 8011588:	69fa      	ldr	r2, [r7, #28]
 801158a:	429a      	cmp	r2, r3
 801158c:	d006      	beq.n	801159c <tcp_output_segment+0x16c>
 801158e:	4b10      	ldr	r3, [pc, #64]	; (80115d0 <tcp_output_segment+0x1a0>)
 8011590:	f240 621c 	movw	r2, #1564	; 0x61c
 8011594:	4914      	ldr	r1, [pc, #80]	; (80115e8 <tcp_output_segment+0x1b8>)
 8011596:	4810      	ldr	r0, [pc, #64]	; (80115d8 <tcp_output_segment+0x1a8>)
 8011598:	f005 fee4 	bl	8017364 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6858      	ldr	r0, [r3, #4]
 80115a0:	68b9      	ldr	r1, [r7, #8]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	1d1c      	adds	r4, r3, #4
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	7add      	ldrb	r5, [r3, #11]
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	7a9b      	ldrb	r3, [r3, #10]
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	9202      	str	r2, [sp, #8]
 80115b2:	2206      	movs	r2, #6
 80115b4:	9201      	str	r2, [sp, #4]
 80115b6:	9300      	str	r3, [sp, #0]
 80115b8:	462b      	mov	r3, r5
 80115ba:	4622      	mov	r2, r4
 80115bc:	f004 fc1c 	bl	8015df8 <ip4_output_if>
 80115c0:	4603      	mov	r3, r0
 80115c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80115c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3720      	adds	r7, #32
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bdb0      	pop	{r4, r5, r7, pc}
 80115d0:	08019a24 	.word	0x08019a24
 80115d4:	08019fe8 	.word	0x08019fe8
 80115d8:	08019a78 	.word	0x08019a78
 80115dc:	0801a008 	.word	0x0801a008
 80115e0:	0801a028 	.word	0x0801a028
 80115e4:	2000bb9c 	.word	0x2000bb9c
 80115e8:	0801a04c 	.word	0x0801a04c

080115ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80115ec:	b5b0      	push	{r4, r5, r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <tcp_rexmit_rto_prepare+0x1c>
 80115fa:	4b31      	ldr	r3, [pc, #196]	; (80116c0 <tcp_rexmit_rto_prepare+0xd4>)
 80115fc:	f240 6263 	movw	r2, #1635	; 0x663
 8011600:	4930      	ldr	r1, [pc, #192]	; (80116c4 <tcp_rexmit_rto_prepare+0xd8>)
 8011602:	4831      	ldr	r0, [pc, #196]	; (80116c8 <tcp_rexmit_rto_prepare+0xdc>)
 8011604:	f005 feae 	bl	8017364 <iprintf>

  if (pcb->unacked == NULL) {
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801160c:	2b00      	cmp	r3, #0
 801160e:	d102      	bne.n	8011616 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011610:	f06f 0305 	mvn.w	r3, #5
 8011614:	e050      	b.n	80116b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	e00b      	b.n	8011636 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7ff fee6 	bl	80113f0 <tcp_output_segment_busy>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801162a:	f06f 0305 	mvn.w	r3, #5
 801162e:	e043      	b.n	80116b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	60fb      	str	r3, [r7, #12]
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d1ef      	bne.n	801161e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff fed6 	bl	80113f0 <tcp_output_segment_busy>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801164a:	f06f 0305 	mvn.w	r3, #5
 801164e:	e033      	b.n	80116b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	8b5b      	ldrh	r3, [r3, #26]
 801166a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801166e:	b29a      	uxth	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	4618      	mov	r0, r3
 801167c:	f7f9 fc95 	bl	800afaa <lwip_htonl>
 8011680:	4604      	mov	r4, r0
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	891b      	ldrh	r3, [r3, #8]
 8011686:	461d      	mov	r5, r3
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	899b      	ldrh	r3, [r3, #12]
 801168e:	b29b      	uxth	r3, r3
 8011690:	4618      	mov	r0, r3
 8011692:	f7f9 fc75 	bl	800af80 <lwip_htons>
 8011696:	4603      	mov	r3, r0
 8011698:	b2db      	uxtb	r3, r3
 801169a:	f003 0303 	and.w	r3, r3, #3
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <tcp_rexmit_rto_prepare+0xba>
 80116a2:	2301      	movs	r3, #1
 80116a4:	e000      	b.n	80116a8 <tcp_rexmit_rto_prepare+0xbc>
 80116a6:	2300      	movs	r3, #0
 80116a8:	442b      	add	r3, r5
 80116aa:	18e2      	adds	r2, r4, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3710      	adds	r7, #16
 80116bc:	46bd      	mov	sp, r7
 80116be:	bdb0      	pop	{r4, r5, r7, pc}
 80116c0:	08019a24 	.word	0x08019a24
 80116c4:	0801a060 	.word	0x0801a060
 80116c8:	08019a78 	.word	0x08019a78

080116cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d106      	bne.n	80116e8 <tcp_rexmit_rto_commit+0x1c>
 80116da:	4b0d      	ldr	r3, [pc, #52]	; (8011710 <tcp_rexmit_rto_commit+0x44>)
 80116dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80116e0:	490c      	ldr	r1, [pc, #48]	; (8011714 <tcp_rexmit_rto_commit+0x48>)
 80116e2:	480d      	ldr	r0, [pc, #52]	; (8011718 <tcp_rexmit_rto_commit+0x4c>)
 80116e4:	f005 fe3e 	bl	8017364 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116ee:	2bff      	cmp	r3, #255	; 0xff
 80116f0:	d007      	beq.n	8011702 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116f8:	3301      	adds	r3, #1
 80116fa:	b2da      	uxtb	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7ff fc80 	bl	8011008 <tcp_output>
}
 8011708:	bf00      	nop
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	08019a24 	.word	0x08019a24
 8011714:	0801a084 	.word	0x0801a084
 8011718:	08019a78 	.word	0x08019a78

0801171c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d106      	bne.n	8011738 <tcp_rexmit_rto+0x1c>
 801172a:	4b0a      	ldr	r3, [pc, #40]	; (8011754 <tcp_rexmit_rto+0x38>)
 801172c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011730:	4909      	ldr	r1, [pc, #36]	; (8011758 <tcp_rexmit_rto+0x3c>)
 8011732:	480a      	ldr	r0, [pc, #40]	; (801175c <tcp_rexmit_rto+0x40>)
 8011734:	f005 fe16 	bl	8017364 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f7ff ff57 	bl	80115ec <tcp_rexmit_rto_prepare>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d102      	bne.n	801174a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7ff ffc1 	bl	80116cc <tcp_rexmit_rto_commit>
  }
}
 801174a:	bf00      	nop
 801174c:	3708      	adds	r7, #8
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	08019a24 	.word	0x08019a24
 8011758:	0801a0a8 	.word	0x0801a0a8
 801175c:	08019a78 	.word	0x08019a78

08011760 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011760:	b590      	push	{r4, r7, lr}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d106      	bne.n	801177c <tcp_rexmit+0x1c>
 801176e:	4b2f      	ldr	r3, [pc, #188]	; (801182c <tcp_rexmit+0xcc>)
 8011770:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011774:	492e      	ldr	r1, [pc, #184]	; (8011830 <tcp_rexmit+0xd0>)
 8011776:	482f      	ldr	r0, [pc, #188]	; (8011834 <tcp_rexmit+0xd4>)
 8011778:	f005 fdf4 	bl	8017364 <iprintf>

  if (pcb->unacked == NULL) {
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011780:	2b00      	cmp	r3, #0
 8011782:	d102      	bne.n	801178a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011784:	f06f 0305 	mvn.w	r3, #5
 8011788:	e04c      	b.n	8011824 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801178e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011790:	68b8      	ldr	r0, [r7, #8]
 8011792:	f7ff fe2d 	bl	80113f0 <tcp_output_segment_busy>
 8011796:	4603      	mov	r3, r0
 8011798:	2b00      	cmp	r3, #0
 801179a:	d002      	beq.n	80117a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801179c:	f06f 0305 	mvn.w	r3, #5
 80117a0:	e040      	b.n	8011824 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	336c      	adds	r3, #108	; 0x6c
 80117ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117b0:	e002      	b.n	80117b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d011      	beq.n	80117e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7f9 fbee 	bl	800afaa <lwip_htonl>
 80117ce:	4604      	mov	r4, r0
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7f9 fbe7 	bl	800afaa <lwip_htonl>
 80117dc:	4603      	mov	r3, r0
 80117de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	dbe6      	blt.n	80117b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	68ba      	ldr	r2, [r7, #8]
 80117f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d103      	bne.n	8011802 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011808:	2bff      	cmp	r3, #255	; 0xff
 801180a:	d007      	beq.n	801181c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011812:	3301      	adds	r3, #1
 8011814:	b2da      	uxtb	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2200      	movs	r2, #0
 8011820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3714      	adds	r7, #20
 8011828:	46bd      	mov	sp, r7
 801182a:	bd90      	pop	{r4, r7, pc}
 801182c:	08019a24 	.word	0x08019a24
 8011830:	0801a0c4 	.word	0x0801a0c4
 8011834:	08019a78 	.word	0x08019a78

08011838 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <tcp_rexmit_fast+0x1c>
 8011846:	4b2a      	ldr	r3, [pc, #168]	; (80118f0 <tcp_rexmit_fast+0xb8>)
 8011848:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801184c:	4929      	ldr	r1, [pc, #164]	; (80118f4 <tcp_rexmit_fast+0xbc>)
 801184e:	482a      	ldr	r0, [pc, #168]	; (80118f8 <tcp_rexmit_fast+0xc0>)
 8011850:	f005 fd88 	bl	8017364 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011858:	2b00      	cmp	r3, #0
 801185a:	d044      	beq.n	80118e6 <tcp_rexmit_fast+0xae>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	8b5b      	ldrh	r3, [r3, #26]
 8011860:	f003 0304 	and.w	r3, r3, #4
 8011864:	2b00      	cmp	r3, #0
 8011866:	d13e      	bne.n	80118e6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7ff ff79 	bl	8011760 <tcp_rexmit>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d138      	bne.n	80118e6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011880:	4293      	cmp	r3, r2
 8011882:	bf28      	it	cs
 8011884:	4613      	movcs	r3, r2
 8011886:	b29b      	uxth	r3, r3
 8011888:	0fda      	lsrs	r2, r3, #31
 801188a:	4413      	add	r3, r2
 801188c:	105b      	asrs	r3, r3, #1
 801188e:	b29a      	uxth	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801189c:	461a      	mov	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d206      	bcs.n	80118b6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118c0:	4619      	mov	r1, r3
 80118c2:	0049      	lsls	r1, r1, #1
 80118c4:	440b      	add	r3, r1
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	4413      	add	r3, r2
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	8b5b      	ldrh	r3, [r3, #26]
 80118d6:	f043 0304 	orr.w	r3, r3, #4
 80118da:	b29a      	uxth	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	08019a24 	.word	0x08019a24
 80118f4:	0801a0dc 	.word	0x0801a0dc
 80118f8:	08019a78 	.word	0x08019a78

080118fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b086      	sub	sp, #24
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	607b      	str	r3, [r7, #4]
 8011906:	460b      	mov	r3, r1
 8011908:	817b      	strh	r3, [r7, #10]
 801190a:	4613      	mov	r3, r2
 801190c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801190e:	897a      	ldrh	r2, [r7, #10]
 8011910:	893b      	ldrh	r3, [r7, #8]
 8011912:	4413      	add	r3, r2
 8011914:	b29b      	uxth	r3, r3
 8011916:	3314      	adds	r3, #20
 8011918:	b29b      	uxth	r3, r3
 801191a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801191e:	4619      	mov	r1, r3
 8011920:	2022      	movs	r0, #34	; 0x22
 8011922:	f7fa fc01 	bl	800c128 <pbuf_alloc>
 8011926:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d04d      	beq.n	80119ca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801192e:	897b      	ldrh	r3, [r7, #10]
 8011930:	3313      	adds	r3, #19
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	8952      	ldrh	r2, [r2, #10]
 8011936:	4293      	cmp	r3, r2
 8011938:	db06      	blt.n	8011948 <tcp_output_alloc_header_common+0x4c>
 801193a:	4b26      	ldr	r3, [pc, #152]	; (80119d4 <tcp_output_alloc_header_common+0xd8>)
 801193c:	f240 7223 	movw	r2, #1827	; 0x723
 8011940:	4925      	ldr	r1, [pc, #148]	; (80119d8 <tcp_output_alloc_header_common+0xdc>)
 8011942:	4826      	ldr	r0, [pc, #152]	; (80119dc <tcp_output_alloc_header_common+0xe0>)
 8011944:	f005 fd0e 	bl	8017364 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801194e:	8c3b      	ldrh	r3, [r7, #32]
 8011950:	4618      	mov	r0, r3
 8011952:	f7f9 fb15 	bl	800af80 <lwip_htons>
 8011956:	4603      	mov	r3, r0
 8011958:	461a      	mov	r2, r3
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801195e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011960:	4618      	mov	r0, r3
 8011962:	f7f9 fb0d 	bl	800af80 <lwip_htons>
 8011966:	4603      	mov	r3, r0
 8011968:	461a      	mov	r2, r3
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011974:	68f8      	ldr	r0, [r7, #12]
 8011976:	f7f9 fb18 	bl	800afaa <lwip_htonl>
 801197a:	4602      	mov	r2, r0
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011980:	897b      	ldrh	r3, [r7, #10]
 8011982:	089b      	lsrs	r3, r3, #2
 8011984:	b29b      	uxth	r3, r3
 8011986:	3305      	adds	r3, #5
 8011988:	b29b      	uxth	r3, r3
 801198a:	031b      	lsls	r3, r3, #12
 801198c:	b29a      	uxth	r2, r3
 801198e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011992:	b29b      	uxth	r3, r3
 8011994:	4313      	orrs	r3, r2
 8011996:	b29b      	uxth	r3, r3
 8011998:	4618      	mov	r0, r3
 801199a:	f7f9 faf1 	bl	800af80 <lwip_htons>
 801199e:	4603      	mov	r3, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80119a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7f9 fae9 	bl	800af80 <lwip_htons>
 80119ae:	4603      	mov	r3, r0
 80119b0:	461a      	mov	r2, r3
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	2200      	movs	r2, #0
 80119ba:	741a      	strb	r2, [r3, #16]
 80119bc:	2200      	movs	r2, #0
 80119be:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	2200      	movs	r2, #0
 80119c4:	749a      	strb	r2, [r3, #18]
 80119c6:	2200      	movs	r2, #0
 80119c8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80119ca:	697b      	ldr	r3, [r7, #20]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3718      	adds	r7, #24
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	08019a24 	.word	0x08019a24
 80119d8:	0801a0fc 	.word	0x0801a0fc
 80119dc:	08019a78 	.word	0x08019a78

080119e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80119e0:	b5b0      	push	{r4, r5, r7, lr}
 80119e2:	b08a      	sub	sp, #40	; 0x28
 80119e4:	af04      	add	r7, sp, #16
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	607b      	str	r3, [r7, #4]
 80119ea:	460b      	mov	r3, r1
 80119ec:	817b      	strh	r3, [r7, #10]
 80119ee:	4613      	mov	r3, r2
 80119f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d106      	bne.n	8011a06 <tcp_output_alloc_header+0x26>
 80119f8:	4b15      	ldr	r3, [pc, #84]	; (8011a50 <tcp_output_alloc_header+0x70>)
 80119fa:	f240 7242 	movw	r2, #1858	; 0x742
 80119fe:	4915      	ldr	r1, [pc, #84]	; (8011a54 <tcp_output_alloc_header+0x74>)
 8011a00:	4815      	ldr	r0, [pc, #84]	; (8011a58 <tcp_output_alloc_header+0x78>)
 8011a02:	f005 fcaf 	bl	8017364 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	8adb      	ldrh	r3, [r3, #22]
 8011a0e:	68fa      	ldr	r2, [r7, #12]
 8011a10:	8b12      	ldrh	r2, [r2, #24]
 8011a12:	68f9      	ldr	r1, [r7, #12]
 8011a14:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011a16:	893d      	ldrh	r5, [r7, #8]
 8011a18:	897c      	ldrh	r4, [r7, #10]
 8011a1a:	9103      	str	r1, [sp, #12]
 8011a1c:	2110      	movs	r1, #16
 8011a1e:	9102      	str	r1, [sp, #8]
 8011a20:	9201      	str	r2, [sp, #4]
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	462a      	mov	r2, r5
 8011a28:	4621      	mov	r1, r4
 8011a2a:	f7ff ff67 	bl	80118fc <tcp_output_alloc_header_common>
 8011a2e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d006      	beq.n	8011a44 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a3e:	441a      	add	r2, r3
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a44:	697b      	ldr	r3, [r7, #20]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3718      	adds	r7, #24
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	08019a24 	.word	0x08019a24
 8011a54:	0801a12c 	.word	0x0801a12c
 8011a58:	08019a78 	.word	0x08019a78

08011a5c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b088      	sub	sp, #32
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	4611      	mov	r1, r2
 8011a68:	461a      	mov	r2, r3
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	71fb      	strb	r3, [r7, #7]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d106      	bne.n	8011a8a <tcp_output_fill_options+0x2e>
 8011a7c:	4b13      	ldr	r3, [pc, #76]	; (8011acc <tcp_output_fill_options+0x70>)
 8011a7e:	f240 7256 	movw	r2, #1878	; 0x756
 8011a82:	4913      	ldr	r1, [pc, #76]	; (8011ad0 <tcp_output_fill_options+0x74>)
 8011a84:	4813      	ldr	r0, [pc, #76]	; (8011ad4 <tcp_output_fill_options+0x78>)
 8011a86:	f005 fc6d 	bl	8017364 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	3314      	adds	r3, #20
 8011a94:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	f103 0214 	add.w	r2, r3, #20
 8011a9c:	8bfb      	ldrh	r3, [r7, #30]
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	79fb      	ldrb	r3, [r7, #7]
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	f003 0304 	and.w	r3, r3, #4
 8011aaa:	440b      	add	r3, r1
 8011aac:	4413      	add	r3, r2
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d006      	beq.n	8011ac2 <tcp_output_fill_options+0x66>
 8011ab4:	4b05      	ldr	r3, [pc, #20]	; (8011acc <tcp_output_fill_options+0x70>)
 8011ab6:	f240 7275 	movw	r2, #1909	; 0x775
 8011aba:	4907      	ldr	r1, [pc, #28]	; (8011ad8 <tcp_output_fill_options+0x7c>)
 8011abc:	4805      	ldr	r0, [pc, #20]	; (8011ad4 <tcp_output_fill_options+0x78>)
 8011abe:	f005 fc51 	bl	8017364 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011ac2:	bf00      	nop
 8011ac4:	3720      	adds	r7, #32
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	08019a24 	.word	0x08019a24
 8011ad0:	0801a154 	.word	0x0801a154
 8011ad4:	08019a78 	.word	0x08019a78
 8011ad8:	0801a04c 	.word	0x0801a04c

08011adc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08a      	sub	sp, #40	; 0x28
 8011ae0:	af04      	add	r7, sp, #16
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d106      	bne.n	8011afe <tcp_output_control_segment+0x22>
 8011af0:	4b1c      	ldr	r3, [pc, #112]	; (8011b64 <tcp_output_control_segment+0x88>)
 8011af2:	f240 7287 	movw	r2, #1927	; 0x787
 8011af6:	491c      	ldr	r1, [pc, #112]	; (8011b68 <tcp_output_control_segment+0x8c>)
 8011af8:	481c      	ldr	r0, [pc, #112]	; (8011b6c <tcp_output_control_segment+0x90>)
 8011afa:	f005 fc33 	bl	8017364 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	6879      	ldr	r1, [r7, #4]
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f7fe ff40 	bl	8010988 <tcp_route>
 8011b08:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d102      	bne.n	8011b16 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011b10:	23fc      	movs	r3, #252	; 0xfc
 8011b12:	75fb      	strb	r3, [r7, #23]
 8011b14:	e01c      	b.n	8011b50 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d006      	beq.n	8011b2a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	7adb      	ldrb	r3, [r3, #11]
 8011b20:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	7a9b      	ldrb	r3, [r3, #10]
 8011b26:	757b      	strb	r3, [r7, #21]
 8011b28:	e003      	b.n	8011b32 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b2a:	23ff      	movs	r3, #255	; 0xff
 8011b2c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011b32:	7dba      	ldrb	r2, [r7, #22]
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	9302      	str	r3, [sp, #8]
 8011b38:	2306      	movs	r3, #6
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	7d7b      	ldrb	r3, [r7, #21]
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	4613      	mov	r3, r2
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	6879      	ldr	r1, [r7, #4]
 8011b46:	68b8      	ldr	r0, [r7, #8]
 8011b48:	f004 f956 	bl	8015df8 <ip4_output_if>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011b50:	68b8      	ldr	r0, [r7, #8]
 8011b52:	f7fa fdcd 	bl	800c6f0 <pbuf_free>
  return err;
 8011b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3718      	adds	r7, #24
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	08019a24 	.word	0x08019a24
 8011b68:	0801a17c 	.word	0x0801a17c
 8011b6c:	08019a78 	.word	0x08019a78

08011b70 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b08b      	sub	sp, #44	; 0x2c
 8011b74:	af04      	add	r7, sp, #16
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
 8011b7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d106      	bne.n	8011b92 <tcp_rst+0x22>
 8011b84:	4b1f      	ldr	r3, [pc, #124]	; (8011c04 <tcp_rst+0x94>)
 8011b86:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011b8a:	491f      	ldr	r1, [pc, #124]	; (8011c08 <tcp_rst+0x98>)
 8011b8c:	481f      	ldr	r0, [pc, #124]	; (8011c0c <tcp_rst+0x9c>)
 8011b8e:	f005 fbe9 	bl	8017364 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d106      	bne.n	8011ba6 <tcp_rst+0x36>
 8011b98:	4b1a      	ldr	r3, [pc, #104]	; (8011c04 <tcp_rst+0x94>)
 8011b9a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011b9e:	491c      	ldr	r1, [pc, #112]	; (8011c10 <tcp_rst+0xa0>)
 8011ba0:	481a      	ldr	r0, [pc, #104]	; (8011c0c <tcp_rst+0x9c>)
 8011ba2:	f005 fbdf 	bl	8017364 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011baa:	f246 0308 	movw	r3, #24584	; 0x6008
 8011bae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011bb0:	7dfb      	ldrb	r3, [r7, #23]
 8011bb2:	b29c      	uxth	r4, r3
 8011bb4:	68b8      	ldr	r0, [r7, #8]
 8011bb6:	f7f9 f9f8 	bl	800afaa <lwip_htonl>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	8abb      	ldrh	r3, [r7, #20]
 8011bbe:	9303      	str	r3, [sp, #12]
 8011bc0:	2314      	movs	r3, #20
 8011bc2:	9302      	str	r3, [sp, #8]
 8011bc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011bc6:	9301      	str	r3, [sp, #4]
 8011bc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	4613      	mov	r3, r2
 8011bce:	2200      	movs	r2, #0
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7ff fe92 	bl	80118fc <tcp_output_alloc_header_common>
 8011bd8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00c      	beq.n	8011bfa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011be0:	7dfb      	ldrb	r3, [r7, #23]
 8011be2:	2200      	movs	r2, #0
 8011be4:	6939      	ldr	r1, [r7, #16]
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f7ff ff38 	bl	8011a5c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bee:	683a      	ldr	r2, [r7, #0]
 8011bf0:	6939      	ldr	r1, [r7, #16]
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f7ff ff72 	bl	8011adc <tcp_output_control_segment>
 8011bf8:	e000      	b.n	8011bfc <tcp_rst+0x8c>
    return;
 8011bfa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011bfc:	371c      	adds	r7, #28
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd90      	pop	{r4, r7, pc}
 8011c02:	bf00      	nop
 8011c04:	08019a24 	.word	0x08019a24
 8011c08:	0801a1a8 	.word	0x0801a1a8
 8011c0c:	08019a78 	.word	0x08019a78
 8011c10:	0801a1c4 	.word	0x0801a1c4

08011c14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011c14:	b590      	push	{r4, r7, lr}
 8011c16:	b087      	sub	sp, #28
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c20:	2300      	movs	r3, #0
 8011c22:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <tcp_send_empty_ack+0x24>
 8011c2a:	4b28      	ldr	r3, [pc, #160]	; (8011ccc <tcp_send_empty_ack+0xb8>)
 8011c2c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011c30:	4927      	ldr	r1, [pc, #156]	; (8011cd0 <tcp_send_empty_ack+0xbc>)
 8011c32:	4828      	ldr	r0, [pc, #160]	; (8011cd4 <tcp_send_empty_ack+0xc0>)
 8011c34:	f005 fb96 	bl	8017364 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c38:	7dfb      	ldrb	r3, [r7, #23]
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	f003 0304 	and.w	r3, r3, #4
 8011c42:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011c44:	7d7b      	ldrb	r3, [r7, #21]
 8011c46:	b29c      	uxth	r4, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f9 f9ac 	bl	800afaa <lwip_htonl>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2200      	movs	r2, #0
 8011c56:	4621      	mov	r1, r4
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7ff fec1 	bl	80119e0 <tcp_output_alloc_header>
 8011c5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d109      	bne.n	8011c7a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	8b5b      	ldrh	r3, [r3, #26]
 8011c6a:	f043 0303 	orr.w	r3, r3, #3
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011c74:	f06f 0301 	mvn.w	r3, #1
 8011c78:	e023      	b.n	8011cc2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011c7a:	7dbb      	ldrb	r3, [r7, #22]
 8011c7c:	7dfa      	ldrb	r2, [r7, #23]
 8011c7e:	6939      	ldr	r1, [r7, #16]
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f7ff feeb 	bl	8011a5c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3304      	adds	r3, #4
 8011c8c:	6939      	ldr	r1, [r7, #16]
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7ff ff24 	bl	8011adc <tcp_output_control_segment>
 8011c94:	4603      	mov	r3, r0
 8011c96:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d007      	beq.n	8011cb0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	8b5b      	ldrh	r3, [r3, #26]
 8011ca4:	f043 0303 	orr.w	r3, r3, #3
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	835a      	strh	r2, [r3, #26]
 8011cae:	e006      	b.n	8011cbe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	8b5b      	ldrh	r3, [r3, #26]
 8011cb4:	f023 0303 	bic.w	r3, r3, #3
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	371c      	adds	r7, #28
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd90      	pop	{r4, r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	08019a24 	.word	0x08019a24
 8011cd0:	0801a1e0 	.word	0x0801a1e0
 8011cd4:	08019a78 	.word	0x08019a78

08011cd8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011cd8:	b590      	push	{r4, r7, lr}
 8011cda:	b087      	sub	sp, #28
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d106      	bne.n	8011cf8 <tcp_keepalive+0x20>
 8011cea:	4b18      	ldr	r3, [pc, #96]	; (8011d4c <tcp_keepalive+0x74>)
 8011cec:	f640 0224 	movw	r2, #2084	; 0x824
 8011cf0:	4917      	ldr	r1, [pc, #92]	; (8011d50 <tcp_keepalive+0x78>)
 8011cf2:	4818      	ldr	r0, [pc, #96]	; (8011d54 <tcp_keepalive+0x7c>)
 8011cf4:	f005 fb36 	bl	8017364 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011cf8:	7dfb      	ldrb	r3, [r7, #23]
 8011cfa:	b29c      	uxth	r4, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d00:	3b01      	subs	r3, #1
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7f9 f951 	bl	800afaa <lwip_htonl>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff fe66 	bl	80119e0 <tcp_output_alloc_header>
 8011d14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d102      	bne.n	8011d22 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d20:	e010      	b.n	8011d44 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d22:	7dfb      	ldrb	r3, [r7, #23]
 8011d24:	2200      	movs	r2, #0
 8011d26:	6939      	ldr	r1, [r7, #16]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f7ff fe97 	bl	8011a5c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	3304      	adds	r3, #4
 8011d34:	6939      	ldr	r1, [r7, #16]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff fed0 	bl	8011adc <tcp_output_control_segment>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	371c      	adds	r7, #28
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd90      	pop	{r4, r7, pc}
 8011d4c:	08019a24 	.word	0x08019a24
 8011d50:	0801a200 	.word	0x0801a200
 8011d54:	08019a78 	.word	0x08019a78

08011d58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011d58:	b590      	push	{r4, r7, lr}
 8011d5a:	b08b      	sub	sp, #44	; 0x2c
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d60:	2300      	movs	r3, #0
 8011d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d106      	bne.n	8011d7a <tcp_zero_window_probe+0x22>
 8011d6c:	4b4c      	ldr	r3, [pc, #304]	; (8011ea0 <tcp_zero_window_probe+0x148>)
 8011d6e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011d72:	494c      	ldr	r1, [pc, #304]	; (8011ea4 <tcp_zero_window_probe+0x14c>)
 8011d74:	484c      	ldr	r0, [pc, #304]	; (8011ea8 <tcp_zero_window_probe+0x150>)
 8011d76:	f005 faf5 	bl	8017364 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d7e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011d80:	6a3b      	ldr	r3, [r7, #32]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d101      	bne.n	8011d8a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011d86:	2300      	movs	r3, #0
 8011d88:	e086      	b.n	8011e98 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d90:	2bff      	cmp	r3, #255	; 0xff
 8011d92:	d007      	beq.n	8011da4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	899b      	ldrh	r3, [r3, #12]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f9 f8e7 	bl	800af80 <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d005      	beq.n	8011dca <tcp_zero_window_probe+0x72>
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	891b      	ldrh	r3, [r3, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d101      	bne.n	8011dca <tcp_zero_window_probe+0x72>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e000      	b.n	8011dcc <tcp_zero_window_probe+0x74>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011dce:	7ffb      	ldrb	r3, [r7, #31]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	bf0c      	ite	eq
 8011dd4:	2301      	moveq	r3, #1
 8011dd6:	2300      	movne	r3, #0
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de0:	b299      	uxth	r1, r3
 8011de2:	6a3b      	ldr	r3, [r7, #32]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	8bba      	ldrh	r2, [r7, #28]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fdf8 	bl	80119e0 <tcp_output_alloc_header>
 8011df0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d102      	bne.n	8011dfe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011df8:	f04f 33ff 	mov.w	r3, #4294967295
 8011dfc:	e04c      	b.n	8011e98 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011e04:	7ffb      	ldrb	r3, [r7, #31]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d011      	beq.n	8011e2e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	899b      	ldrh	r3, [r3, #12]
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	b21b      	sxth	r3, r3
 8011e12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e16:	b21c      	sxth	r4, r3
 8011e18:	2011      	movs	r0, #17
 8011e1a:	f7f9 f8b1 	bl	800af80 <lwip_htons>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	b21b      	sxth	r3, r3
 8011e22:	4323      	orrs	r3, r4
 8011e24:	b21b      	sxth	r3, r3
 8011e26:	b29a      	uxth	r2, r3
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	819a      	strh	r2, [r3, #12]
 8011e2c:	e010      	b.n	8011e50 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	3314      	adds	r3, #20
 8011e34:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	6858      	ldr	r0, [r3, #4]
 8011e3a:	6a3b      	ldr	r3, [r7, #32]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	891a      	ldrh	r2, [r3, #8]
 8011e40:	6a3b      	ldr	r3, [r7, #32]
 8011e42:	891b      	ldrh	r3, [r3, #8]
 8011e44:	1ad3      	subs	r3, r2, r3
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	2201      	movs	r2, #1
 8011e4a:	6939      	ldr	r1, [r7, #16]
 8011e4c:	f7fa fe56 	bl	800cafc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011e50:	6a3b      	ldr	r3, [r7, #32]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7f9 f8a7 	bl	800afaa <lwip_htonl>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	3301      	adds	r3, #1
 8011e60:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	da02      	bge.n	8011e74 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e78:	2200      	movs	r2, #0
 8011e7a:	69b9      	ldr	r1, [r7, #24]
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7ff fded 	bl	8011a5c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	3304      	adds	r3, #4
 8011e88:	69b9      	ldr	r1, [r7, #24]
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f7ff fe26 	bl	8011adc <tcp_output_control_segment>
 8011e90:	4603      	mov	r3, r0
 8011e92:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011e94:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	372c      	adds	r7, #44	; 0x2c
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd90      	pop	{r4, r7, pc}
 8011ea0:	08019a24 	.word	0x08019a24
 8011ea4:	0801a21c 	.word	0x0801a21c
 8011ea8:	08019a78 	.word	0x08019a78

08011eac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011eb4:	f7fa ff10 	bl	800ccd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011eb8:	4b0a      	ldr	r3, [pc, #40]	; (8011ee4 <tcpip_tcp_timer+0x38>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d103      	bne.n	8011ec8 <tcpip_tcp_timer+0x1c>
 8011ec0:	4b09      	ldr	r3, [pc, #36]	; (8011ee8 <tcpip_tcp_timer+0x3c>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d005      	beq.n	8011ed4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011ec8:	2200      	movs	r2, #0
 8011eca:	4908      	ldr	r1, [pc, #32]	; (8011eec <tcpip_tcp_timer+0x40>)
 8011ecc:	20fa      	movs	r0, #250	; 0xfa
 8011ece:	f000 f8f3 	bl	80120b8 <sys_timeout>
 8011ed2:	e003      	b.n	8011edc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011ed4:	4b06      	ldr	r3, [pc, #24]	; (8011ef0 <tcpip_tcp_timer+0x44>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	601a      	str	r2, [r3, #0]
  }
}
 8011eda:	bf00      	nop
 8011edc:	bf00      	nop
 8011ede:	3708      	adds	r7, #8
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	2000bb98 	.word	0x2000bb98
 8011ee8:	2000bba8 	.word	0x2000bba8
 8011eec:	08011ead 	.word	0x08011ead
 8011ef0:	20004b0c 	.word	0x20004b0c

08011ef4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011ef8:	4b0a      	ldr	r3, [pc, #40]	; (8011f24 <tcp_timer_needed+0x30>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10f      	bne.n	8011f20 <tcp_timer_needed+0x2c>
 8011f00:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <tcp_timer_needed+0x34>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d103      	bne.n	8011f10 <tcp_timer_needed+0x1c>
 8011f08:	4b08      	ldr	r3, [pc, #32]	; (8011f2c <tcp_timer_needed+0x38>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d007      	beq.n	8011f20 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011f10:	4b04      	ldr	r3, [pc, #16]	; (8011f24 <tcp_timer_needed+0x30>)
 8011f12:	2201      	movs	r2, #1
 8011f14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f16:	2200      	movs	r2, #0
 8011f18:	4905      	ldr	r1, [pc, #20]	; (8011f30 <tcp_timer_needed+0x3c>)
 8011f1a:	20fa      	movs	r0, #250	; 0xfa
 8011f1c:	f000 f8cc 	bl	80120b8 <sys_timeout>
  }
}
 8011f20:	bf00      	nop
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	20004b0c 	.word	0x20004b0c
 8011f28:	2000bb98 	.word	0x2000bb98
 8011f2c:	2000bba8 	.word	0x2000bba8
 8011f30:	08011ead 	.word	0x08011ead

08011f34 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b086      	sub	sp, #24
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011f40:	200a      	movs	r0, #10
 8011f42:	f7f9 fcd3 	bl	800b8ec <memp_malloc>
 8011f46:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d109      	bne.n	8011f62 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d151      	bne.n	8011ff8 <sys_timeout_abs+0xc4>
 8011f54:	4b2a      	ldr	r3, [pc, #168]	; (8012000 <sys_timeout_abs+0xcc>)
 8011f56:	22be      	movs	r2, #190	; 0xbe
 8011f58:	492a      	ldr	r1, [pc, #168]	; (8012004 <sys_timeout_abs+0xd0>)
 8011f5a:	482b      	ldr	r0, [pc, #172]	; (8012008 <sys_timeout_abs+0xd4>)
 8011f5c:	f005 fa02 	bl	8017364 <iprintf>
    return;
 8011f60:	e04a      	b.n	8011ff8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	2200      	movs	r2, #0
 8011f66:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011f7a:	4b24      	ldr	r3, [pc, #144]	; (801200c <sys_timeout_abs+0xd8>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d103      	bne.n	8011f8a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011f82:	4a22      	ldr	r2, [pc, #136]	; (801200c <sys_timeout_abs+0xd8>)
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	6013      	str	r3, [r2, #0]
    return;
 8011f88:	e037      	b.n	8011ffa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	685a      	ldr	r2, [r3, #4]
 8011f8e:	4b1f      	ldr	r3, [pc, #124]	; (801200c <sys_timeout_abs+0xd8>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	0fdb      	lsrs	r3, r3, #31
 8011f98:	f003 0301 	and.w	r3, r3, #1
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d007      	beq.n	8011fb2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011fa2:	4b1a      	ldr	r3, [pc, #104]	; (801200c <sys_timeout_abs+0xd8>)
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011faa:	4a18      	ldr	r2, [pc, #96]	; (801200c <sys_timeout_abs+0xd8>)
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	e023      	b.n	8011ffa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011fb2:	4b16      	ldr	r3, [pc, #88]	; (801200c <sys_timeout_abs+0xd8>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	e01a      	b.n	8011ff0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00b      	beq.n	8011fda <sys_timeout_abs+0xa6>
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	685a      	ldr	r2, [r3, #4]
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	0fdb      	lsrs	r3, r3, #31
 8011fd0:	f003 0301 	and.w	r3, r3, #1
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d007      	beq.n	8011fea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	693a      	ldr	r2, [r7, #16]
 8011fe6:	601a      	str	r2, [r3, #0]
        break;
 8011fe8:	e007      	b.n	8011ffa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	617b      	str	r3, [r7, #20]
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d1e1      	bne.n	8011fba <sys_timeout_abs+0x86>
 8011ff6:	e000      	b.n	8011ffa <sys_timeout_abs+0xc6>
    return;
 8011ff8:	bf00      	nop
      }
    }
  }
}
 8011ffa:	3718      	adds	r7, #24
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	0801a240 	.word	0x0801a240
 8012004:	0801a274 	.word	0x0801a274
 8012008:	0801a2b4 	.word	0x0801a2b4
 801200c:	20004b04 	.word	0x20004b04

08012010 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	4798      	blx	r3

  now = sys_now();
 8012022:	f7f4 ff17 	bl	8006e54 <sys_now>
 8012026:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	4b0f      	ldr	r3, [pc, #60]	; (801206c <lwip_cyclic_timer+0x5c>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4413      	add	r3, r2
 8012032:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	0fdb      	lsrs	r3, r3, #31
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	b2db      	uxtb	r3, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	d009      	beq.n	801205a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	4413      	add	r3, r2
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	4907      	ldr	r1, [pc, #28]	; (8012070 <lwip_cyclic_timer+0x60>)
 8012052:	4618      	mov	r0, r3
 8012054:	f7ff ff6e 	bl	8011f34 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012058:	e004      	b.n	8012064 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	4904      	ldr	r1, [pc, #16]	; (8012070 <lwip_cyclic_timer+0x60>)
 801205e:	68f8      	ldr	r0, [r7, #12]
 8012060:	f7ff ff68 	bl	8011f34 <sys_timeout_abs>
}
 8012064:	bf00      	nop
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	20004b08 	.word	0x20004b08
 8012070:	08012011 	.word	0x08012011

08012074 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801207a:	2301      	movs	r3, #1
 801207c:	607b      	str	r3, [r7, #4]
 801207e:	e00e      	b.n	801209e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012080:	4a0b      	ldr	r2, [pc, #44]	; (80120b0 <sys_timeouts_init+0x3c>)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	4a08      	ldr	r2, [pc, #32]	; (80120b0 <sys_timeouts_init+0x3c>)
 801208e:	4413      	add	r3, r2
 8012090:	461a      	mov	r2, r3
 8012092:	4908      	ldr	r1, [pc, #32]	; (80120b4 <sys_timeouts_init+0x40>)
 8012094:	f000 f810 	bl	80120b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	3301      	adds	r3, #1
 801209c:	607b      	str	r3, [r7, #4]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b04      	cmp	r3, #4
 80120a2:	d9ed      	bls.n	8012080 <sys_timeouts_init+0xc>
  }
}
 80120a4:	bf00      	nop
 80120a6:	bf00      	nop
 80120a8:	3708      	adds	r7, #8
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	0801b34c 	.word	0x0801b34c
 80120b4:	08012011 	.word	0x08012011

080120b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120ca:	d306      	bcc.n	80120da <sys_timeout+0x22>
 80120cc:	4b0a      	ldr	r3, [pc, #40]	; (80120f8 <sys_timeout+0x40>)
 80120ce:	f240 1229 	movw	r2, #297	; 0x129
 80120d2:	490a      	ldr	r1, [pc, #40]	; (80120fc <sys_timeout+0x44>)
 80120d4:	480a      	ldr	r0, [pc, #40]	; (8012100 <sys_timeout+0x48>)
 80120d6:	f005 f945 	bl	8017364 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80120da:	f7f4 febb 	bl	8006e54 <sys_now>
 80120de:	4602      	mov	r2, r0
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	4413      	add	r3, r2
 80120e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	68b9      	ldr	r1, [r7, #8]
 80120ea:	6978      	ldr	r0, [r7, #20]
 80120ec:	f7ff ff22 	bl	8011f34 <sys_timeout_abs>
#endif
}
 80120f0:	bf00      	nop
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	0801a240 	.word	0x0801a240
 80120fc:	0801a2dc 	.word	0x0801a2dc
 8012100:	0801a2b4 	.word	0x0801a2b4

08012104 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801210a:	f7f4 fea3 	bl	8006e54 <sys_now>
 801210e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012110:	4b17      	ldr	r3, [pc, #92]	; (8012170 <sys_check_timeouts+0x6c>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d022      	beq.n	8012162 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	68fa      	ldr	r2, [r7, #12]
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	0fdb      	lsrs	r3, r3, #31
 8012126:	f003 0301 	and.w	r3, r3, #1
 801212a:	b2db      	uxtb	r3, r3
 801212c:	2b00      	cmp	r3, #0
 801212e:	d11a      	bne.n	8012166 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	4a0e      	ldr	r2, [pc, #56]	; (8012170 <sys_check_timeouts+0x6c>)
 8012136:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	689b      	ldr	r3, [r3, #8]
 801213c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	68db      	ldr	r3, [r3, #12]
 8012142:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	4a0a      	ldr	r2, [pc, #40]	; (8012174 <sys_check_timeouts+0x70>)
 801214a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801214c:	68b9      	ldr	r1, [r7, #8]
 801214e:	200a      	movs	r0, #10
 8012150:	f7f9 fc1e 	bl	800b990 <memp_free>
    if (handler != NULL) {
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d0da      	beq.n	8012110 <sys_check_timeouts+0xc>
      handler(arg);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6838      	ldr	r0, [r7, #0]
 801215e:	4798      	blx	r3
  do {
 8012160:	e7d6      	b.n	8012110 <sys_check_timeouts+0xc>
      return;
 8012162:	bf00      	nop
 8012164:	e000      	b.n	8012168 <sys_check_timeouts+0x64>
      return;
 8012166:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	20004b04 	.word	0x20004b04
 8012174:	20004b08 	.word	0x20004b08

08012178 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801217e:	4b16      	ldr	r3, [pc, #88]	; (80121d8 <sys_timeouts_sleeptime+0x60>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d102      	bne.n	801218c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012186:	f04f 33ff 	mov.w	r3, #4294967295
 801218a:	e020      	b.n	80121ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801218c:	f7f4 fe62 	bl	8006e54 <sys_now>
 8012190:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012192:	4b11      	ldr	r3, [pc, #68]	; (80121d8 <sys_timeouts_sleeptime+0x60>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	685a      	ldr	r2, [r3, #4]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	0fdb      	lsrs	r3, r3, #31
 801219e:	f003 0301 	and.w	r3, r3, #1
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d001      	beq.n	80121ac <sys_timeouts_sleeptime+0x34>
    return 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	e010      	b.n	80121ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80121ac:	4b0a      	ldr	r3, [pc, #40]	; (80121d8 <sys_timeouts_sleeptime+0x60>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	685a      	ldr	r2, [r3, #4]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	da06      	bge.n	80121cc <sys_timeouts_sleeptime+0x54>
 80121be:	4b07      	ldr	r3, [pc, #28]	; (80121dc <sys_timeouts_sleeptime+0x64>)
 80121c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80121c4:	4906      	ldr	r1, [pc, #24]	; (80121e0 <sys_timeouts_sleeptime+0x68>)
 80121c6:	4807      	ldr	r0, [pc, #28]	; (80121e4 <sys_timeouts_sleeptime+0x6c>)
 80121c8:	f005 f8cc 	bl	8017364 <iprintf>
    return ret;
 80121cc:	683b      	ldr	r3, [r7, #0]
  }
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3708      	adds	r7, #8
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	20004b04 	.word	0x20004b04
 80121dc:	0801a240 	.word	0x0801a240
 80121e0:	0801a314 	.word	0x0801a314
 80121e4:	0801a2b4 	.word	0x0801a2b4

080121e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80121ec:	f005 f8d2 	bl	8017394 <rand>
 80121f0:	4603      	mov	r3, r0
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80121fe:	b29a      	uxth	r2, r3
 8012200:	4b01      	ldr	r3, [pc, #4]	; (8012208 <udp_init+0x20>)
 8012202:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012204:	bf00      	nop
 8012206:	bd80      	pop	{r7, pc}
 8012208:	20000018 	.word	0x20000018

0801220c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012212:	2300      	movs	r3, #0
 8012214:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012216:	4b17      	ldr	r3, [pc, #92]	; (8012274 <udp_new_port+0x68>)
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	1c5a      	adds	r2, r3, #1
 801221c:	b291      	uxth	r1, r2
 801221e:	4a15      	ldr	r2, [pc, #84]	; (8012274 <udp_new_port+0x68>)
 8012220:	8011      	strh	r1, [r2, #0]
 8012222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012226:	4293      	cmp	r3, r2
 8012228:	d103      	bne.n	8012232 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801222a:	4b12      	ldr	r3, [pc, #72]	; (8012274 <udp_new_port+0x68>)
 801222c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012230:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012232:	4b11      	ldr	r3, [pc, #68]	; (8012278 <udp_new_port+0x6c>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	603b      	str	r3, [r7, #0]
 8012238:	e011      	b.n	801225e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	8a5a      	ldrh	r2, [r3, #18]
 801223e:	4b0d      	ldr	r3, [pc, #52]	; (8012274 <udp_new_port+0x68>)
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	429a      	cmp	r2, r3
 8012244:	d108      	bne.n	8012258 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012246:	88fb      	ldrh	r3, [r7, #6]
 8012248:	3301      	adds	r3, #1
 801224a:	80fb      	strh	r3, [r7, #6]
 801224c:	88fb      	ldrh	r3, [r7, #6]
 801224e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012252:	d3e0      	bcc.n	8012216 <udp_new_port+0xa>
        return 0;
 8012254:	2300      	movs	r3, #0
 8012256:	e007      	b.n	8012268 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	603b      	str	r3, [r7, #0]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1ea      	bne.n	801223a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012264:	4b03      	ldr	r3, [pc, #12]	; (8012274 <udp_new_port+0x68>)
 8012266:	881b      	ldrh	r3, [r3, #0]
}
 8012268:	4618      	mov	r0, r3
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	20000018 	.word	0x20000018
 8012278:	2000bbb0 	.word	0x2000bbb0

0801227c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	4613      	mov	r3, r2
 8012288:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d105      	bne.n	801229c <udp_input_local_match+0x20>
 8012290:	4b27      	ldr	r3, [pc, #156]	; (8012330 <udp_input_local_match+0xb4>)
 8012292:	2287      	movs	r2, #135	; 0x87
 8012294:	4927      	ldr	r1, [pc, #156]	; (8012334 <udp_input_local_match+0xb8>)
 8012296:	4828      	ldr	r0, [pc, #160]	; (8012338 <udp_input_local_match+0xbc>)
 8012298:	f005 f864 	bl	8017364 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d105      	bne.n	80122ae <udp_input_local_match+0x32>
 80122a2:	4b23      	ldr	r3, [pc, #140]	; (8012330 <udp_input_local_match+0xb4>)
 80122a4:	2288      	movs	r2, #136	; 0x88
 80122a6:	4925      	ldr	r1, [pc, #148]	; (801233c <udp_input_local_match+0xc0>)
 80122a8:	4823      	ldr	r0, [pc, #140]	; (8012338 <udp_input_local_match+0xbc>)
 80122aa:	f005 f85b 	bl	8017364 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	7a1b      	ldrb	r3, [r3, #8]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00b      	beq.n	80122ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	7a1a      	ldrb	r2, [r3, #8]
 80122ba:	4b21      	ldr	r3, [pc, #132]	; (8012340 <udp_input_local_match+0xc4>)
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122c2:	3301      	adds	r3, #1
 80122c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d001      	beq.n	80122ce <udp_input_local_match+0x52>
    return 0;
 80122ca:	2300      	movs	r3, #0
 80122cc:	e02b      	b.n	8012326 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d018      	beq.n	8012306 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d013      	beq.n	8012302 <udp_input_local_match+0x86>
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d00f      	beq.n	8012302 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80122e2:	4b17      	ldr	r3, [pc, #92]	; (8012340 <udp_input_local_match+0xc4>)
 80122e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ea:	d00a      	beq.n	8012302 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	4b13      	ldr	r3, [pc, #76]	; (8012340 <udp_input_local_match+0xc4>)
 80122f2:	695b      	ldr	r3, [r3, #20]
 80122f4:	405a      	eors	r2, r3
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	3308      	adds	r3, #8
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d110      	bne.n	8012324 <udp_input_local_match+0xa8>
          return 1;
 8012302:	2301      	movs	r3, #1
 8012304:	e00f      	b.n	8012326 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d009      	beq.n	8012320 <udp_input_local_match+0xa4>
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d005      	beq.n	8012320 <udp_input_local_match+0xa4>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	4b09      	ldr	r3, [pc, #36]	; (8012340 <udp_input_local_match+0xc4>)
 801231a:	695b      	ldr	r3, [r3, #20]
 801231c:	429a      	cmp	r2, r3
 801231e:	d101      	bne.n	8012324 <udp_input_local_match+0xa8>
        return 1;
 8012320:	2301      	movs	r3, #1
 8012322:	e000      	b.n	8012326 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	0801a328 	.word	0x0801a328
 8012334:	0801a358 	.word	0x0801a358
 8012338:	0801a37c 	.word	0x0801a37c
 801233c:	0801a3a4 	.word	0x0801a3a4
 8012340:	20008464 	.word	0x20008464

08012344 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012344:	b590      	push	{r4, r7, lr}
 8012346:	b08d      	sub	sp, #52	; 0x34
 8012348:	af02      	add	r7, sp, #8
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801234e:	2300      	movs	r3, #0
 8012350:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d105      	bne.n	8012364 <udp_input+0x20>
 8012358:	4b7c      	ldr	r3, [pc, #496]	; (801254c <udp_input+0x208>)
 801235a:	22cf      	movs	r2, #207	; 0xcf
 801235c:	497c      	ldr	r1, [pc, #496]	; (8012550 <udp_input+0x20c>)
 801235e:	487d      	ldr	r0, [pc, #500]	; (8012554 <udp_input+0x210>)
 8012360:	f005 f800 	bl	8017364 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d105      	bne.n	8012376 <udp_input+0x32>
 801236a:	4b78      	ldr	r3, [pc, #480]	; (801254c <udp_input+0x208>)
 801236c:	22d0      	movs	r2, #208	; 0xd0
 801236e:	497a      	ldr	r1, [pc, #488]	; (8012558 <udp_input+0x214>)
 8012370:	4878      	ldr	r0, [pc, #480]	; (8012554 <udp_input+0x210>)
 8012372:	f004 fff7 	bl	8017364 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	895b      	ldrh	r3, [r3, #10]
 801237a:	2b07      	cmp	r3, #7
 801237c:	d803      	bhi.n	8012386 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7fa f9b6 	bl	800c6f0 <pbuf_free>
    goto end;
 8012384:	e0de      	b.n	8012544 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801238c:	4b73      	ldr	r3, [pc, #460]	; (801255c <udp_input+0x218>)
 801238e:	695b      	ldr	r3, [r3, #20]
 8012390:	4a72      	ldr	r2, [pc, #456]	; (801255c <udp_input+0x218>)
 8012392:	6812      	ldr	r2, [r2, #0]
 8012394:	4611      	mov	r1, r2
 8012396:	4618      	mov	r0, r3
 8012398:	f003 fe06 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 801239c:	4603      	mov	r3, r0
 801239e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7f8 fdea 	bl	800af80 <lwip_htons>
 80123ac:	4603      	mov	r3, r0
 80123ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	885b      	ldrh	r3, [r3, #2]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7f8 fde2 	bl	800af80 <lwip_htons>
 80123bc:	4603      	mov	r3, r0
 80123be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80123c0:	2300      	movs	r3, #0
 80123c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80123c4:	2300      	movs	r3, #0
 80123c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80123c8:	2300      	movs	r3, #0
 80123ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123cc:	4b64      	ldr	r3, [pc, #400]	; (8012560 <udp_input+0x21c>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	627b      	str	r3, [r7, #36]	; 0x24
 80123d2:	e054      	b.n	801247e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80123d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d6:	8a5b      	ldrh	r3, [r3, #18]
 80123d8:	89fa      	ldrh	r2, [r7, #14]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d14a      	bne.n	8012474 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80123de:	7cfb      	ldrb	r3, [r7, #19]
 80123e0:	461a      	mov	r2, r3
 80123e2:	6839      	ldr	r1, [r7, #0]
 80123e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123e6:	f7ff ff49 	bl	801227c <udp_input_local_match>
 80123ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d041      	beq.n	8012474 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f2:	7c1b      	ldrb	r3, [r3, #16]
 80123f4:	f003 0304 	and.w	r3, r3, #4
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d11d      	bne.n	8012438 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d102      	bne.n	8012408 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	61fb      	str	r3, [r7, #28]
 8012406:	e017      	b.n	8012438 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012408:	7cfb      	ldrb	r3, [r7, #19]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d014      	beq.n	8012438 <udp_input+0xf4>
 801240e:	4b53      	ldr	r3, [pc, #332]	; (801255c <udp_input+0x218>)
 8012410:	695b      	ldr	r3, [r3, #20]
 8012412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012416:	d10f      	bne.n	8012438 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	3304      	adds	r3, #4
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	429a      	cmp	r2, r3
 8012424:	d008      	beq.n	8012438 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	3304      	adds	r3, #4
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	429a      	cmp	r2, r3
 8012432:	d101      	bne.n	8012438 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	8a9b      	ldrh	r3, [r3, #20]
 801243c:	8a3a      	ldrh	r2, [r7, #16]
 801243e:	429a      	cmp	r2, r3
 8012440:	d118      	bne.n	8012474 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012446:	2b00      	cmp	r3, #0
 8012448:	d005      	beq.n	8012456 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	685a      	ldr	r2, [r3, #4]
 801244e:	4b43      	ldr	r3, [pc, #268]	; (801255c <udp_input+0x218>)
 8012450:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012452:	429a      	cmp	r2, r3
 8012454:	d10e      	bne.n	8012474 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012456:	6a3b      	ldr	r3, [r7, #32]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d014      	beq.n	8012486 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245e:	68da      	ldr	r2, [r3, #12]
 8012460:	6a3b      	ldr	r3, [r7, #32]
 8012462:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012464:	4b3e      	ldr	r3, [pc, #248]	; (8012560 <udp_input+0x21c>)
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801246c:	4a3c      	ldr	r2, [pc, #240]	; (8012560 <udp_input+0x21c>)
 801246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012470:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012472:	e008      	b.n	8012486 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	627b      	str	r3, [r7, #36]	; 0x24
 801247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1a7      	bne.n	80123d4 <udp_input+0x90>
 8012484:	e000      	b.n	8012488 <udp_input+0x144>
        break;
 8012486:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <udp_input+0x14e>
    pcb = uncon_pcb;
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <udp_input+0x15a>
    for_us = 1;
 8012498:	2301      	movs	r3, #1
 801249a:	76fb      	strb	r3, [r7, #27]
 801249c:	e00a      	b.n	80124b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	3304      	adds	r3, #4
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	4b2d      	ldr	r3, [pc, #180]	; (801255c <udp_input+0x218>)
 80124a6:	695b      	ldr	r3, [r3, #20]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	bf0c      	ite	eq
 80124ac:	2301      	moveq	r3, #1
 80124ae:	2300      	movne	r3, #0
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80124b4:	7efb      	ldrb	r3, [r7, #27]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d041      	beq.n	801253e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80124ba:	2108      	movs	r1, #8
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7fa f891 	bl	800c5e4 <pbuf_remove_header>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00a      	beq.n	80124de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80124c8:	4b20      	ldr	r3, [pc, #128]	; (801254c <udp_input+0x208>)
 80124ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80124ce:	4925      	ldr	r1, [pc, #148]	; (8012564 <udp_input+0x220>)
 80124d0:	4820      	ldr	r0, [pc, #128]	; (8012554 <udp_input+0x210>)
 80124d2:	f004 ff47 	bl	8017364 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f7fa f90a 	bl	800c6f0 <pbuf_free>
      goto end;
 80124dc:	e032      	b.n	8012544 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d012      	beq.n	801250a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	699b      	ldr	r3, [r3, #24]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d00a      	beq.n	8012502 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	699c      	ldr	r4, [r3, #24]
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	69d8      	ldr	r0, [r3, #28]
 80124f4:	8a3b      	ldrh	r3, [r7, #16]
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	4b1b      	ldr	r3, [pc, #108]	; (8012568 <udp_input+0x224>)
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012500:	e021      	b.n	8012546 <udp_input+0x202>
        pbuf_free(p);
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f7fa f8f4 	bl	800c6f0 <pbuf_free>
        goto end;
 8012508:	e01c      	b.n	8012544 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801250a:	7cfb      	ldrb	r3, [r7, #19]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d112      	bne.n	8012536 <udp_input+0x1f2>
 8012510:	4b12      	ldr	r3, [pc, #72]	; (801255c <udp_input+0x218>)
 8012512:	695b      	ldr	r3, [r3, #20]
 8012514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012518:	2be0      	cmp	r3, #224	; 0xe0
 801251a:	d00c      	beq.n	8012536 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801251c:	4b0f      	ldr	r3, [pc, #60]	; (801255c <udp_input+0x218>)
 801251e:	899b      	ldrh	r3, [r3, #12]
 8012520:	3308      	adds	r3, #8
 8012522:	b29b      	uxth	r3, r3
 8012524:	b21b      	sxth	r3, r3
 8012526:	4619      	mov	r1, r3
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7fa f8ce 	bl	800c6ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801252e:	2103      	movs	r1, #3
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f003 f9fb 	bl	801592c <icmp_dest_unreach>
      pbuf_free(p);
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f7fa f8da 	bl	800c6f0 <pbuf_free>
  return;
 801253c:	e003      	b.n	8012546 <udp_input+0x202>
    pbuf_free(p);
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7fa f8d6 	bl	800c6f0 <pbuf_free>
  return;
 8012544:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012546:	372c      	adds	r7, #44	; 0x2c
 8012548:	46bd      	mov	sp, r7
 801254a:	bd90      	pop	{r4, r7, pc}
 801254c:	0801a328 	.word	0x0801a328
 8012550:	0801a3cc 	.word	0x0801a3cc
 8012554:	0801a37c 	.word	0x0801a37c
 8012558:	0801a3e4 	.word	0x0801a3e4
 801255c:	20008464 	.word	0x20008464
 8012560:	2000bbb0 	.word	0x2000bbb0
 8012564:	0801a400 	.word	0x0801a400
 8012568:	20008474 	.word	0x20008474

0801256c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af02      	add	r7, sp, #8
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d109      	bne.n	8012594 <udp_sendto_if+0x28>
 8012580:	4b2e      	ldr	r3, [pc, #184]	; (801263c <udp_sendto_if+0xd0>)
 8012582:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012586:	492e      	ldr	r1, [pc, #184]	; (8012640 <udp_sendto_if+0xd4>)
 8012588:	482e      	ldr	r0, [pc, #184]	; (8012644 <udp_sendto_if+0xd8>)
 801258a:	f004 feeb 	bl	8017364 <iprintf>
 801258e:	f06f 030f 	mvn.w	r3, #15
 8012592:	e04f      	b.n	8012634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d109      	bne.n	80125ae <udp_sendto_if+0x42>
 801259a:	4b28      	ldr	r3, [pc, #160]	; (801263c <udp_sendto_if+0xd0>)
 801259c:	f240 2281 	movw	r2, #641	; 0x281
 80125a0:	4929      	ldr	r1, [pc, #164]	; (8012648 <udp_sendto_if+0xdc>)
 80125a2:	4828      	ldr	r0, [pc, #160]	; (8012644 <udp_sendto_if+0xd8>)
 80125a4:	f004 fede 	bl	8017364 <iprintf>
 80125a8:	f06f 030f 	mvn.w	r3, #15
 80125ac:	e042      	b.n	8012634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d109      	bne.n	80125c8 <udp_sendto_if+0x5c>
 80125b4:	4b21      	ldr	r3, [pc, #132]	; (801263c <udp_sendto_if+0xd0>)
 80125b6:	f240 2282 	movw	r2, #642	; 0x282
 80125ba:	4924      	ldr	r1, [pc, #144]	; (801264c <udp_sendto_if+0xe0>)
 80125bc:	4821      	ldr	r0, [pc, #132]	; (8012644 <udp_sendto_if+0xd8>)
 80125be:	f004 fed1 	bl	8017364 <iprintf>
 80125c2:	f06f 030f 	mvn.w	r3, #15
 80125c6:	e035      	b.n	8012634 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80125c8:	6a3b      	ldr	r3, [r7, #32]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d109      	bne.n	80125e2 <udp_sendto_if+0x76>
 80125ce:	4b1b      	ldr	r3, [pc, #108]	; (801263c <udp_sendto_if+0xd0>)
 80125d0:	f240 2283 	movw	r2, #643	; 0x283
 80125d4:	491e      	ldr	r1, [pc, #120]	; (8012650 <udp_sendto_if+0xe4>)
 80125d6:	481b      	ldr	r0, [pc, #108]	; (8012644 <udp_sendto_if+0xd8>)
 80125d8:	f004 fec4 	bl	8017364 <iprintf>
 80125dc:	f06f 030f 	mvn.w	r3, #15
 80125e0:	e028      	b.n	8012634 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d009      	beq.n	80125fc <udp_sendto_if+0x90>
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d005      	beq.n	80125fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125f8:	2be0      	cmp	r3, #224	; 0xe0
 80125fa:	d103      	bne.n	8012604 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	3304      	adds	r3, #4
 8012600:	617b      	str	r3, [r7, #20]
 8012602:	e00b      	b.n	801261c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	6a3b      	ldr	r3, [r7, #32]
 801260a:	3304      	adds	r3, #4
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	429a      	cmp	r2, r3
 8012610:	d002      	beq.n	8012618 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012612:	f06f 0303 	mvn.w	r3, #3
 8012616:	e00d      	b.n	8012634 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801261c:	887a      	ldrh	r2, [r7, #2]
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	9301      	str	r3, [sp, #4]
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	9300      	str	r3, [sp, #0]
 8012626:	4613      	mov	r3, r2
 8012628:	687a      	ldr	r2, [r7, #4]
 801262a:	68b9      	ldr	r1, [r7, #8]
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f000 f811 	bl	8012654 <udp_sendto_if_src>
 8012632:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012634:	4618      	mov	r0, r3
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	0801a328 	.word	0x0801a328
 8012640:	0801a49c 	.word	0x0801a49c
 8012644:	0801a37c 	.word	0x0801a37c
 8012648:	0801a4b8 	.word	0x0801a4b8
 801264c:	0801a4d4 	.word	0x0801a4d4
 8012650:	0801a4f4 	.word	0x0801a4f4

08012654 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08c      	sub	sp, #48	; 0x30
 8012658:	af04      	add	r7, sp, #16
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
 8012660:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d109      	bne.n	801267c <udp_sendto_if_src+0x28>
 8012668:	4b65      	ldr	r3, [pc, #404]	; (8012800 <udp_sendto_if_src+0x1ac>)
 801266a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801266e:	4965      	ldr	r1, [pc, #404]	; (8012804 <udp_sendto_if_src+0x1b0>)
 8012670:	4865      	ldr	r0, [pc, #404]	; (8012808 <udp_sendto_if_src+0x1b4>)
 8012672:	f004 fe77 	bl	8017364 <iprintf>
 8012676:	f06f 030f 	mvn.w	r3, #15
 801267a:	e0bc      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d109      	bne.n	8012696 <udp_sendto_if_src+0x42>
 8012682:	4b5f      	ldr	r3, [pc, #380]	; (8012800 <udp_sendto_if_src+0x1ac>)
 8012684:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012688:	4960      	ldr	r1, [pc, #384]	; (801280c <udp_sendto_if_src+0x1b8>)
 801268a:	485f      	ldr	r0, [pc, #380]	; (8012808 <udp_sendto_if_src+0x1b4>)
 801268c:	f004 fe6a 	bl	8017364 <iprintf>
 8012690:	f06f 030f 	mvn.w	r3, #15
 8012694:	e0af      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d109      	bne.n	80126b0 <udp_sendto_if_src+0x5c>
 801269c:	4b58      	ldr	r3, [pc, #352]	; (8012800 <udp_sendto_if_src+0x1ac>)
 801269e:	f240 22d3 	movw	r2, #723	; 0x2d3
 80126a2:	495b      	ldr	r1, [pc, #364]	; (8012810 <udp_sendto_if_src+0x1bc>)
 80126a4:	4858      	ldr	r0, [pc, #352]	; (8012808 <udp_sendto_if_src+0x1b4>)
 80126a6:	f004 fe5d 	bl	8017364 <iprintf>
 80126aa:	f06f 030f 	mvn.w	r3, #15
 80126ae:	e0a2      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80126b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d109      	bne.n	80126ca <udp_sendto_if_src+0x76>
 80126b6:	4b52      	ldr	r3, [pc, #328]	; (8012800 <udp_sendto_if_src+0x1ac>)
 80126b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80126bc:	4955      	ldr	r1, [pc, #340]	; (8012814 <udp_sendto_if_src+0x1c0>)
 80126be:	4852      	ldr	r0, [pc, #328]	; (8012808 <udp_sendto_if_src+0x1b4>)
 80126c0:	f004 fe50 	bl	8017364 <iprintf>
 80126c4:	f06f 030f 	mvn.w	r3, #15
 80126c8:	e095      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d109      	bne.n	80126e4 <udp_sendto_if_src+0x90>
 80126d0:	4b4b      	ldr	r3, [pc, #300]	; (8012800 <udp_sendto_if_src+0x1ac>)
 80126d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80126d6:	4950      	ldr	r1, [pc, #320]	; (8012818 <udp_sendto_if_src+0x1c4>)
 80126d8:	484b      	ldr	r0, [pc, #300]	; (8012808 <udp_sendto_if_src+0x1b4>)
 80126da:	f004 fe43 	bl	8017364 <iprintf>
 80126de:	f06f 030f 	mvn.w	r3, #15
 80126e2:	e088      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	8a5b      	ldrh	r3, [r3, #18]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d10f      	bne.n	801270c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80126ec:	68f9      	ldr	r1, [r7, #12]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	8a5b      	ldrh	r3, [r3, #18]
 80126f2:	461a      	mov	r2, r3
 80126f4:	68f8      	ldr	r0, [r7, #12]
 80126f6:	f000 f893 	bl	8012820 <udp_bind>
 80126fa:	4603      	mov	r3, r0
 80126fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80126fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d002      	beq.n	801270c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012706:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801270a:	e074      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	891b      	ldrh	r3, [r3, #8]
 8012710:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012714:	4293      	cmp	r3, r2
 8012716:	d902      	bls.n	801271e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012718:	f04f 33ff 	mov.w	r3, #4294967295
 801271c:	e06b      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801271e:	2108      	movs	r1, #8
 8012720:	68b8      	ldr	r0, [r7, #8]
 8012722:	f7f9 ff4f 	bl	800c5c4 <pbuf_add_header>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d015      	beq.n	8012758 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801272c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012730:	2108      	movs	r1, #8
 8012732:	2022      	movs	r0, #34	; 0x22
 8012734:	f7f9 fcf8 	bl	800c128 <pbuf_alloc>
 8012738:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d102      	bne.n	8012746 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012740:	f04f 33ff 	mov.w	r3, #4294967295
 8012744:	e057      	b.n	80127f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	891b      	ldrh	r3, [r3, #8]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d006      	beq.n	801275c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801274e:	68b9      	ldr	r1, [r7, #8]
 8012750:	69f8      	ldr	r0, [r7, #28]
 8012752:	f7fa f8f1 	bl	800c938 <pbuf_chain>
 8012756:	e001      	b.n	801275c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	895b      	ldrh	r3, [r3, #10]
 8012760:	2b07      	cmp	r3, #7
 8012762:	d806      	bhi.n	8012772 <udp_sendto_if_src+0x11e>
 8012764:	4b26      	ldr	r3, [pc, #152]	; (8012800 <udp_sendto_if_src+0x1ac>)
 8012766:	f240 320d 	movw	r2, #781	; 0x30d
 801276a:	492c      	ldr	r1, [pc, #176]	; (801281c <udp_sendto_if_src+0x1c8>)
 801276c:	4826      	ldr	r0, [pc, #152]	; (8012808 <udp_sendto_if_src+0x1b4>)
 801276e:	f004 fdf9 	bl	8017364 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	8a5b      	ldrh	r3, [r3, #18]
 801277c:	4618      	mov	r0, r3
 801277e:	f7f8 fbff 	bl	800af80 <lwip_htons>
 8012782:	4603      	mov	r3, r0
 8012784:	461a      	mov	r2, r3
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801278a:	887b      	ldrh	r3, [r7, #2]
 801278c:	4618      	mov	r0, r3
 801278e:	f7f8 fbf7 	bl	800af80 <lwip_htons>
 8012792:	4603      	mov	r3, r0
 8012794:	461a      	mov	r2, r3
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	2200      	movs	r2, #0
 801279e:	719a      	strb	r2, [r3, #6]
 80127a0:	2200      	movs	r2, #0
 80127a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	891b      	ldrh	r3, [r3, #8]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f8 fbe9 	bl	800af80 <lwip_htons>
 80127ae:	4603      	mov	r3, r0
 80127b0:	461a      	mov	r2, r3
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80127b6:	2311      	movs	r3, #17
 80127b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	7adb      	ldrb	r3, [r3, #11]
 80127be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	7a9b      	ldrb	r3, [r3, #10]
 80127c4:	7cb9      	ldrb	r1, [r7, #18]
 80127c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127c8:	9202      	str	r2, [sp, #8]
 80127ca:	7cfa      	ldrb	r2, [r7, #19]
 80127cc:	9201      	str	r2, [sp, #4]
 80127ce:	9300      	str	r3, [sp, #0]
 80127d0:	460b      	mov	r3, r1
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127d6:	69f8      	ldr	r0, [r7, #28]
 80127d8:	f003 fb38 	bl	8015e4c <ip4_output_if_src>
 80127dc:	4603      	mov	r3, r0
 80127de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80127e0:	69fa      	ldr	r2, [r7, #28]
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d004      	beq.n	80127f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80127e8:	69f8      	ldr	r0, [r7, #28]
 80127ea:	f7f9 ff81 	bl	800c6f0 <pbuf_free>
    q = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80127f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3720      	adds	r7, #32
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	0801a328 	.word	0x0801a328
 8012804:	0801a514 	.word	0x0801a514
 8012808:	0801a37c 	.word	0x0801a37c
 801280c:	0801a534 	.word	0x0801a534
 8012810:	0801a554 	.word	0x0801a554
 8012814:	0801a578 	.word	0x0801a578
 8012818:	0801a59c 	.word	0x0801a59c
 801281c:	0801a5c0 	.word	0x0801a5c0

08012820 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b086      	sub	sp, #24
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	4613      	mov	r3, r2
 801282c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d101      	bne.n	8012838 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012834:	4b39      	ldr	r3, [pc, #228]	; (801291c <udp_bind+0xfc>)
 8012836:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d109      	bne.n	8012852 <udp_bind+0x32>
 801283e:	4b38      	ldr	r3, [pc, #224]	; (8012920 <udp_bind+0x100>)
 8012840:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012844:	4937      	ldr	r1, [pc, #220]	; (8012924 <udp_bind+0x104>)
 8012846:	4838      	ldr	r0, [pc, #224]	; (8012928 <udp_bind+0x108>)
 8012848:	f004 fd8c 	bl	8017364 <iprintf>
 801284c:	f06f 030f 	mvn.w	r3, #15
 8012850:	e060      	b.n	8012914 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012856:	4b35      	ldr	r3, [pc, #212]	; (801292c <udp_bind+0x10c>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	617b      	str	r3, [r7, #20]
 801285c:	e009      	b.n	8012872 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801285e:	68fa      	ldr	r2, [r7, #12]
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	429a      	cmp	r2, r3
 8012864:	d102      	bne.n	801286c <udp_bind+0x4c>
      rebind = 1;
 8012866:	2301      	movs	r3, #1
 8012868:	74fb      	strb	r3, [r7, #19]
      break;
 801286a:	e005      	b.n	8012878 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	617b      	str	r3, [r7, #20]
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d1f2      	bne.n	801285e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012878:	88fb      	ldrh	r3, [r7, #6]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d109      	bne.n	8012892 <udp_bind+0x72>
    port = udp_new_port();
 801287e:	f7ff fcc5 	bl	801220c <udp_new_port>
 8012882:	4603      	mov	r3, r0
 8012884:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012886:	88fb      	ldrh	r3, [r7, #6]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d12c      	bne.n	80128e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801288c:	f06f 0307 	mvn.w	r3, #7
 8012890:	e040      	b.n	8012914 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012892:	4b26      	ldr	r3, [pc, #152]	; (801292c <udp_bind+0x10c>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	617b      	str	r3, [r7, #20]
 8012898:	e022      	b.n	80128e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801289a:	68fa      	ldr	r2, [r7, #12]
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	429a      	cmp	r2, r3
 80128a0:	d01b      	beq.n	80128da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	8a5b      	ldrh	r3, [r3, #18]
 80128a6:	88fa      	ldrh	r2, [r7, #6]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d116      	bne.n	80128da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d00d      	beq.n	80128d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00a      	beq.n	80128d4 <udp_bind+0xb4>
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d006      	beq.n	80128d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80128c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d003      	beq.n	80128d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d102      	bne.n	80128da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80128d4:	f06f 0307 	mvn.w	r3, #7
 80128d8:	e01c      	b.n	8012914 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	68db      	ldr	r3, [r3, #12]
 80128de:	617b      	str	r3, [r7, #20]
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1d9      	bne.n	801289a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d002      	beq.n	80128f2 <udp_bind+0xd2>
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	e000      	b.n	80128f4 <udp_bind+0xd4>
 80128f2:	2300      	movs	r3, #0
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	88fa      	ldrh	r2, [r7, #6]
 80128fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80128fe:	7cfb      	ldrb	r3, [r7, #19]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012904:	4b09      	ldr	r3, [pc, #36]	; (801292c <udp_bind+0x10c>)
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801290c:	4a07      	ldr	r2, [pc, #28]	; (801292c <udp_bind+0x10c>)
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012912:	2300      	movs	r3, #0
}
 8012914:	4618      	mov	r0, r3
 8012916:	3718      	adds	r7, #24
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	0801b374 	.word	0x0801b374
 8012920:	0801a328 	.word	0x0801a328
 8012924:	0801a5f0 	.word	0x0801a5f0
 8012928:	0801a37c 	.word	0x0801a37c
 801292c:	2000bbb0 	.word	0x2000bbb0

08012930 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	4613      	mov	r3, r2
 801293c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d109      	bne.n	8012958 <udp_connect+0x28>
 8012944:	4b2c      	ldr	r3, [pc, #176]	; (80129f8 <udp_connect+0xc8>)
 8012946:	f240 4235 	movw	r2, #1077	; 0x435
 801294a:	492c      	ldr	r1, [pc, #176]	; (80129fc <udp_connect+0xcc>)
 801294c:	482c      	ldr	r0, [pc, #176]	; (8012a00 <udp_connect+0xd0>)
 801294e:	f004 fd09 	bl	8017364 <iprintf>
 8012952:	f06f 030f 	mvn.w	r3, #15
 8012956:	e04b      	b.n	80129f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d109      	bne.n	8012972 <udp_connect+0x42>
 801295e:	4b26      	ldr	r3, [pc, #152]	; (80129f8 <udp_connect+0xc8>)
 8012960:	f240 4236 	movw	r2, #1078	; 0x436
 8012964:	4927      	ldr	r1, [pc, #156]	; (8012a04 <udp_connect+0xd4>)
 8012966:	4826      	ldr	r0, [pc, #152]	; (8012a00 <udp_connect+0xd0>)
 8012968:	f004 fcfc 	bl	8017364 <iprintf>
 801296c:	f06f 030f 	mvn.w	r3, #15
 8012970:	e03e      	b.n	80129f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	8a5b      	ldrh	r3, [r3, #18]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10f      	bne.n	801299a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801297a:	68f9      	ldr	r1, [r7, #12]
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	8a5b      	ldrh	r3, [r3, #18]
 8012980:	461a      	mov	r2, r3
 8012982:	68f8      	ldr	r0, [r7, #12]
 8012984:	f7ff ff4c 	bl	8012820 <udp_bind>
 8012988:	4603      	mov	r3, r0
 801298a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801298c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <udp_connect+0x6a>
      return err;
 8012994:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012998:	e02a      	b.n	80129f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <udp_connect+0x76>
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	e000      	b.n	80129a8 <udp_connect+0x78>
 80129a6:	2300      	movs	r3, #0
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	88fa      	ldrh	r2, [r7, #6]
 80129b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	7c1b      	ldrb	r3, [r3, #16]
 80129b6:	f043 0304 	orr.w	r3, r3, #4
 80129ba:	b2da      	uxtb	r2, r3
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129c0:	4b11      	ldr	r3, [pc, #68]	; (8012a08 <udp_connect+0xd8>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	617b      	str	r3, [r7, #20]
 80129c6:	e008      	b.n	80129da <udp_connect+0xaa>
    if (pcb == ipcb) {
 80129c8:	68fa      	ldr	r2, [r7, #12]
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d101      	bne.n	80129d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80129d0:	2300      	movs	r3, #0
 80129d2:	e00d      	b.n	80129f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	617b      	str	r3, [r7, #20]
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d1f3      	bne.n	80129c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80129e0:	4b09      	ldr	r3, [pc, #36]	; (8012a08 <udp_connect+0xd8>)
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80129e8:	4a07      	ldr	r2, [pc, #28]	; (8012a08 <udp_connect+0xd8>)
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80129ee:	2300      	movs	r3, #0
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3718      	adds	r7, #24
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	0801a328 	.word	0x0801a328
 80129fc:	0801a608 	.word	0x0801a608
 8012a00:	0801a37c 	.word	0x0801a37c
 8012a04:	0801a624 	.word	0x0801a624
 8012a08:	2000bbb0 	.word	0x2000bbb0

08012a0c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	60b9      	str	r1, [r7, #8]
 8012a16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d107      	bne.n	8012a2e <udp_recv+0x22>
 8012a1e:	4b08      	ldr	r3, [pc, #32]	; (8012a40 <udp_recv+0x34>)
 8012a20:	f240 428a 	movw	r2, #1162	; 0x48a
 8012a24:	4907      	ldr	r1, [pc, #28]	; (8012a44 <udp_recv+0x38>)
 8012a26:	4808      	ldr	r0, [pc, #32]	; (8012a48 <udp_recv+0x3c>)
 8012a28:	f004 fc9c 	bl	8017364 <iprintf>
 8012a2c:	e005      	b.n	8012a3a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	61da      	str	r2, [r3, #28]
}
 8012a3a:	3710      	adds	r7, #16
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	0801a328 	.word	0x0801a328
 8012a44:	0801a65c 	.word	0x0801a65c
 8012a48:	0801a37c 	.word	0x0801a37c

08012a4c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d107      	bne.n	8012a6a <udp_remove+0x1e>
 8012a5a:	4b19      	ldr	r3, [pc, #100]	; (8012ac0 <udp_remove+0x74>)
 8012a5c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012a60:	4918      	ldr	r1, [pc, #96]	; (8012ac4 <udp_remove+0x78>)
 8012a62:	4819      	ldr	r0, [pc, #100]	; (8012ac8 <udp_remove+0x7c>)
 8012a64:	f004 fc7e 	bl	8017364 <iprintf>
 8012a68:	e026      	b.n	8012ab8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012a6a:	4b18      	ldr	r3, [pc, #96]	; (8012acc <udp_remove+0x80>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d105      	bne.n	8012a80 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012a74:	4b15      	ldr	r3, [pc, #84]	; (8012acc <udp_remove+0x80>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	4a14      	ldr	r2, [pc, #80]	; (8012acc <udp_remove+0x80>)
 8012a7c:	6013      	str	r3, [r2, #0]
 8012a7e:	e017      	b.n	8012ab0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a80:	4b12      	ldr	r3, [pc, #72]	; (8012acc <udp_remove+0x80>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	60fb      	str	r3, [r7, #12]
 8012a86:	e010      	b.n	8012aaa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d009      	beq.n	8012aa4 <udp_remove+0x58>
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d104      	bne.n	8012aa4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	68da      	ldr	r2, [r3, #12]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	60da      	str	r2, [r3, #12]
        break;
 8012aa2:	e005      	b.n	8012ab0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	60fb      	str	r3, [r7, #12]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d1eb      	bne.n	8012a88 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012ab0:	6879      	ldr	r1, [r7, #4]
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	f7f8 ff6c 	bl	800b990 <memp_free>
}
 8012ab8:	3710      	adds	r7, #16
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	0801a328 	.word	0x0801a328
 8012ac4:	0801a674 	.word	0x0801a674
 8012ac8:	0801a37c 	.word	0x0801a37c
 8012acc:	2000bbb0 	.word	0x2000bbb0

08012ad0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012ad6:	2000      	movs	r0, #0
 8012ad8:	f7f8 ff08 	bl	800b8ec <memp_malloc>
 8012adc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d007      	beq.n	8012af4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012ae4:	2220      	movs	r2, #32
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f004 fbd8 	bl	801729e <memset>
    pcb->ttl = UDP_TTL;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	22ff      	movs	r2, #255	; 0xff
 8012af2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012af4:	687b      	ldr	r3, [r7, #4]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
	...

08012b00 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b085      	sub	sp, #20
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d01e      	beq.n	8012b4e <udp_netif_ip_addr_changed+0x4e>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d01a      	beq.n	8012b4e <udp_netif_ip_addr_changed+0x4e>
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d017      	beq.n	8012b4e <udp_netif_ip_addr_changed+0x4e>
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d013      	beq.n	8012b4e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012b26:	4b0d      	ldr	r3, [pc, #52]	; (8012b5c <udp_netif_ip_addr_changed+0x5c>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	e00c      	b.n	8012b48 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d103      	bne.n	8012b42 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	60fb      	str	r3, [r7, #12]
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1ef      	bne.n	8012b2e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012b4e:	bf00      	nop
 8012b50:	3714      	adds	r7, #20
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr
 8012b5a:	bf00      	nop
 8012b5c:	2000bbb0 	.word	0x2000bbb0

08012b60 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012b64:	4b20      	ldr	r3, [pc, #128]	; (8012be8 <dhcp_inc_pcb_refcount+0x88>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d133      	bne.n	8012bd4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012b6c:	4b1f      	ldr	r3, [pc, #124]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d005      	beq.n	8012b80 <dhcp_inc_pcb_refcount+0x20>
 8012b74:	4b1e      	ldr	r3, [pc, #120]	; (8012bf0 <dhcp_inc_pcb_refcount+0x90>)
 8012b76:	22e5      	movs	r2, #229	; 0xe5
 8012b78:	491e      	ldr	r1, [pc, #120]	; (8012bf4 <dhcp_inc_pcb_refcount+0x94>)
 8012b7a:	481f      	ldr	r0, [pc, #124]	; (8012bf8 <dhcp_inc_pcb_refcount+0x98>)
 8012b7c:	f004 fbf2 	bl	8017364 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012b80:	f7ff ffa6 	bl	8012ad0 <udp_new>
 8012b84:	4603      	mov	r3, r0
 8012b86:	4a19      	ldr	r2, [pc, #100]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012b88:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012b8a:	4b18      	ldr	r3, [pc, #96]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d102      	bne.n	8012b98 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012b92:	f04f 33ff 	mov.w	r3, #4294967295
 8012b96:	e024      	b.n	8012be2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012b98:	4b14      	ldr	r3, [pc, #80]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	7a5a      	ldrb	r2, [r3, #9]
 8012b9e:	4b13      	ldr	r3, [pc, #76]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f042 0220 	orr.w	r2, r2, #32
 8012ba6:	b2d2      	uxtb	r2, r2
 8012ba8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012baa:	4b10      	ldr	r3, [pc, #64]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2244      	movs	r2, #68	; 0x44
 8012bb0:	4912      	ldr	r1, [pc, #72]	; (8012bfc <dhcp_inc_pcb_refcount+0x9c>)
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7ff fe34 	bl	8012820 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012bb8:	4b0c      	ldr	r3, [pc, #48]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2243      	movs	r2, #67	; 0x43
 8012bbe:	490f      	ldr	r1, [pc, #60]	; (8012bfc <dhcp_inc_pcb_refcount+0x9c>)
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7ff feb5 	bl	8012930 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012bc6:	4b09      	ldr	r3, [pc, #36]	; (8012bec <dhcp_inc_pcb_refcount+0x8c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	490c      	ldr	r1, [pc, #48]	; (8012c00 <dhcp_inc_pcb_refcount+0xa0>)
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff ff1c 	bl	8012a0c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012bd4:	4b04      	ldr	r3, [pc, #16]	; (8012be8 <dhcp_inc_pcb_refcount+0x88>)
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	b2da      	uxtb	r2, r3
 8012bdc:	4b02      	ldr	r3, [pc, #8]	; (8012be8 <dhcp_inc_pcb_refcount+0x88>)
 8012bde:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	20004b14 	.word	0x20004b14
 8012bec:	20004b10 	.word	0x20004b10
 8012bf0:	0801a68c 	.word	0x0801a68c
 8012bf4:	0801a6c4 	.word	0x0801a6c4
 8012bf8:	0801a6ec 	.word	0x0801a6ec
 8012bfc:	0801b374 	.word	0x0801b374
 8012c00:	08014495 	.word	0x08014495

08012c04 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012c08:	4b0e      	ldr	r3, [pc, #56]	; (8012c44 <dhcp_dec_pcb_refcount+0x40>)
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d105      	bne.n	8012c1c <dhcp_dec_pcb_refcount+0x18>
 8012c10:	4b0d      	ldr	r3, [pc, #52]	; (8012c48 <dhcp_dec_pcb_refcount+0x44>)
 8012c12:	22ff      	movs	r2, #255	; 0xff
 8012c14:	490d      	ldr	r1, [pc, #52]	; (8012c4c <dhcp_dec_pcb_refcount+0x48>)
 8012c16:	480e      	ldr	r0, [pc, #56]	; (8012c50 <dhcp_dec_pcb_refcount+0x4c>)
 8012c18:	f004 fba4 	bl	8017364 <iprintf>
  dhcp_pcb_refcount--;
 8012c1c:	4b09      	ldr	r3, [pc, #36]	; (8012c44 <dhcp_dec_pcb_refcount+0x40>)
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	3b01      	subs	r3, #1
 8012c22:	b2da      	uxtb	r2, r3
 8012c24:	4b07      	ldr	r3, [pc, #28]	; (8012c44 <dhcp_dec_pcb_refcount+0x40>)
 8012c26:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012c28:	4b06      	ldr	r3, [pc, #24]	; (8012c44 <dhcp_dec_pcb_refcount+0x40>)
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d107      	bne.n	8012c40 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012c30:	4b08      	ldr	r3, [pc, #32]	; (8012c54 <dhcp_dec_pcb_refcount+0x50>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7ff ff09 	bl	8012a4c <udp_remove>
    dhcp_pcb = NULL;
 8012c3a:	4b06      	ldr	r3, [pc, #24]	; (8012c54 <dhcp_dec_pcb_refcount+0x50>)
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	601a      	str	r2, [r3, #0]
  }
}
 8012c40:	bf00      	nop
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	20004b14 	.word	0x20004b14
 8012c48:	0801a68c 	.word	0x0801a68c
 8012c4c:	0801a714 	.word	0x0801a714
 8012c50:	0801a6ec 	.word	0x0801a6ec
 8012c54:	20004b10 	.word	0x20004b10

08012c58 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c64:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012c66:	210c      	movs	r1, #12
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f001 f855 	bl	8013d18 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012c6e:	4b06      	ldr	r3, [pc, #24]	; (8012c88 <dhcp_handle_nak+0x30>)
 8012c70:	4a05      	ldr	r2, [pc, #20]	; (8012c88 <dhcp_handle_nak+0x30>)
 8012c72:	4905      	ldr	r1, [pc, #20]	; (8012c88 <dhcp_handle_nak+0x30>)
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f7f9 f82d 	bl	800bcd4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 fc48 	bl	8013510 <dhcp_discover>
}
 8012c80:	bf00      	nop
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	0801b374 	.word	0x0801b374

08012c8c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c98:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012c9a:	2108      	movs	r1, #8
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f001 f83b 	bl	8013d18 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	331c      	adds	r3, #28
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	4619      	mov	r1, r3
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f002 fb3c 	bl	8015328 <etharp_query>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	799b      	ldrb	r3, [r3, #6]
 8012cb8:	2bff      	cmp	r3, #255	; 0xff
 8012cba:	d005      	beq.n	8012cc8 <dhcp_check+0x3c>
    dhcp->tries++;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	799b      	ldrb	r3, [r3, #6]
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	b2da      	uxtb	r2, r3
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012cc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012ccc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012cce:	893b      	ldrh	r3, [r7, #8]
 8012cd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012cd4:	4a06      	ldr	r2, [pc, #24]	; (8012cf0 <dhcp_check+0x64>)
 8012cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8012cda:	1152      	asrs	r2, r2, #5
 8012cdc:	17db      	asrs	r3, r3, #31
 8012cde:	1ad3      	subs	r3, r2, r3
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012ce6:	bf00      	nop
 8012ce8:	3710      	adds	r7, #16
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	10624dd3 	.word	0x10624dd3

08012cf4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d02:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012d04:	4b0c      	ldr	r3, [pc, #48]	; (8012d38 <dhcp_handle_offer+0x44>)
 8012d06:	789b      	ldrb	r3, [r3, #2]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d011      	beq.n	8012d30 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012d12:	4b0a      	ldr	r3, [pc, #40]	; (8012d3c <dhcp_handle_offer+0x48>)
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f8 f947 	bl	800afaa <lwip_htonl>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	691a      	ldr	r2, [r3, #16]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 f808 	bl	8012d40 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012d30:	bf00      	nop
 8012d32:	3710      	adds	r7, #16
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	2000bbb4 	.word	0x2000bbb4
 8012d3c:	2000bbbc 	.word	0x2000bbbc

08012d40 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012d40:	b5b0      	push	{r4, r5, r7, lr}
 8012d42:	b08a      	sub	sp, #40	; 0x28
 8012d44:	af02      	add	r7, sp, #8
 8012d46:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d109      	bne.n	8012d62 <dhcp_select+0x22>
 8012d4e:	4b71      	ldr	r3, [pc, #452]	; (8012f14 <dhcp_select+0x1d4>)
 8012d50:	f240 1277 	movw	r2, #375	; 0x177
 8012d54:	4970      	ldr	r1, [pc, #448]	; (8012f18 <dhcp_select+0x1d8>)
 8012d56:	4871      	ldr	r0, [pc, #452]	; (8012f1c <dhcp_select+0x1dc>)
 8012d58:	f004 fb04 	bl	8017364 <iprintf>
 8012d5c:	f06f 030f 	mvn.w	r3, #15
 8012d60:	e0d3      	b.n	8012f0a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d66:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d109      	bne.n	8012d82 <dhcp_select+0x42>
 8012d6e:	4b69      	ldr	r3, [pc, #420]	; (8012f14 <dhcp_select+0x1d4>)
 8012d70:	f240 1279 	movw	r2, #377	; 0x179
 8012d74:	496a      	ldr	r1, [pc, #424]	; (8012f20 <dhcp_select+0x1e0>)
 8012d76:	4869      	ldr	r0, [pc, #420]	; (8012f1c <dhcp_select+0x1dc>)
 8012d78:	f004 faf4 	bl	8017364 <iprintf>
 8012d7c:	f06f 0305 	mvn.w	r3, #5
 8012d80:	e0c3      	b.n	8012f0a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012d82:	2101      	movs	r1, #1
 8012d84:	69b8      	ldr	r0, [r7, #24]
 8012d86:	f000 ffc7 	bl	8013d18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012d8a:	f107 030c 	add.w	r3, r7, #12
 8012d8e:	2203      	movs	r2, #3
 8012d90:	69b9      	ldr	r1, [r7, #24]
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f001 fc4c 	bl	8014630 <dhcp_create_msg>
 8012d98:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f000 8085 	beq.w	8012eac <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012da8:	89b8      	ldrh	r0, [r7, #12]
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012db0:	2302      	movs	r3, #2
 8012db2:	2239      	movs	r2, #57	; 0x39
 8012db4:	f000 ffca 	bl	8013d4c <dhcp_option>
 8012db8:	4603      	mov	r3, r0
 8012dba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012dbc:	89b8      	ldrh	r0, [r7, #12]
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dc8:	461a      	mov	r2, r3
 8012dca:	f001 f819 	bl	8013e00 <dhcp_option_short>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012dd2:	89b8      	ldrh	r0, [r7, #12]
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dda:	2304      	movs	r3, #4
 8012ddc:	2232      	movs	r2, #50	; 0x32
 8012dde:	f000 ffb5 	bl	8013d4c <dhcp_option>
 8012de2:	4603      	mov	r3, r0
 8012de4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012de6:	89bc      	ldrh	r4, [r7, #12]
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	69db      	ldr	r3, [r3, #28]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7f8 f8d9 	bl	800afaa <lwip_htonl>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	4629      	mov	r1, r5
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f001 f830 	bl	8013e64 <dhcp_option_long>
 8012e04:	4603      	mov	r3, r0
 8012e06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012e08:	89b8      	ldrh	r0, [r7, #12]
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e10:	2304      	movs	r3, #4
 8012e12:	2236      	movs	r2, #54	; 0x36
 8012e14:	f000 ff9a 	bl	8013d4c <dhcp_option>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012e1c:	89bc      	ldrh	r4, [r7, #12]
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	699b      	ldr	r3, [r3, #24]
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7f8 f8be 	bl	800afaa <lwip_htonl>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	461a      	mov	r2, r3
 8012e32:	4629      	mov	r1, r5
 8012e34:	4620      	mov	r0, r4
 8012e36:	f001 f815 	bl	8013e64 <dhcp_option_long>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e3e:	89b8      	ldrh	r0, [r7, #12]
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e46:	2303      	movs	r3, #3
 8012e48:	2237      	movs	r2, #55	; 0x37
 8012e4a:	f000 ff7f 	bl	8013d4c <dhcp_option>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e52:	2300      	movs	r3, #0
 8012e54:	77bb      	strb	r3, [r7, #30]
 8012e56:	e00e      	b.n	8012e76 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012e58:	89b8      	ldrh	r0, [r7, #12]
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e60:	7fbb      	ldrb	r3, [r7, #30]
 8012e62:	4a30      	ldr	r2, [pc, #192]	; (8012f24 <dhcp_select+0x1e4>)
 8012e64:	5cd3      	ldrb	r3, [r2, r3]
 8012e66:	461a      	mov	r2, r3
 8012e68:	f000 ffa4 	bl	8013db4 <dhcp_option_byte>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e70:	7fbb      	ldrb	r3, [r7, #30]
 8012e72:	3301      	adds	r3, #1
 8012e74:	77bb      	strb	r3, [r7, #30]
 8012e76:	7fbb      	ldrb	r3, [r7, #30]
 8012e78:	2b02      	cmp	r3, #2
 8012e7a:	d9ed      	bls.n	8012e58 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e7c:	89b8      	ldrh	r0, [r7, #12]
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	33f0      	adds	r3, #240	; 0xf0
 8012e82:	697a      	ldr	r2, [r7, #20]
 8012e84:	4619      	mov	r1, r3
 8012e86:	f001 fca9 	bl	80147dc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012e8a:	4b27      	ldr	r3, [pc, #156]	; (8012f28 <dhcp_select+0x1e8>)
 8012e8c:	6818      	ldr	r0, [r3, #0]
 8012e8e:	4b27      	ldr	r3, [pc, #156]	; (8012f2c <dhcp_select+0x1ec>)
 8012e90:	9301      	str	r3, [sp, #4]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	9300      	str	r3, [sp, #0]
 8012e96:	2343      	movs	r3, #67	; 0x43
 8012e98:	4a25      	ldr	r2, [pc, #148]	; (8012f30 <dhcp_select+0x1f0>)
 8012e9a:	6979      	ldr	r1, [r7, #20]
 8012e9c:	f7ff fbda 	bl	8012654 <udp_sendto_if_src>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ea4:	6978      	ldr	r0, [r7, #20]
 8012ea6:	f7f9 fc23 	bl	800c6f0 <pbuf_free>
 8012eaa:	e001      	b.n	8012eb0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012eac:	23ff      	movs	r3, #255	; 0xff
 8012eae:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	799b      	ldrb	r3, [r3, #6]
 8012eb4:	2bff      	cmp	r3, #255	; 0xff
 8012eb6:	d005      	beq.n	8012ec4 <dhcp_select+0x184>
    dhcp->tries++;
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	799b      	ldrb	r3, [r3, #6]
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	b2da      	uxtb	r2, r3
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	799b      	ldrb	r3, [r3, #6]
 8012ec8:	2b05      	cmp	r3, #5
 8012eca:	d80d      	bhi.n	8012ee8 <dhcp_select+0x1a8>
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	799b      	ldrb	r3, [r3, #6]
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	4093      	lsls	r3, r2
 8012ed6:	b29b      	uxth	r3, r3
 8012ed8:	461a      	mov	r2, r3
 8012eda:	0152      	lsls	r2, r2, #5
 8012edc:	1ad2      	subs	r2, r2, r3
 8012ede:	0092      	lsls	r2, r2, #2
 8012ee0:	4413      	add	r3, r2
 8012ee2:	00db      	lsls	r3, r3, #3
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	e001      	b.n	8012eec <dhcp_select+0x1ac>
 8012ee8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012eec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012eee:	89fb      	ldrh	r3, [r7, #14]
 8012ef0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ef4:	4a0f      	ldr	r2, [pc, #60]	; (8012f34 <dhcp_select+0x1f4>)
 8012ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8012efa:	1152      	asrs	r2, r2, #5
 8012efc:	17db      	asrs	r3, r3, #31
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012f06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3720      	adds	r7, #32
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bdb0      	pop	{r4, r5, r7, pc}
 8012f12:	bf00      	nop
 8012f14:	0801a68c 	.word	0x0801a68c
 8012f18:	0801a738 	.word	0x0801a738
 8012f1c:	0801a6ec 	.word	0x0801a6ec
 8012f20:	0801a754 	.word	0x0801a754
 8012f24:	2000001c 	.word	0x2000001c
 8012f28:	20004b10 	.word	0x20004b10
 8012f2c:	0801b374 	.word	0x0801b374
 8012f30:	0801b378 	.word	0x0801b378
 8012f34:	10624dd3 	.word	0x10624dd3

08012f38 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012f3e:	4b27      	ldr	r3, [pc, #156]	; (8012fdc <dhcp_coarse_tmr+0xa4>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	607b      	str	r3, [r7, #4]
 8012f44:	e042      	b.n	8012fcc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d039      	beq.n	8012fc6 <dhcp_coarse_tmr+0x8e>
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	795b      	ldrb	r3, [r3, #5]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d035      	beq.n	8012fc6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	8a9b      	ldrh	r3, [r3, #20]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d012      	beq.n	8012f88 <dhcp_coarse_tmr+0x50>
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	8a5b      	ldrh	r3, [r3, #18]
 8012f66:	3301      	adds	r3, #1
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	825a      	strh	r2, [r3, #18]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	8a5a      	ldrh	r2, [r3, #18]
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	8a9b      	ldrh	r3, [r3, #20]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d106      	bne.n	8012f88 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 fe32 	bl	8013be4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 f969 	bl	8013258 <dhcp_start>
 8012f86:	e01e      	b.n	8012fc6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	8a1b      	ldrh	r3, [r3, #16]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00b      	beq.n	8012fa8 <dhcp_coarse_tmr+0x70>
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	8a1b      	ldrh	r3, [r3, #16]
 8012f94:	1e5a      	subs	r2, r3, #1
 8012f96:	b291      	uxth	r1, r2
 8012f98:	683a      	ldr	r2, [r7, #0]
 8012f9a:	8211      	strh	r1, [r2, #16]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d103      	bne.n	8012fa8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f000 f8c6 	bl	8013132 <dhcp_t2_timeout>
 8012fa6:	e00e      	b.n	8012fc6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	89db      	ldrh	r3, [r3, #14]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00a      	beq.n	8012fc6 <dhcp_coarse_tmr+0x8e>
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	89db      	ldrh	r3, [r3, #14]
 8012fb4:	1e5a      	subs	r2, r3, #1
 8012fb6:	b291      	uxth	r1, r2
 8012fb8:	683a      	ldr	r2, [r7, #0]
 8012fba:	81d1      	strh	r1, [r2, #14]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d102      	bne.n	8012fc6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 f888 	bl	80130d6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	607b      	str	r3, [r7, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d1b9      	bne.n	8012f46 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012fd2:	bf00      	nop
 8012fd4:	bf00      	nop
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	2000bb88 	.word	0x2000bb88

08012fe0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012fe6:	4b16      	ldr	r3, [pc, #88]	; (8013040 <dhcp_fine_tmr+0x60>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	607b      	str	r3, [r7, #4]
 8012fec:	e020      	b.n	8013030 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ff2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d017      	beq.n	801302a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	891b      	ldrh	r3, [r3, #8]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d906      	bls.n	8013010 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	891b      	ldrh	r3, [r3, #8]
 8013006:	3b01      	subs	r3, #1
 8013008:	b29a      	uxth	r2, r3
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	811a      	strh	r2, [r3, #8]
 801300e:	e00c      	b.n	801302a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	891b      	ldrh	r3, [r3, #8]
 8013014:	2b01      	cmp	r3, #1
 8013016:	d108      	bne.n	801302a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	891b      	ldrh	r3, [r3, #8]
 801301c:	3b01      	subs	r3, #1
 801301e:	b29a      	uxth	r2, r3
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f000 f80d 	bl	8013044 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	607b      	str	r3, [r7, #4]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d1db      	bne.n	8012fee <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013036:	bf00      	nop
 8013038:	bf00      	nop
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	2000bb88 	.word	0x2000bb88

08013044 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013050:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	795b      	ldrb	r3, [r3, #5]
 8013056:	2b0c      	cmp	r3, #12
 8013058:	d003      	beq.n	8013062 <dhcp_timeout+0x1e>
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	795b      	ldrb	r3, [r3, #5]
 801305e:	2b06      	cmp	r3, #6
 8013060:	d103      	bne.n	801306a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f000 fa54 	bl	8013510 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013068:	e031      	b.n	80130ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	795b      	ldrb	r3, [r3, #5]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d10e      	bne.n	8013090 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	799b      	ldrb	r3, [r3, #6]
 8013076:	2b05      	cmp	r3, #5
 8013078:	d803      	bhi.n	8013082 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7ff fe60 	bl	8012d40 <dhcp_select>
}
 8013080:	e025      	b.n	80130ce <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 fdae 	bl	8013be4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 f8e5 	bl	8013258 <dhcp_start>
}
 801308e:	e01e      	b.n	80130ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	795b      	ldrb	r3, [r3, #5]
 8013094:	2b08      	cmp	r3, #8
 8013096:	d10b      	bne.n	80130b0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	799b      	ldrb	r3, [r3, #6]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d803      	bhi.n	80130a8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7ff fdf3 	bl	8012c8c <dhcp_check>
}
 80130a6:	e012      	b.n	80130ce <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f000 fad3 	bl	8013654 <dhcp_bind>
}
 80130ae:	e00e      	b.n	80130ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	795b      	ldrb	r3, [r3, #5]
 80130b4:	2b03      	cmp	r3, #3
 80130b6:	d10a      	bne.n	80130ce <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	799b      	ldrb	r3, [r3, #6]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d803      	bhi.n	80130c8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f000 fcd9 	bl	8013a78 <dhcp_reboot>
}
 80130c6:	e002      	b.n	80130ce <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 fa21 	bl	8013510 <dhcp_discover>
}
 80130ce:	bf00      	nop
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b084      	sub	sp, #16
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	795b      	ldrb	r3, [r3, #5]
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d007      	beq.n	80130fc <dhcp_t1_timeout+0x26>
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	795b      	ldrb	r3, [r3, #5]
 80130f0:	2b0a      	cmp	r3, #10
 80130f2:	d003      	beq.n	80130fc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130f8:	2b05      	cmp	r3, #5
 80130fa:	d116      	bne.n	801312a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f000 fb83 	bl	8013808 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	899b      	ldrh	r3, [r3, #12]
 8013106:	461a      	mov	r2, r3
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	8a5b      	ldrh	r3, [r3, #18]
 801310c:	1ad3      	subs	r3, r2, r3
 801310e:	2b01      	cmp	r3, #1
 8013110:	dd0b      	ble.n	801312a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	899b      	ldrh	r3, [r3, #12]
 8013116:	461a      	mov	r2, r3
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	8a5b      	ldrh	r3, [r3, #18]
 801311c:	1ad3      	subs	r3, r2, r3
 801311e:	0fda      	lsrs	r2, r3, #31
 8013120:	4413      	add	r3, r2
 8013122:	105b      	asrs	r3, r3, #1
 8013124:	b29a      	uxth	r2, r3
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801312a:	bf00      	nop
 801312c:	3710      	adds	r7, #16
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b084      	sub	sp, #16
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	795b      	ldrb	r3, [r3, #5]
 8013144:	2b01      	cmp	r3, #1
 8013146:	d00b      	beq.n	8013160 <dhcp_t2_timeout+0x2e>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	795b      	ldrb	r3, [r3, #5]
 801314c:	2b0a      	cmp	r3, #10
 801314e:	d007      	beq.n	8013160 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013154:	2b05      	cmp	r3, #5
 8013156:	d003      	beq.n	8013160 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	795b      	ldrb	r3, [r3, #5]
 801315c:	2b04      	cmp	r3, #4
 801315e:	d116      	bne.n	801318e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 fbed 	bl	8013940 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	8a9b      	ldrh	r3, [r3, #20]
 801316a:	461a      	mov	r2, r3
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	8a5b      	ldrh	r3, [r3, #18]
 8013170:	1ad3      	subs	r3, r2, r3
 8013172:	2b01      	cmp	r3, #1
 8013174:	dd0b      	ble.n	801318e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	8a9b      	ldrh	r3, [r3, #20]
 801317a:	461a      	mov	r2, r3
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	8a5b      	ldrh	r3, [r3, #18]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	0fda      	lsrs	r2, r3, #31
 8013184:	4413      	add	r3, r2
 8013186:	105b      	asrs	r3, r3, #1
 8013188:	b29a      	uxth	r2, r3
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801318e:	bf00      	nop
 8013190:	3710      	adds	r7, #16
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
	...

08013198 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2200      	movs	r2, #0
 80131ac:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2200      	movs	r2, #0
 80131b2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80131b4:	4b26      	ldr	r3, [pc, #152]	; (8013250 <dhcp_handle_ack+0xb8>)
 80131b6:	78db      	ldrb	r3, [r3, #3]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d003      	beq.n	80131c4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80131bc:	4b25      	ldr	r3, [pc, #148]	; (8013254 <dhcp_handle_ack+0xbc>)
 80131be:	68da      	ldr	r2, [r3, #12]
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80131c4:	4b22      	ldr	r3, [pc, #136]	; (8013250 <dhcp_handle_ack+0xb8>)
 80131c6:	791b      	ldrb	r3, [r3, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d004      	beq.n	80131d6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80131cc:	4b21      	ldr	r3, [pc, #132]	; (8013254 <dhcp_handle_ack+0xbc>)
 80131ce:	691a      	ldr	r2, [r3, #16]
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80131d4:	e004      	b.n	80131e0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131da:	085a      	lsrs	r2, r3, #1
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80131e0:	4b1b      	ldr	r3, [pc, #108]	; (8013250 <dhcp_handle_ack+0xb8>)
 80131e2:	795b      	ldrb	r3, [r3, #5]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d004      	beq.n	80131f2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80131e8:	4b1a      	ldr	r3, [pc, #104]	; (8013254 <dhcp_handle_ack+0xbc>)
 80131ea:	695a      	ldr	r2, [r3, #20]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	631a      	str	r2, [r3, #48]	; 0x30
 80131f0:	e007      	b.n	8013202 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131f6:	4613      	mov	r3, r2
 80131f8:	00db      	lsls	r3, r3, #3
 80131fa:	1a9b      	subs	r3, r3, r2
 80131fc:	08da      	lsrs	r2, r3, #3
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	691a      	ldr	r2, [r3, #16]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801320a:	4b11      	ldr	r3, [pc, #68]	; (8013250 <dhcp_handle_ack+0xb8>)
 801320c:	799b      	ldrb	r3, [r3, #6]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00b      	beq.n	801322a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013212:	4b10      	ldr	r3, [pc, #64]	; (8013254 <dhcp_handle_ack+0xbc>)
 8013214:	699b      	ldr	r3, [r3, #24]
 8013216:	4618      	mov	r0, r3
 8013218:	f7f7 fec7 	bl	800afaa <lwip_htonl>
 801321c:	4602      	mov	r2, r0
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2201      	movs	r2, #1
 8013226:	71da      	strb	r2, [r3, #7]
 8013228:	e002      	b.n	8013230 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2200      	movs	r2, #0
 801322e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013230:	4b07      	ldr	r3, [pc, #28]	; (8013250 <dhcp_handle_ack+0xb8>)
 8013232:	79db      	ldrb	r3, [r3, #7]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d007      	beq.n	8013248 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013238:	4b06      	ldr	r3, [pc, #24]	; (8013254 <dhcp_handle_ack+0xbc>)
 801323a:	69db      	ldr	r3, [r3, #28]
 801323c:	4618      	mov	r0, r3
 801323e:	f7f7 feb4 	bl	800afaa <lwip_htonl>
 8013242:	4602      	mov	r2, r0
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013248:	bf00      	nop
 801324a:	3710      	adds	r7, #16
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}
 8013250:	2000bbb4 	.word	0x2000bbb4
 8013254:	2000bbbc 	.word	0x2000bbbc

08013258 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d109      	bne.n	801327a <dhcp_start+0x22>
 8013266:	4b37      	ldr	r3, [pc, #220]	; (8013344 <dhcp_start+0xec>)
 8013268:	f240 22e7 	movw	r2, #743	; 0x2e7
 801326c:	4936      	ldr	r1, [pc, #216]	; (8013348 <dhcp_start+0xf0>)
 801326e:	4837      	ldr	r0, [pc, #220]	; (801334c <dhcp_start+0xf4>)
 8013270:	f004 f878 	bl	8017364 <iprintf>
 8013274:	f06f 030f 	mvn.w	r3, #15
 8013278:	e060      	b.n	801333c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013280:	f003 0301 	and.w	r3, r3, #1
 8013284:	2b00      	cmp	r3, #0
 8013286:	d109      	bne.n	801329c <dhcp_start+0x44>
 8013288:	4b2e      	ldr	r3, [pc, #184]	; (8013344 <dhcp_start+0xec>)
 801328a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801328e:	4930      	ldr	r1, [pc, #192]	; (8013350 <dhcp_start+0xf8>)
 8013290:	482e      	ldr	r0, [pc, #184]	; (801334c <dhcp_start+0xf4>)
 8013292:	f004 f867 	bl	8017364 <iprintf>
 8013296:	f06f 030f 	mvn.w	r3, #15
 801329a:	e04f      	b.n	801333c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132a6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80132aa:	d202      	bcs.n	80132b2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80132ac:	f04f 33ff 	mov.w	r3, #4294967295
 80132b0:	e044      	b.n	801333c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d10d      	bne.n	80132d4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80132b8:	2034      	movs	r0, #52	; 0x34
 80132ba:	f7f8 f995 	bl	800b5e8 <mem_malloc>
 80132be:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d102      	bne.n	80132cc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80132c6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ca:	e037      	b.n	801333c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	68fa      	ldr	r2, [r7, #12]
 80132d0:	625a      	str	r2, [r3, #36]	; 0x24
 80132d2:	e005      	b.n	80132e0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	791b      	ldrb	r3, [r3, #4]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d001      	beq.n	80132e0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80132dc:	f7ff fc92 	bl	8012c04 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80132e0:	2234      	movs	r2, #52	; 0x34
 80132e2:	2100      	movs	r1, #0
 80132e4:	68f8      	ldr	r0, [r7, #12]
 80132e6:	f003 ffda 	bl	801729e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80132ea:	f7ff fc39 	bl	8012b60 <dhcp_inc_pcb_refcount>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <dhcp_start+0xa2>
    return ERR_MEM;
 80132f4:	f04f 33ff 	mov.w	r3, #4294967295
 80132f8:	e020      	b.n	801333c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2201      	movs	r2, #1
 80132fe:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013306:	f003 0304 	and.w	r3, r3, #4
 801330a:	2b00      	cmp	r3, #0
 801330c:	d105      	bne.n	801331a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801330e:	2102      	movs	r1, #2
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f000 fd01 	bl	8013d18 <dhcp_set_state>
    return ERR_OK;
 8013316:	2300      	movs	r3, #0
 8013318:	e010      	b.n	801333c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 f8f8 	bl	8013510 <dhcp_discover>
 8013320:	4603      	mov	r3, r0
 8013322:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013324:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d005      	beq.n	8013338 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fc59 	bl	8013be4 <dhcp_release_and_stop>
    return ERR_MEM;
 8013332:	f04f 33ff 	mov.w	r3, #4294967295
 8013336:	e001      	b.n	801333c <dhcp_start+0xe4>
  }
  return result;
 8013338:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3710      	adds	r7, #16
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	0801a68c 	.word	0x0801a68c
 8013348:	0801a770 	.word	0x0801a770
 801334c:	0801a6ec 	.word	0x0801a6ec
 8013350:	0801a7b4 	.word	0x0801a7b4

08013354 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b084      	sub	sp, #16
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013360:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d025      	beq.n	80133b4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	795b      	ldrb	r3, [r3, #5]
 801336c:	2b0a      	cmp	r3, #10
 801336e:	d008      	beq.n	8013382 <dhcp_network_changed+0x2e>
 8013370:	2b0a      	cmp	r3, #10
 8013372:	dc0d      	bgt.n	8013390 <dhcp_network_changed+0x3c>
 8013374:	2b00      	cmp	r3, #0
 8013376:	d01f      	beq.n	80133b8 <dhcp_network_changed+0x64>
 8013378:	2b00      	cmp	r3, #0
 801337a:	db09      	blt.n	8013390 <dhcp_network_changed+0x3c>
 801337c:	3b03      	subs	r3, #3
 801337e:	2b02      	cmp	r3, #2
 8013380:	d806      	bhi.n	8013390 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2200      	movs	r2, #0
 8013386:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 fb75 	bl	8013a78 <dhcp_reboot>
      break;
 801338e:	e014      	b.n	80133ba <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	795b      	ldrb	r3, [r3, #5]
 8013394:	2b0c      	cmp	r3, #12
 8013396:	d906      	bls.n	80133a6 <dhcp_network_changed+0x52>
 8013398:	4b09      	ldr	r3, [pc, #36]	; (80133c0 <dhcp_network_changed+0x6c>)
 801339a:	f240 326d 	movw	r2, #877	; 0x36d
 801339e:	4909      	ldr	r1, [pc, #36]	; (80133c4 <dhcp_network_changed+0x70>)
 80133a0:	4809      	ldr	r0, [pc, #36]	; (80133c8 <dhcp_network_changed+0x74>)
 80133a2:	f003 ffdf 	bl	8017364 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2200      	movs	r2, #0
 80133aa:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 f8af 	bl	8013510 <dhcp_discover>
      break;
 80133b2:	e002      	b.n	80133ba <dhcp_network_changed+0x66>
    return;
 80133b4:	bf00      	nop
 80133b6:	e000      	b.n	80133ba <dhcp_network_changed+0x66>
      break;
 80133b8:	bf00      	nop
  }
}
 80133ba:	3710      	adds	r7, #16
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	0801a68c 	.word	0x0801a68c
 80133c4:	0801a7d8 	.word	0x0801a7d8
 80133c8:	0801a6ec 	.word	0x0801a6ec

080133cc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d107      	bne.n	80133ec <dhcp_arp_reply+0x20>
 80133dc:	4b0e      	ldr	r3, [pc, #56]	; (8013418 <dhcp_arp_reply+0x4c>)
 80133de:	f240 328b 	movw	r2, #907	; 0x38b
 80133e2:	490e      	ldr	r1, [pc, #56]	; (801341c <dhcp_arp_reply+0x50>)
 80133e4:	480e      	ldr	r0, [pc, #56]	; (8013420 <dhcp_arp_reply+0x54>)
 80133e6:	f003 ffbd 	bl	8017364 <iprintf>
 80133ea:	e012      	b.n	8013412 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d00c      	beq.n	8013412 <dhcp_arp_reply+0x46>
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	795b      	ldrb	r3, [r3, #5]
 80133fc:	2b08      	cmp	r3, #8
 80133fe:	d108      	bne.n	8013412 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	69db      	ldr	r3, [r3, #28]
 8013408:	429a      	cmp	r2, r3
 801340a:	d102      	bne.n	8013412 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f000 f809 	bl	8013424 <dhcp_decline>
    }
  }
}
 8013412:	3710      	adds	r7, #16
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	0801a68c 	.word	0x0801a68c
 801341c:	0801a770 	.word	0x0801a770
 8013420:	0801a6ec 	.word	0x0801a6ec

08013424 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013424:	b5b0      	push	{r4, r5, r7, lr}
 8013426:	b08a      	sub	sp, #40	; 0x28
 8013428:	af02      	add	r7, sp, #8
 801342a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013430:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013432:	210c      	movs	r1, #12
 8013434:	69b8      	ldr	r0, [r7, #24]
 8013436:	f000 fc6f 	bl	8013d18 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801343a:	f107 030c 	add.w	r3, r7, #12
 801343e:	2204      	movs	r2, #4
 8013440:	69b9      	ldr	r1, [r7, #24]
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f001 f8f4 	bl	8014630 <dhcp_create_msg>
 8013448:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d035      	beq.n	80134bc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013456:	89b8      	ldrh	r0, [r7, #12]
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801345e:	2304      	movs	r3, #4
 8013460:	2232      	movs	r2, #50	; 0x32
 8013462:	f000 fc73 	bl	8013d4c <dhcp_option>
 8013466:	4603      	mov	r3, r0
 8013468:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801346a:	89bc      	ldrh	r4, [r7, #12]
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	4618      	mov	r0, r3
 8013478:	f7f7 fd97 	bl	800afaa <lwip_htonl>
 801347c:	4603      	mov	r3, r0
 801347e:	461a      	mov	r2, r3
 8013480:	4629      	mov	r1, r5
 8013482:	4620      	mov	r0, r4
 8013484:	f000 fcee 	bl	8013e64 <dhcp_option_long>
 8013488:	4603      	mov	r3, r0
 801348a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801348c:	89b8      	ldrh	r0, [r7, #12]
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	33f0      	adds	r3, #240	; 0xf0
 8013492:	697a      	ldr	r2, [r7, #20]
 8013494:	4619      	mov	r1, r3
 8013496:	f001 f9a1 	bl	80147dc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801349a:	4b19      	ldr	r3, [pc, #100]	; (8013500 <dhcp_decline+0xdc>)
 801349c:	6818      	ldr	r0, [r3, #0]
 801349e:	4b19      	ldr	r3, [pc, #100]	; (8013504 <dhcp_decline+0xe0>)
 80134a0:	9301      	str	r3, [sp, #4]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	2343      	movs	r3, #67	; 0x43
 80134a8:	4a17      	ldr	r2, [pc, #92]	; (8013508 <dhcp_decline+0xe4>)
 80134aa:	6979      	ldr	r1, [r7, #20]
 80134ac:	f7ff f8d2 	bl	8012654 <udp_sendto_if_src>
 80134b0:	4603      	mov	r3, r0
 80134b2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80134b4:	6978      	ldr	r0, [r7, #20]
 80134b6:	f7f9 f91b 	bl	800c6f0 <pbuf_free>
 80134ba:	e001      	b.n	80134c0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80134bc:	23ff      	movs	r3, #255	; 0xff
 80134be:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	799b      	ldrb	r3, [r3, #6]
 80134c4:	2bff      	cmp	r3, #255	; 0xff
 80134c6:	d005      	beq.n	80134d4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	799b      	ldrb	r3, [r3, #6]
 80134cc:	3301      	adds	r3, #1
 80134ce:	b2da      	uxtb	r2, r3
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80134d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80134d8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80134da:	89fb      	ldrh	r3, [r7, #14]
 80134dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80134e0:	4a0a      	ldr	r2, [pc, #40]	; (801350c <dhcp_decline+0xe8>)
 80134e2:	fb82 1203 	smull	r1, r2, r2, r3
 80134e6:	1152      	asrs	r2, r2, #5
 80134e8:	17db      	asrs	r3, r3, #31
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	b29a      	uxth	r2, r3
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80134f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3720      	adds	r7, #32
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bdb0      	pop	{r4, r5, r7, pc}
 80134fe:	bf00      	nop
 8013500:	20004b10 	.word	0x20004b10
 8013504:	0801b374 	.word	0x0801b374
 8013508:	0801b378 	.word	0x0801b378
 801350c:	10624dd3 	.word	0x10624dd3

08013510 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b08a      	sub	sp, #40	; 0x28
 8013514:	af02      	add	r7, sp, #8
 8013516:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801351c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801351e:	2300      	movs	r3, #0
 8013520:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	2200      	movs	r2, #0
 8013526:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013528:	2106      	movs	r1, #6
 801352a:	69b8      	ldr	r0, [r7, #24]
 801352c:	f000 fbf4 	bl	8013d18 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013530:	f107 0308 	add.w	r3, r7, #8
 8013534:	2201      	movs	r2, #1
 8013536:	69b9      	ldr	r1, [r7, #24]
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f001 f879 	bl	8014630 <dhcp_create_msg>
 801353e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d04b      	beq.n	80135de <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801354c:	8938      	ldrh	r0, [r7, #8]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013554:	2302      	movs	r3, #2
 8013556:	2239      	movs	r2, #57	; 0x39
 8013558:	f000 fbf8 	bl	8013d4c <dhcp_option>
 801355c:	4603      	mov	r3, r0
 801355e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013560:	8938      	ldrh	r0, [r7, #8]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801356c:	461a      	mov	r2, r3
 801356e:	f000 fc47 	bl	8013e00 <dhcp_option_short>
 8013572:	4603      	mov	r3, r0
 8013574:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013576:	8938      	ldrh	r0, [r7, #8]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801357e:	2303      	movs	r3, #3
 8013580:	2237      	movs	r2, #55	; 0x37
 8013582:	f000 fbe3 	bl	8013d4c <dhcp_option>
 8013586:	4603      	mov	r3, r0
 8013588:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801358a:	2300      	movs	r3, #0
 801358c:	77fb      	strb	r3, [r7, #31]
 801358e:	e00e      	b.n	80135ae <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013590:	8938      	ldrh	r0, [r7, #8]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013598:	7ffb      	ldrb	r3, [r7, #31]
 801359a:	4a29      	ldr	r2, [pc, #164]	; (8013640 <dhcp_discover+0x130>)
 801359c:	5cd3      	ldrb	r3, [r2, r3]
 801359e:	461a      	mov	r2, r3
 80135a0:	f000 fc08 	bl	8013db4 <dhcp_option_byte>
 80135a4:	4603      	mov	r3, r0
 80135a6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80135a8:	7ffb      	ldrb	r3, [r7, #31]
 80135aa:	3301      	adds	r3, #1
 80135ac:	77fb      	strb	r3, [r7, #31]
 80135ae:	7ffb      	ldrb	r3, [r7, #31]
 80135b0:	2b02      	cmp	r3, #2
 80135b2:	d9ed      	bls.n	8013590 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80135b4:	8938      	ldrh	r0, [r7, #8]
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	33f0      	adds	r3, #240	; 0xf0
 80135ba:	693a      	ldr	r2, [r7, #16]
 80135bc:	4619      	mov	r1, r3
 80135be:	f001 f90d 	bl	80147dc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80135c2:	4b20      	ldr	r3, [pc, #128]	; (8013644 <dhcp_discover+0x134>)
 80135c4:	6818      	ldr	r0, [r3, #0]
 80135c6:	4b20      	ldr	r3, [pc, #128]	; (8013648 <dhcp_discover+0x138>)
 80135c8:	9301      	str	r3, [sp, #4]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	9300      	str	r3, [sp, #0]
 80135ce:	2343      	movs	r3, #67	; 0x43
 80135d0:	4a1e      	ldr	r2, [pc, #120]	; (801364c <dhcp_discover+0x13c>)
 80135d2:	6939      	ldr	r1, [r7, #16]
 80135d4:	f7ff f83e 	bl	8012654 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80135d8:	6938      	ldr	r0, [r7, #16]
 80135da:	f7f9 f889 	bl	800c6f0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	799b      	ldrb	r3, [r3, #6]
 80135e2:	2bff      	cmp	r3, #255	; 0xff
 80135e4:	d005      	beq.n	80135f2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	799b      	ldrb	r3, [r3, #6]
 80135ea:	3301      	adds	r3, #1
 80135ec:	b2da      	uxtb	r2, r3
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	799b      	ldrb	r3, [r3, #6]
 80135f6:	2b05      	cmp	r3, #5
 80135f8:	d80d      	bhi.n	8013616 <dhcp_discover+0x106>
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	799b      	ldrb	r3, [r3, #6]
 80135fe:	461a      	mov	r2, r3
 8013600:	2301      	movs	r3, #1
 8013602:	4093      	lsls	r3, r2
 8013604:	b29b      	uxth	r3, r3
 8013606:	461a      	mov	r2, r3
 8013608:	0152      	lsls	r2, r2, #5
 801360a:	1ad2      	subs	r2, r2, r3
 801360c:	0092      	lsls	r2, r2, #2
 801360e:	4413      	add	r3, r2
 8013610:	00db      	lsls	r3, r3, #3
 8013612:	b29b      	uxth	r3, r3
 8013614:	e001      	b.n	801361a <dhcp_discover+0x10a>
 8013616:	f64e 2360 	movw	r3, #60000	; 0xea60
 801361a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801361c:	897b      	ldrh	r3, [r7, #10]
 801361e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013622:	4a0b      	ldr	r2, [pc, #44]	; (8013650 <dhcp_discover+0x140>)
 8013624:	fb82 1203 	smull	r1, r2, r2, r3
 8013628:	1152      	asrs	r2, r2, #5
 801362a:	17db      	asrs	r3, r3, #31
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	b29a      	uxth	r2, r3
 8013630:	69bb      	ldr	r3, [r7, #24]
 8013632:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3720      	adds	r7, #32
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	2000001c 	.word	0x2000001c
 8013644:	20004b10 	.word	0x20004b10
 8013648:	0801b374 	.word	0x0801b374
 801364c:	0801b378 	.word	0x0801b378
 8013650:	10624dd3 	.word	0x10624dd3

08013654 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b088      	sub	sp, #32
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d107      	bne.n	8013672 <dhcp_bind+0x1e>
 8013662:	4b64      	ldr	r3, [pc, #400]	; (80137f4 <dhcp_bind+0x1a0>)
 8013664:	f240 4215 	movw	r2, #1045	; 0x415
 8013668:	4963      	ldr	r1, [pc, #396]	; (80137f8 <dhcp_bind+0x1a4>)
 801366a:	4864      	ldr	r0, [pc, #400]	; (80137fc <dhcp_bind+0x1a8>)
 801366c:	f003 fe7a 	bl	8017364 <iprintf>
 8013670:	e0bc      	b.n	80137ec <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013676:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d107      	bne.n	801368e <dhcp_bind+0x3a>
 801367e:	4b5d      	ldr	r3, [pc, #372]	; (80137f4 <dhcp_bind+0x1a0>)
 8013680:	f240 4217 	movw	r2, #1047	; 0x417
 8013684:	495e      	ldr	r1, [pc, #376]	; (8013800 <dhcp_bind+0x1ac>)
 8013686:	485d      	ldr	r0, [pc, #372]	; (80137fc <dhcp_bind+0x1a8>)
 8013688:	f003 fe6c 	bl	8017364 <iprintf>
 801368c:	e0ae      	b.n	80137ec <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	2200      	movs	r2, #0
 8013692:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369c:	d019      	beq.n	80136d2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136a2:	331e      	adds	r3, #30
 80136a4:	4a57      	ldr	r2, [pc, #348]	; (8013804 <dhcp_bind+0x1b0>)
 80136a6:	fba2 2303 	umull	r2, r3, r2, r3
 80136aa:	095b      	lsrs	r3, r3, #5
 80136ac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80136ae:	69fb      	ldr	r3, [r7, #28]
 80136b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136b4:	d302      	bcc.n	80136bc <dhcp_bind+0x68>
      timeout = 0xffff;
 80136b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136ba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	b29a      	uxth	r2, r3
 80136c0:	69bb      	ldr	r3, [r7, #24]
 80136c2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80136c4:	69bb      	ldr	r3, [r7, #24]
 80136c6:	8a9b      	ldrh	r3, [r3, #20]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d102      	bne.n	80136d2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	2201      	movs	r2, #1
 80136d0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136da:	d01d      	beq.n	8013718 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136e0:	331e      	adds	r3, #30
 80136e2:	4a48      	ldr	r2, [pc, #288]	; (8013804 <dhcp_bind+0x1b0>)
 80136e4:	fba2 2303 	umull	r2, r3, r2, r3
 80136e8:	095b      	lsrs	r3, r3, #5
 80136ea:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136f2:	d302      	bcc.n	80136fa <dhcp_bind+0xa6>
      timeout = 0xffff;
 80136f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136f8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80136fa:	69fb      	ldr	r3, [r7, #28]
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	895b      	ldrh	r3, [r3, #10]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d102      	bne.n	8013710 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	2201      	movs	r2, #1
 801370e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	895a      	ldrh	r2, [r3, #10]
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013720:	d01d      	beq.n	801375e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013726:	331e      	adds	r3, #30
 8013728:	4a36      	ldr	r2, [pc, #216]	; (8013804 <dhcp_bind+0x1b0>)
 801372a:	fba2 2303 	umull	r2, r3, r2, r3
 801372e:	095b      	lsrs	r3, r3, #5
 8013730:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013738:	d302      	bcc.n	8013740 <dhcp_bind+0xec>
      timeout = 0xffff;
 801373a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801373e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	b29a      	uxth	r2, r3
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	899b      	ldrh	r3, [r3, #12]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d102      	bne.n	8013756 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	2201      	movs	r2, #1
 8013754:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	899a      	ldrh	r2, [r3, #12]
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	895a      	ldrh	r2, [r3, #10]
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	899b      	ldrh	r3, [r3, #12]
 8013766:	429a      	cmp	r2, r3
 8013768:	d306      	bcc.n	8013778 <dhcp_bind+0x124>
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	899b      	ldrh	r3, [r3, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d002      	beq.n	8013778 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	2200      	movs	r2, #0
 8013776:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	79db      	ldrb	r3, [r3, #7]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d003      	beq.n	8013788 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	6a1b      	ldr	r3, [r3, #32]
 8013784:	613b      	str	r3, [r7, #16]
 8013786:	e014      	b.n	80137b2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	331c      	adds	r3, #28
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013794:	2b00      	cmp	r3, #0
 8013796:	db02      	blt.n	801379e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013798:	23ff      	movs	r3, #255	; 0xff
 801379a:	613b      	str	r3, [r7, #16]
 801379c:	e009      	b.n	80137b2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801379e:	7dfb      	ldrb	r3, [r7, #23]
 80137a0:	2bbf      	cmp	r3, #191	; 0xbf
 80137a2:	d903      	bls.n	80137ac <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80137a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80137a8:	613b      	str	r3, [r7, #16]
 80137aa:	e002      	b.n	80137b2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80137ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137b0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80137b2:	69bb      	ldr	r3, [r7, #24]
 80137b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d108      	bne.n	80137d0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80137be:	69bb      	ldr	r3, [r7, #24]
 80137c0:	69da      	ldr	r2, [r3, #28]
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	4013      	ands	r3, r2
 80137c6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80137d0:	210a      	movs	r1, #10
 80137d2:	69b8      	ldr	r0, [r7, #24]
 80137d4:	f000 faa0 	bl	8013d18 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	f103 011c 	add.w	r1, r3, #28
 80137de:	f107 030c 	add.w	r3, r7, #12
 80137e2:	f107 0210 	add.w	r2, r7, #16
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f7f8 fa74 	bl	800bcd4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80137ec:	3720      	adds	r7, #32
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	0801a68c 	.word	0x0801a68c
 80137f8:	0801a7ec 	.word	0x0801a7ec
 80137fc:	0801a6ec 	.word	0x0801a6ec
 8013800:	0801a808 	.word	0x0801a808
 8013804:	88888889 	.word	0x88888889

08013808 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08a      	sub	sp, #40	; 0x28
 801380c:	af02      	add	r7, sp, #8
 801380e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013814:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013816:	2105      	movs	r1, #5
 8013818:	69b8      	ldr	r0, [r7, #24]
 801381a:	f000 fa7d 	bl	8013d18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801381e:	f107 030c 	add.w	r3, r7, #12
 8013822:	2203      	movs	r2, #3
 8013824:	69b9      	ldr	r1, [r7, #24]
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f000 ff02 	bl	8014630 <dhcp_create_msg>
 801382c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d04e      	beq.n	80138d2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801383a:	89b8      	ldrh	r0, [r7, #12]
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013842:	2302      	movs	r3, #2
 8013844:	2239      	movs	r2, #57	; 0x39
 8013846:	f000 fa81 	bl	8013d4c <dhcp_option>
 801384a:	4603      	mov	r3, r0
 801384c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801384e:	89b8      	ldrh	r0, [r7, #12]
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801385a:	461a      	mov	r2, r3
 801385c:	f000 fad0 	bl	8013e00 <dhcp_option_short>
 8013860:	4603      	mov	r3, r0
 8013862:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013864:	89b8      	ldrh	r0, [r7, #12]
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801386c:	2303      	movs	r3, #3
 801386e:	2237      	movs	r2, #55	; 0x37
 8013870:	f000 fa6c 	bl	8013d4c <dhcp_option>
 8013874:	4603      	mov	r3, r0
 8013876:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013878:	2300      	movs	r3, #0
 801387a:	77bb      	strb	r3, [r7, #30]
 801387c:	e00e      	b.n	801389c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801387e:	89b8      	ldrh	r0, [r7, #12]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013886:	7fbb      	ldrb	r3, [r7, #30]
 8013888:	4a2a      	ldr	r2, [pc, #168]	; (8013934 <dhcp_renew+0x12c>)
 801388a:	5cd3      	ldrb	r3, [r2, r3]
 801388c:	461a      	mov	r2, r3
 801388e:	f000 fa91 	bl	8013db4 <dhcp_option_byte>
 8013892:	4603      	mov	r3, r0
 8013894:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013896:	7fbb      	ldrb	r3, [r7, #30]
 8013898:	3301      	adds	r3, #1
 801389a:	77bb      	strb	r3, [r7, #30]
 801389c:	7fbb      	ldrb	r3, [r7, #30]
 801389e:	2b02      	cmp	r3, #2
 80138a0:	d9ed      	bls.n	801387e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138a2:	89b8      	ldrh	r0, [r7, #12]
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	33f0      	adds	r3, #240	; 0xf0
 80138a8:	697a      	ldr	r2, [r7, #20]
 80138aa:	4619      	mov	r1, r3
 80138ac:	f000 ff96 	bl	80147dc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138b0:	4b21      	ldr	r3, [pc, #132]	; (8013938 <dhcp_renew+0x130>)
 80138b2:	6818      	ldr	r0, [r3, #0]
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	f103 0218 	add.w	r2, r3, #24
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	2343      	movs	r3, #67	; 0x43
 80138c0:	6979      	ldr	r1, [r7, #20]
 80138c2:	f7fe fe53 	bl	801256c <udp_sendto_if>
 80138c6:	4603      	mov	r3, r0
 80138c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80138ca:	6978      	ldr	r0, [r7, #20]
 80138cc:	f7f8 ff10 	bl	800c6f0 <pbuf_free>
 80138d0:	e001      	b.n	80138d6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80138d2:	23ff      	movs	r3, #255	; 0xff
 80138d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	799b      	ldrb	r3, [r3, #6]
 80138da:	2bff      	cmp	r3, #255	; 0xff
 80138dc:	d005      	beq.n	80138ea <dhcp_renew+0xe2>
    dhcp->tries++;
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	799b      	ldrb	r3, [r3, #6]
 80138e2:	3301      	adds	r3, #1
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	799b      	ldrb	r3, [r3, #6]
 80138ee:	2b09      	cmp	r3, #9
 80138f0:	d80a      	bhi.n	8013908 <dhcp_renew+0x100>
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	799b      	ldrb	r3, [r3, #6]
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	461a      	mov	r2, r3
 80138fa:	0152      	lsls	r2, r2, #5
 80138fc:	1ad2      	subs	r2, r2, r3
 80138fe:	0092      	lsls	r2, r2, #2
 8013900:	4413      	add	r3, r2
 8013902:	011b      	lsls	r3, r3, #4
 8013904:	b29b      	uxth	r3, r3
 8013906:	e001      	b.n	801390c <dhcp_renew+0x104>
 8013908:	f644 6320 	movw	r3, #20000	; 0x4e20
 801390c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801390e:	89fb      	ldrh	r3, [r7, #14]
 8013910:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013914:	4a09      	ldr	r2, [pc, #36]	; (801393c <dhcp_renew+0x134>)
 8013916:	fb82 1203 	smull	r1, r2, r2, r3
 801391a:	1152      	asrs	r2, r2, #5
 801391c:	17db      	asrs	r3, r3, #31
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	b29a      	uxth	r2, r3
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013926:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801392a:	4618      	mov	r0, r3
 801392c:	3720      	adds	r7, #32
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	2000001c 	.word	0x2000001c
 8013938:	20004b10 	.word	0x20004b10
 801393c:	10624dd3 	.word	0x10624dd3

08013940 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b08a      	sub	sp, #40	; 0x28
 8013944:	af02      	add	r7, sp, #8
 8013946:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801394c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801394e:	2104      	movs	r1, #4
 8013950:	69b8      	ldr	r0, [r7, #24]
 8013952:	f000 f9e1 	bl	8013d18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013956:	f107 030c 	add.w	r3, r7, #12
 801395a:	2203      	movs	r2, #3
 801395c:	69b9      	ldr	r1, [r7, #24]
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 fe66 	bl	8014630 <dhcp_create_msg>
 8013964:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d04c      	beq.n	8013a06 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013972:	89b8      	ldrh	r0, [r7, #12]
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801397a:	2302      	movs	r3, #2
 801397c:	2239      	movs	r2, #57	; 0x39
 801397e:	f000 f9e5 	bl	8013d4c <dhcp_option>
 8013982:	4603      	mov	r3, r0
 8013984:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013986:	89b8      	ldrh	r0, [r7, #12]
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013992:	461a      	mov	r2, r3
 8013994:	f000 fa34 	bl	8013e00 <dhcp_option_short>
 8013998:	4603      	mov	r3, r0
 801399a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801399c:	89b8      	ldrh	r0, [r7, #12]
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139a4:	2303      	movs	r3, #3
 80139a6:	2237      	movs	r2, #55	; 0x37
 80139a8:	f000 f9d0 	bl	8013d4c <dhcp_option>
 80139ac:	4603      	mov	r3, r0
 80139ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80139b0:	2300      	movs	r3, #0
 80139b2:	77bb      	strb	r3, [r7, #30]
 80139b4:	e00e      	b.n	80139d4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80139b6:	89b8      	ldrh	r0, [r7, #12]
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139be:	7fbb      	ldrb	r3, [r7, #30]
 80139c0:	4a29      	ldr	r2, [pc, #164]	; (8013a68 <dhcp_rebind+0x128>)
 80139c2:	5cd3      	ldrb	r3, [r2, r3]
 80139c4:	461a      	mov	r2, r3
 80139c6:	f000 f9f5 	bl	8013db4 <dhcp_option_byte>
 80139ca:	4603      	mov	r3, r0
 80139cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80139ce:	7fbb      	ldrb	r3, [r7, #30]
 80139d0:	3301      	adds	r3, #1
 80139d2:	77bb      	strb	r3, [r7, #30]
 80139d4:	7fbb      	ldrb	r3, [r7, #30]
 80139d6:	2b02      	cmp	r3, #2
 80139d8:	d9ed      	bls.n	80139b6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80139da:	89b8      	ldrh	r0, [r7, #12]
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	33f0      	adds	r3, #240	; 0xf0
 80139e0:	697a      	ldr	r2, [r7, #20]
 80139e2:	4619      	mov	r1, r3
 80139e4:	f000 fefa 	bl	80147dc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80139e8:	4b20      	ldr	r3, [pc, #128]	; (8013a6c <dhcp_rebind+0x12c>)
 80139ea:	6818      	ldr	r0, [r3, #0]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	9300      	str	r3, [sp, #0]
 80139f0:	2343      	movs	r3, #67	; 0x43
 80139f2:	4a1f      	ldr	r2, [pc, #124]	; (8013a70 <dhcp_rebind+0x130>)
 80139f4:	6979      	ldr	r1, [r7, #20]
 80139f6:	f7fe fdb9 	bl	801256c <udp_sendto_if>
 80139fa:	4603      	mov	r3, r0
 80139fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80139fe:	6978      	ldr	r0, [r7, #20]
 8013a00:	f7f8 fe76 	bl	800c6f0 <pbuf_free>
 8013a04:	e001      	b.n	8013a0a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013a06:	23ff      	movs	r3, #255	; 0xff
 8013a08:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	799b      	ldrb	r3, [r3, #6]
 8013a0e:	2bff      	cmp	r3, #255	; 0xff
 8013a10:	d005      	beq.n	8013a1e <dhcp_rebind+0xde>
    dhcp->tries++;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	799b      	ldrb	r3, [r3, #6]
 8013a16:	3301      	adds	r3, #1
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	799b      	ldrb	r3, [r3, #6]
 8013a22:	2b09      	cmp	r3, #9
 8013a24:	d80a      	bhi.n	8013a3c <dhcp_rebind+0xfc>
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	799b      	ldrb	r3, [r3, #6]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	0152      	lsls	r2, r2, #5
 8013a30:	1ad2      	subs	r2, r2, r3
 8013a32:	0092      	lsls	r2, r2, #2
 8013a34:	4413      	add	r3, r2
 8013a36:	00db      	lsls	r3, r3, #3
 8013a38:	b29b      	uxth	r3, r3
 8013a3a:	e001      	b.n	8013a40 <dhcp_rebind+0x100>
 8013a3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013a40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013a42:	89fb      	ldrh	r3, [r7, #14]
 8013a44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013a48:	4a0a      	ldr	r2, [pc, #40]	; (8013a74 <dhcp_rebind+0x134>)
 8013a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8013a4e:	1152      	asrs	r2, r2, #5
 8013a50:	17db      	asrs	r3, r3, #31
 8013a52:	1ad3      	subs	r3, r2, r3
 8013a54:	b29a      	uxth	r2, r3
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013a5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3720      	adds	r7, #32
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	2000001c 	.word	0x2000001c
 8013a6c:	20004b10 	.word	0x20004b10
 8013a70:	0801b378 	.word	0x0801b378
 8013a74:	10624dd3 	.word	0x10624dd3

08013a78 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013a78:	b5b0      	push	{r4, r5, r7, lr}
 8013a7a:	b08a      	sub	sp, #40	; 0x28
 8013a7c:	af02      	add	r7, sp, #8
 8013a7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a84:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013a86:	2103      	movs	r1, #3
 8013a88:	69b8      	ldr	r0, [r7, #24]
 8013a8a:	f000 f945 	bl	8013d18 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013a8e:	f107 030c 	add.w	r3, r7, #12
 8013a92:	2203      	movs	r2, #3
 8013a94:	69b9      	ldr	r1, [r7, #24]
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f000 fdca 	bl	8014630 <dhcp_create_msg>
 8013a9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d066      	beq.n	8013b72 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013aaa:	89b8      	ldrh	r0, [r7, #12]
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ab2:	2302      	movs	r3, #2
 8013ab4:	2239      	movs	r2, #57	; 0x39
 8013ab6:	f000 f949 	bl	8013d4c <dhcp_option>
 8013aba:	4603      	mov	r3, r0
 8013abc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013abe:	89b8      	ldrh	r0, [r7, #12]
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	33f0      	adds	r3, #240	; 0xf0
 8013ac4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013ac8:	4619      	mov	r1, r3
 8013aca:	f000 f999 	bl	8013e00 <dhcp_option_short>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013ad2:	89b8      	ldrh	r0, [r7, #12]
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ada:	2304      	movs	r3, #4
 8013adc:	2232      	movs	r2, #50	; 0x32
 8013ade:	f000 f935 	bl	8013d4c <dhcp_option>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013ae6:	89bc      	ldrh	r4, [r7, #12]
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	69db      	ldr	r3, [r3, #28]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7f7 fa59 	bl	800afaa <lwip_htonl>
 8013af8:	4603      	mov	r3, r0
 8013afa:	461a      	mov	r2, r3
 8013afc:	4629      	mov	r1, r5
 8013afe:	4620      	mov	r0, r4
 8013b00:	f000 f9b0 	bl	8013e64 <dhcp_option_long>
 8013b04:	4603      	mov	r3, r0
 8013b06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013b08:	89b8      	ldrh	r0, [r7, #12]
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b10:	2303      	movs	r3, #3
 8013b12:	2237      	movs	r2, #55	; 0x37
 8013b14:	f000 f91a 	bl	8013d4c <dhcp_option>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	77bb      	strb	r3, [r7, #30]
 8013b20:	e00e      	b.n	8013b40 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013b22:	89b8      	ldrh	r0, [r7, #12]
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b2a:	7fbb      	ldrb	r3, [r7, #30]
 8013b2c:	4a29      	ldr	r2, [pc, #164]	; (8013bd4 <dhcp_reboot+0x15c>)
 8013b2e:	5cd3      	ldrb	r3, [r2, r3]
 8013b30:	461a      	mov	r2, r3
 8013b32:	f000 f93f 	bl	8013db4 <dhcp_option_byte>
 8013b36:	4603      	mov	r3, r0
 8013b38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b3a:	7fbb      	ldrb	r3, [r7, #30]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	77bb      	strb	r3, [r7, #30]
 8013b40:	7fbb      	ldrb	r3, [r7, #30]
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	d9ed      	bls.n	8013b22 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013b46:	89b8      	ldrh	r0, [r7, #12]
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	33f0      	adds	r3, #240	; 0xf0
 8013b4c:	697a      	ldr	r2, [r7, #20]
 8013b4e:	4619      	mov	r1, r3
 8013b50:	f000 fe44 	bl	80147dc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013b54:	4b20      	ldr	r3, [pc, #128]	; (8013bd8 <dhcp_reboot+0x160>)
 8013b56:	6818      	ldr	r0, [r3, #0]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	2343      	movs	r3, #67	; 0x43
 8013b5e:	4a1f      	ldr	r2, [pc, #124]	; (8013bdc <dhcp_reboot+0x164>)
 8013b60:	6979      	ldr	r1, [r7, #20]
 8013b62:	f7fe fd03 	bl	801256c <udp_sendto_if>
 8013b66:	4603      	mov	r3, r0
 8013b68:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013b6a:	6978      	ldr	r0, [r7, #20]
 8013b6c:	f7f8 fdc0 	bl	800c6f0 <pbuf_free>
 8013b70:	e001      	b.n	8013b76 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013b72:	23ff      	movs	r3, #255	; 0xff
 8013b74:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013b76:	69bb      	ldr	r3, [r7, #24]
 8013b78:	799b      	ldrb	r3, [r3, #6]
 8013b7a:	2bff      	cmp	r3, #255	; 0xff
 8013b7c:	d005      	beq.n	8013b8a <dhcp_reboot+0x112>
    dhcp->tries++;
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	799b      	ldrb	r3, [r3, #6]
 8013b82:	3301      	adds	r3, #1
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	799b      	ldrb	r3, [r3, #6]
 8013b8e:	2b09      	cmp	r3, #9
 8013b90:	d80a      	bhi.n	8013ba8 <dhcp_reboot+0x130>
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	799b      	ldrb	r3, [r3, #6]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	461a      	mov	r2, r3
 8013b9a:	0152      	lsls	r2, r2, #5
 8013b9c:	1ad2      	subs	r2, r2, r3
 8013b9e:	0092      	lsls	r2, r2, #2
 8013ba0:	4413      	add	r3, r2
 8013ba2:	00db      	lsls	r3, r3, #3
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	e001      	b.n	8013bac <dhcp_reboot+0x134>
 8013ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 8013bac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013bae:	89fb      	ldrh	r3, [r7, #14]
 8013bb0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013bb4:	4a0a      	ldr	r2, [pc, #40]	; (8013be0 <dhcp_reboot+0x168>)
 8013bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8013bba:	1152      	asrs	r2, r2, #5
 8013bbc:	17db      	asrs	r3, r3, #31
 8013bbe:	1ad3      	subs	r3, r2, r3
 8013bc0:	b29a      	uxth	r2, r3
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3720      	adds	r7, #32
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	2000001c 	.word	0x2000001c
 8013bd8:	20004b10 	.word	0x20004b10
 8013bdc:	0801b378 	.word	0x0801b378
 8013be0:	10624dd3 	.word	0x10624dd3

08013be4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013be4:	b5b0      	push	{r4, r5, r7, lr}
 8013be6:	b08a      	sub	sp, #40	; 0x28
 8013be8:	af02      	add	r7, sp, #8
 8013bea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	f000 8084 	beq.w	8013d02 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	795b      	ldrb	r3, [r3, #5]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	f000 8081 	beq.w	8013d06 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	699b      	ldr	r3, [r3, #24]
 8013c08:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013c10:	69fb      	ldr	r3, [r7, #28]
 8013c12:	2200      	movs	r2, #0
 8013c14:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013c16:	69fb      	ldr	r3, [r7, #28]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	2200      	movs	r2, #0
 8013c26:	631a      	str	r2, [r3, #48]	; 0x30
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c34:	69fb      	ldr	r3, [r7, #28]
 8013c36:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013c38:	69fb      	ldr	r3, [r7, #28]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	829a      	strh	r2, [r3, #20]
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	8a9a      	ldrh	r2, [r3, #20]
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	825a      	strh	r2, [r3, #18]
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	8a5a      	ldrh	r2, [r3, #18]
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	821a      	strh	r2, [r3, #16]
 8013c4e:	69fb      	ldr	r3, [r7, #28]
 8013c50:	8a1a      	ldrh	r2, [r3, #16]
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 fdee 	bl	8014838 <dhcp_supplied_address>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d03b      	beq.n	8013cda <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013c62:	f107 030e 	add.w	r3, r7, #14
 8013c66:	2207      	movs	r2, #7
 8013c68:	69f9      	ldr	r1, [r7, #28]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 fce0 	bl	8014630 <dhcp_create_msg>
 8013c70:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d030      	beq.n	8013cda <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013c78:	69bb      	ldr	r3, [r7, #24]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013c7e:	89f8      	ldrh	r0, [r7, #14]
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c86:	2304      	movs	r3, #4
 8013c88:	2236      	movs	r2, #54	; 0x36
 8013c8a:	f000 f85f 	bl	8013d4c <dhcp_option>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013c92:	89fc      	ldrh	r4, [r7, #14]
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7f7 f984 	bl	800afaa <lwip_htonl>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f000 f8db 	bl	8013e64 <dhcp_option_long>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013cb2:	89f8      	ldrh	r0, [r7, #14]
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	33f0      	adds	r3, #240	; 0xf0
 8013cb8:	69ba      	ldr	r2, [r7, #24]
 8013cba:	4619      	mov	r1, r3
 8013cbc:	f000 fd8e 	bl	80147dc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013cc0:	4b13      	ldr	r3, [pc, #76]	; (8013d10 <dhcp_release_and_stop+0x12c>)
 8013cc2:	6818      	ldr	r0, [r3, #0]
 8013cc4:	f107 0210 	add.w	r2, r7, #16
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	2343      	movs	r3, #67	; 0x43
 8013cce:	69b9      	ldr	r1, [r7, #24]
 8013cd0:	f7fe fc4c 	bl	801256c <udp_sendto_if>
      pbuf_free(p_out);
 8013cd4:	69b8      	ldr	r0, [r7, #24]
 8013cd6:	f7f8 fd0b 	bl	800c6f0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013cda:	4b0e      	ldr	r3, [pc, #56]	; (8013d14 <dhcp_release_and_stop+0x130>)
 8013cdc:	4a0d      	ldr	r2, [pc, #52]	; (8013d14 <dhcp_release_and_stop+0x130>)
 8013cde:	490d      	ldr	r1, [pc, #52]	; (8013d14 <dhcp_release_and_stop+0x130>)
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7f7 fff7 	bl	800bcd4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	69f8      	ldr	r0, [r7, #28]
 8013cea:	f000 f815 	bl	8013d18 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	791b      	ldrb	r3, [r3, #4]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d008      	beq.n	8013d08 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013cf6:	f7fe ff85 	bl	8012c04 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	711a      	strb	r2, [r3, #4]
 8013d00:	e002      	b.n	8013d08 <dhcp_release_and_stop+0x124>
    return;
 8013d02:	bf00      	nop
 8013d04:	e000      	b.n	8013d08 <dhcp_release_and_stop+0x124>
    return;
 8013d06:	bf00      	nop
  }
}
 8013d08:	3720      	adds	r7, #32
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	20004b10 	.word	0x20004b10
 8013d14:	0801b374 	.word	0x0801b374

08013d18 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	460b      	mov	r3, r1
 8013d22:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	795b      	ldrb	r3, [r3, #5]
 8013d28:	78fa      	ldrb	r2, [r7, #3]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d008      	beq.n	8013d40 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	78fa      	ldrb	r2, [r7, #3]
 8013d32:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	811a      	strh	r2, [r3, #8]
  }
}
 8013d40:	bf00      	nop
 8013d42:	370c      	adds	r7, #12
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr

08013d4c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6039      	str	r1, [r7, #0]
 8013d54:	4611      	mov	r1, r2
 8013d56:	461a      	mov	r2, r3
 8013d58:	4603      	mov	r3, r0
 8013d5a:	80fb      	strh	r3, [r7, #6]
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	717b      	strb	r3, [r7, #5]
 8013d60:	4613      	mov	r3, r2
 8013d62:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013d64:	88fa      	ldrh	r2, [r7, #6]
 8013d66:	793b      	ldrb	r3, [r7, #4]
 8013d68:	4413      	add	r3, r2
 8013d6a:	3302      	adds	r3, #2
 8013d6c:	2b44      	cmp	r3, #68	; 0x44
 8013d6e:	d906      	bls.n	8013d7e <dhcp_option+0x32>
 8013d70:	4b0d      	ldr	r3, [pc, #52]	; (8013da8 <dhcp_option+0x5c>)
 8013d72:	f240 529a 	movw	r2, #1434	; 0x59a
 8013d76:	490d      	ldr	r1, [pc, #52]	; (8013dac <dhcp_option+0x60>)
 8013d78:	480d      	ldr	r0, [pc, #52]	; (8013db0 <dhcp_option+0x64>)
 8013d7a:	f003 faf3 	bl	8017364 <iprintf>
  options[options_out_len++] = option_type;
 8013d7e:	88fb      	ldrh	r3, [r7, #6]
 8013d80:	1c5a      	adds	r2, r3, #1
 8013d82:	80fa      	strh	r2, [r7, #6]
 8013d84:	461a      	mov	r2, r3
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	4413      	add	r3, r2
 8013d8a:	797a      	ldrb	r2, [r7, #5]
 8013d8c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013d8e:	88fb      	ldrh	r3, [r7, #6]
 8013d90:	1c5a      	adds	r2, r3, #1
 8013d92:	80fa      	strh	r2, [r7, #6]
 8013d94:	461a      	mov	r2, r3
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	4413      	add	r3, r2
 8013d9a:	793a      	ldrb	r2, [r7, #4]
 8013d9c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d9e:	88fb      	ldrh	r3, [r7, #6]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	0801a68c 	.word	0x0801a68c
 8013dac:	0801a820 	.word	0x0801a820
 8013db0:	0801a6ec 	.word	0x0801a6ec

08013db4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	4603      	mov	r3, r0
 8013dbc:	6039      	str	r1, [r7, #0]
 8013dbe:	80fb      	strh	r3, [r7, #6]
 8013dc0:	4613      	mov	r3, r2
 8013dc2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013dc4:	88fb      	ldrh	r3, [r7, #6]
 8013dc6:	2b43      	cmp	r3, #67	; 0x43
 8013dc8:	d906      	bls.n	8013dd8 <dhcp_option_byte+0x24>
 8013dca:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <dhcp_option_byte+0x40>)
 8013dcc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013dd0:	4909      	ldr	r1, [pc, #36]	; (8013df8 <dhcp_option_byte+0x44>)
 8013dd2:	480a      	ldr	r0, [pc, #40]	; (8013dfc <dhcp_option_byte+0x48>)
 8013dd4:	f003 fac6 	bl	8017364 <iprintf>
  options[options_out_len++] = value;
 8013dd8:	88fb      	ldrh	r3, [r7, #6]
 8013dda:	1c5a      	adds	r2, r3, #1
 8013ddc:	80fa      	strh	r2, [r7, #6]
 8013dde:	461a      	mov	r2, r3
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	4413      	add	r3, r2
 8013de4:	797a      	ldrb	r2, [r7, #5]
 8013de6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013de8:	88fb      	ldrh	r3, [r7, #6]
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3708      	adds	r7, #8
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	0801a68c 	.word	0x0801a68c
 8013df8:	0801a864 	.word	0x0801a864
 8013dfc:	0801a6ec 	.word	0x0801a6ec

08013e00 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	4603      	mov	r3, r0
 8013e08:	6039      	str	r1, [r7, #0]
 8013e0a:	80fb      	strh	r3, [r7, #6]
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013e10:	88fb      	ldrh	r3, [r7, #6]
 8013e12:	3302      	adds	r3, #2
 8013e14:	2b44      	cmp	r3, #68	; 0x44
 8013e16:	d906      	bls.n	8013e26 <dhcp_option_short+0x26>
 8013e18:	4b0f      	ldr	r3, [pc, #60]	; (8013e58 <dhcp_option_short+0x58>)
 8013e1a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013e1e:	490f      	ldr	r1, [pc, #60]	; (8013e5c <dhcp_option_short+0x5c>)
 8013e20:	480f      	ldr	r0, [pc, #60]	; (8013e60 <dhcp_option_short+0x60>)
 8013e22:	f003 fa9f 	bl	8017364 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013e26:	88bb      	ldrh	r3, [r7, #4]
 8013e28:	0a1b      	lsrs	r3, r3, #8
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	88fb      	ldrh	r3, [r7, #6]
 8013e2e:	1c59      	adds	r1, r3, #1
 8013e30:	80f9      	strh	r1, [r7, #6]
 8013e32:	4619      	mov	r1, r3
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	440b      	add	r3, r1
 8013e38:	b2d2      	uxtb	r2, r2
 8013e3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013e3c:	88fb      	ldrh	r3, [r7, #6]
 8013e3e:	1c5a      	adds	r2, r3, #1
 8013e40:	80fa      	strh	r2, [r7, #6]
 8013e42:	461a      	mov	r2, r3
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	4413      	add	r3, r2
 8013e48:	88ba      	ldrh	r2, [r7, #4]
 8013e4a:	b2d2      	uxtb	r2, r2
 8013e4c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013e4e:	88fb      	ldrh	r3, [r7, #6]
}
 8013e50:	4618      	mov	r0, r3
 8013e52:	3708      	adds	r7, #8
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}
 8013e58:	0801a68c 	.word	0x0801a68c
 8013e5c:	0801a89c 	.word	0x0801a89c
 8013e60:	0801a6ec 	.word	0x0801a6ec

08013e64 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b084      	sub	sp, #16
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	607a      	str	r2, [r7, #4]
 8013e70:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013e72:	89fb      	ldrh	r3, [r7, #14]
 8013e74:	3304      	adds	r3, #4
 8013e76:	2b44      	cmp	r3, #68	; 0x44
 8013e78:	d906      	bls.n	8013e88 <dhcp_option_long+0x24>
 8013e7a:	4b19      	ldr	r3, [pc, #100]	; (8013ee0 <dhcp_option_long+0x7c>)
 8013e7c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013e80:	4918      	ldr	r1, [pc, #96]	; (8013ee4 <dhcp_option_long+0x80>)
 8013e82:	4819      	ldr	r0, [pc, #100]	; (8013ee8 <dhcp_option_long+0x84>)
 8013e84:	f003 fa6e 	bl	8017364 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	0e1a      	lsrs	r2, r3, #24
 8013e8c:	89fb      	ldrh	r3, [r7, #14]
 8013e8e:	1c59      	adds	r1, r3, #1
 8013e90:	81f9      	strh	r1, [r7, #14]
 8013e92:	4619      	mov	r1, r3
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	440b      	add	r3, r1
 8013e98:	b2d2      	uxtb	r2, r2
 8013e9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	0c1a      	lsrs	r2, r3, #16
 8013ea0:	89fb      	ldrh	r3, [r7, #14]
 8013ea2:	1c59      	adds	r1, r3, #1
 8013ea4:	81f9      	strh	r1, [r7, #14]
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	440b      	add	r3, r1
 8013eac:	b2d2      	uxtb	r2, r2
 8013eae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	0a1a      	lsrs	r2, r3, #8
 8013eb4:	89fb      	ldrh	r3, [r7, #14]
 8013eb6:	1c59      	adds	r1, r3, #1
 8013eb8:	81f9      	strh	r1, [r7, #14]
 8013eba:	4619      	mov	r1, r3
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	440b      	add	r3, r1
 8013ec0:	b2d2      	uxtb	r2, r2
 8013ec2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013ec4:	89fb      	ldrh	r3, [r7, #14]
 8013ec6:	1c5a      	adds	r2, r3, #1
 8013ec8:	81fa      	strh	r2, [r7, #14]
 8013eca:	461a      	mov	r2, r3
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	4413      	add	r3, r2
 8013ed0:	687a      	ldr	r2, [r7, #4]
 8013ed2:	b2d2      	uxtb	r2, r2
 8013ed4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013ed6:	89fb      	ldrh	r3, [r7, #14]
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3710      	adds	r7, #16
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	0801a68c 	.word	0x0801a68c
 8013ee4:	0801a8d8 	.word	0x0801a8d8
 8013ee8:	0801a6ec 	.word	0x0801a6ec

08013eec <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b090      	sub	sp, #64	; 0x40
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013efa:	2300      	movs	r3, #0
 8013efc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013efe:	2208      	movs	r2, #8
 8013f00:	2100      	movs	r1, #0
 8013f02:	48be      	ldr	r0, [pc, #760]	; (80141fc <dhcp_parse_reply+0x310>)
 8013f04:	f003 f9cb 	bl	801729e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	895b      	ldrh	r3, [r3, #10]
 8013f0c:	2b2b      	cmp	r3, #43	; 0x2b
 8013f0e:	d802      	bhi.n	8013f16 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013f10:	f06f 0301 	mvn.w	r3, #1
 8013f14:	e2a8      	b.n	8014468 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013f1c:	23f0      	movs	r3, #240	; 0xf0
 8013f1e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	891b      	ldrh	r3, [r3, #8]
 8013f24:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f2a:	e00c      	b.n	8013f46 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2e:	895b      	ldrh	r3, [r3, #10]
 8013f30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f38:	895b      	ldrh	r3, [r3, #10]
 8013f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013f3c:	1ad3      	subs	r3, r2, r3
 8013f3e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d004      	beq.n	8013f56 <dhcp_parse_reply+0x6a>
 8013f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4e:	895b      	ldrh	r3, [r3, #10]
 8013f50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d2ea      	bcs.n	8013f2c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d102      	bne.n	8013f62 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013f5c:	f06f 0301 	mvn.w	r3, #1
 8013f60:	e282      	b.n	8014468 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013f62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013f64:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013f66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f68:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013f70:	e23a      	b.n	80143e8 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013f72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f76:	4413      	add	r3, r2
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013f82:	f04f 33ff 	mov.w	r3, #4294967295
 8013f86:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013f88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f8a:	3302      	adds	r3, #2
 8013f8c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013f8e:	8bfa      	ldrh	r2, [r7, #30]
 8013f90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d202      	bcs.n	8013f9c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013f96:	f06f 0301 	mvn.w	r3, #1
 8013f9a:	e265      	b.n	8014468 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013f9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fa2:	8952      	ldrh	r2, [r2, #10]
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	da07      	bge.n	8013fb8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013fa8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013faa:	3301      	adds	r3, #1
 8013fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fae:	4413      	add	r3, r2
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fb6:	e00b      	b.n	8013fd0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d004      	beq.n	8013fca <dhcp_parse_reply+0xde>
 8013fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	e000      	b.n	8013fcc <dhcp_parse_reply+0xe0>
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013fd8:	7dfb      	ldrb	r3, [r7, #23]
 8013fda:	2b3b      	cmp	r3, #59	; 0x3b
 8013fdc:	f200 812d 	bhi.w	801423a <dhcp_parse_reply+0x34e>
 8013fe0:	a201      	add	r2, pc, #4	; (adr r2, 8013fe8 <dhcp_parse_reply+0xfc>)
 8013fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fe6:	bf00      	nop
 8013fe8:	080140d9 	.word	0x080140d9
 8013fec:	080140e9 	.word	0x080140e9
 8013ff0:	0801423b 	.word	0x0801423b
 8013ff4:	0801410b 	.word	0x0801410b
 8013ff8:	0801423b 	.word	0x0801423b
 8013ffc:	0801423b 	.word	0x0801423b
 8014000:	0801423b 	.word	0x0801423b
 8014004:	0801423b 	.word	0x0801423b
 8014008:	0801423b 	.word	0x0801423b
 801400c:	0801423b 	.word	0x0801423b
 8014010:	0801423b 	.word	0x0801423b
 8014014:	0801423b 	.word	0x0801423b
 8014018:	0801423b 	.word	0x0801423b
 801401c:	0801423b 	.word	0x0801423b
 8014020:	0801423b 	.word	0x0801423b
 8014024:	0801423b 	.word	0x0801423b
 8014028:	0801423b 	.word	0x0801423b
 801402c:	0801423b 	.word	0x0801423b
 8014030:	0801423b 	.word	0x0801423b
 8014034:	0801423b 	.word	0x0801423b
 8014038:	0801423b 	.word	0x0801423b
 801403c:	0801423b 	.word	0x0801423b
 8014040:	0801423b 	.word	0x0801423b
 8014044:	0801423b 	.word	0x0801423b
 8014048:	0801423b 	.word	0x0801423b
 801404c:	0801423b 	.word	0x0801423b
 8014050:	0801423b 	.word	0x0801423b
 8014054:	0801423b 	.word	0x0801423b
 8014058:	0801423b 	.word	0x0801423b
 801405c:	0801423b 	.word	0x0801423b
 8014060:	0801423b 	.word	0x0801423b
 8014064:	0801423b 	.word	0x0801423b
 8014068:	0801423b 	.word	0x0801423b
 801406c:	0801423b 	.word	0x0801423b
 8014070:	0801423b 	.word	0x0801423b
 8014074:	0801423b 	.word	0x0801423b
 8014078:	0801423b 	.word	0x0801423b
 801407c:	0801423b 	.word	0x0801423b
 8014080:	0801423b 	.word	0x0801423b
 8014084:	0801423b 	.word	0x0801423b
 8014088:	0801423b 	.word	0x0801423b
 801408c:	0801423b 	.word	0x0801423b
 8014090:	0801423b 	.word	0x0801423b
 8014094:	0801423b 	.word	0x0801423b
 8014098:	0801423b 	.word	0x0801423b
 801409c:	0801423b 	.word	0x0801423b
 80140a0:	0801423b 	.word	0x0801423b
 80140a4:	0801423b 	.word	0x0801423b
 80140a8:	0801423b 	.word	0x0801423b
 80140ac:	0801423b 	.word	0x0801423b
 80140b0:	0801423b 	.word	0x0801423b
 80140b4:	08014137 	.word	0x08014137
 80140b8:	08014159 	.word	0x08014159
 80140bc:	08014195 	.word	0x08014195
 80140c0:	080141b7 	.word	0x080141b7
 80140c4:	0801423b 	.word	0x0801423b
 80140c8:	0801423b 	.word	0x0801423b
 80140cc:	0801423b 	.word	0x0801423b
 80140d0:	080141d9 	.word	0x080141d9
 80140d4:	08014219 	.word	0x08014219
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80140d8:	2300      	movs	r3, #0
 80140da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80140e6:	e0ac      	b.n	8014242 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140ec:	2b04      	cmp	r3, #4
 80140ee:	d009      	beq.n	8014104 <dhcp_parse_reply+0x218>
 80140f0:	4b43      	ldr	r3, [pc, #268]	; (8014200 <dhcp_parse_reply+0x314>)
 80140f2:	f240 622e 	movw	r2, #1582	; 0x62e
 80140f6:	4943      	ldr	r1, [pc, #268]	; (8014204 <dhcp_parse_reply+0x318>)
 80140f8:	4843      	ldr	r0, [pc, #268]	; (8014208 <dhcp_parse_reply+0x31c>)
 80140fa:	f003 f933 	bl	8017364 <iprintf>
 80140fe:	f06f 0305 	mvn.w	r3, #5
 8014102:	e1b1      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014104:	2306      	movs	r3, #6
 8014106:	623b      	str	r3, [r7, #32]
        break;
 8014108:	e09b      	b.n	8014242 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801410a:	2304      	movs	r3, #4
 801410c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014110:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014118:	429a      	cmp	r2, r3
 801411a:	d209      	bcs.n	8014130 <dhcp_parse_reply+0x244>
 801411c:	4b38      	ldr	r3, [pc, #224]	; (8014200 <dhcp_parse_reply+0x314>)
 801411e:	f240 6233 	movw	r2, #1587	; 0x633
 8014122:	493a      	ldr	r1, [pc, #232]	; (801420c <dhcp_parse_reply+0x320>)
 8014124:	4838      	ldr	r0, [pc, #224]	; (8014208 <dhcp_parse_reply+0x31c>)
 8014126:	f003 f91d 	bl	8017364 <iprintf>
 801412a:	f06f 0305 	mvn.w	r3, #5
 801412e:	e19b      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014130:	2307      	movs	r3, #7
 8014132:	623b      	str	r3, [r7, #32]
        break;
 8014134:	e085      	b.n	8014242 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801413a:	2b04      	cmp	r3, #4
 801413c:	d009      	beq.n	8014152 <dhcp_parse_reply+0x266>
 801413e:	4b30      	ldr	r3, [pc, #192]	; (8014200 <dhcp_parse_reply+0x314>)
 8014140:	f240 6241 	movw	r2, #1601	; 0x641
 8014144:	492f      	ldr	r1, [pc, #188]	; (8014204 <dhcp_parse_reply+0x318>)
 8014146:	4830      	ldr	r0, [pc, #192]	; (8014208 <dhcp_parse_reply+0x31c>)
 8014148:	f003 f90c 	bl	8017364 <iprintf>
 801414c:	f06f 0305 	mvn.w	r3, #5
 8014150:	e18a      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014152:	2303      	movs	r3, #3
 8014154:	623b      	str	r3, [r7, #32]
        break;
 8014156:	e074      	b.n	8014242 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801415c:	2b01      	cmp	r3, #1
 801415e:	d009      	beq.n	8014174 <dhcp_parse_reply+0x288>
 8014160:	4b27      	ldr	r3, [pc, #156]	; (8014200 <dhcp_parse_reply+0x314>)
 8014162:	f240 624f 	movw	r2, #1615	; 0x64f
 8014166:	492a      	ldr	r1, [pc, #168]	; (8014210 <dhcp_parse_reply+0x324>)
 8014168:	4827      	ldr	r0, [pc, #156]	; (8014208 <dhcp_parse_reply+0x31c>)
 801416a:	f003 f8fb 	bl	8017364 <iprintf>
 801416e:	f06f 0305 	mvn.w	r3, #5
 8014172:	e179      	b.n	8014468 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014176:	2bf0      	cmp	r3, #240	; 0xf0
 8014178:	d009      	beq.n	801418e <dhcp_parse_reply+0x2a2>
 801417a:	4b21      	ldr	r3, [pc, #132]	; (8014200 <dhcp_parse_reply+0x314>)
 801417c:	f240 6251 	movw	r2, #1617	; 0x651
 8014180:	4924      	ldr	r1, [pc, #144]	; (8014214 <dhcp_parse_reply+0x328>)
 8014182:	4821      	ldr	r0, [pc, #132]	; (8014208 <dhcp_parse_reply+0x31c>)
 8014184:	f003 f8ee 	bl	8017364 <iprintf>
 8014188:	f06f 0305 	mvn.w	r3, #5
 801418c:	e16c      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801418e:	2300      	movs	r3, #0
 8014190:	623b      	str	r3, [r7, #32]
        break;
 8014192:	e056      	b.n	8014242 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014198:	2b01      	cmp	r3, #1
 801419a:	d009      	beq.n	80141b0 <dhcp_parse_reply+0x2c4>
 801419c:	4b18      	ldr	r3, [pc, #96]	; (8014200 <dhcp_parse_reply+0x314>)
 801419e:	f240 6255 	movw	r2, #1621	; 0x655
 80141a2:	491b      	ldr	r1, [pc, #108]	; (8014210 <dhcp_parse_reply+0x324>)
 80141a4:	4818      	ldr	r0, [pc, #96]	; (8014208 <dhcp_parse_reply+0x31c>)
 80141a6:	f003 f8dd 	bl	8017364 <iprintf>
 80141aa:	f06f 0305 	mvn.w	r3, #5
 80141ae:	e15b      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80141b0:	2301      	movs	r3, #1
 80141b2:	623b      	str	r3, [r7, #32]
        break;
 80141b4:	e045      	b.n	8014242 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	d009      	beq.n	80141d2 <dhcp_parse_reply+0x2e6>
 80141be:	4b10      	ldr	r3, [pc, #64]	; (8014200 <dhcp_parse_reply+0x314>)
 80141c0:	f240 6259 	movw	r2, #1625	; 0x659
 80141c4:	490f      	ldr	r1, [pc, #60]	; (8014204 <dhcp_parse_reply+0x318>)
 80141c6:	4810      	ldr	r0, [pc, #64]	; (8014208 <dhcp_parse_reply+0x31c>)
 80141c8:	f003 f8cc 	bl	8017364 <iprintf>
 80141cc:	f06f 0305 	mvn.w	r3, #5
 80141d0:	e14a      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80141d2:	2302      	movs	r3, #2
 80141d4:	623b      	str	r3, [r7, #32]
        break;
 80141d6:	e034      	b.n	8014242 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141dc:	2b04      	cmp	r3, #4
 80141de:	d009      	beq.n	80141f4 <dhcp_parse_reply+0x308>
 80141e0:	4b07      	ldr	r3, [pc, #28]	; (8014200 <dhcp_parse_reply+0x314>)
 80141e2:	f240 625d 	movw	r2, #1629	; 0x65d
 80141e6:	4907      	ldr	r1, [pc, #28]	; (8014204 <dhcp_parse_reply+0x318>)
 80141e8:	4807      	ldr	r0, [pc, #28]	; (8014208 <dhcp_parse_reply+0x31c>)
 80141ea:	f003 f8bb 	bl	8017364 <iprintf>
 80141ee:	f06f 0305 	mvn.w	r3, #5
 80141f2:	e139      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80141f4:	2304      	movs	r3, #4
 80141f6:	623b      	str	r3, [r7, #32]
        break;
 80141f8:	e023      	b.n	8014242 <dhcp_parse_reply+0x356>
 80141fa:	bf00      	nop
 80141fc:	2000bbb4 	.word	0x2000bbb4
 8014200:	0801a68c 	.word	0x0801a68c
 8014204:	0801a914 	.word	0x0801a914
 8014208:	0801a6ec 	.word	0x0801a6ec
 801420c:	0801a920 	.word	0x0801a920
 8014210:	0801a934 	.word	0x0801a934
 8014214:	0801a940 	.word	0x0801a940
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801421c:	2b04      	cmp	r3, #4
 801421e:	d009      	beq.n	8014234 <dhcp_parse_reply+0x348>
 8014220:	4b93      	ldr	r3, [pc, #588]	; (8014470 <dhcp_parse_reply+0x584>)
 8014222:	f240 6261 	movw	r2, #1633	; 0x661
 8014226:	4993      	ldr	r1, [pc, #588]	; (8014474 <dhcp_parse_reply+0x588>)
 8014228:	4893      	ldr	r0, [pc, #588]	; (8014478 <dhcp_parse_reply+0x58c>)
 801422a:	f003 f89b 	bl	8017364 <iprintf>
 801422e:	f06f 0305 	mvn.w	r3, #5
 8014232:	e119      	b.n	8014468 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014234:	2305      	movs	r3, #5
 8014236:	623b      	str	r3, [r7, #32]
        break;
 8014238:	e003      	b.n	8014242 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801423a:	2300      	movs	r3, #0
 801423c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014240:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014242:	7dfb      	ldrb	r3, [r7, #23]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d103      	bne.n	8014250 <dhcp_parse_reply+0x364>
      offset++;
 8014248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801424a:	3301      	adds	r3, #1
 801424c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801424e:	e0a1      	b.n	8014394 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014250:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014256:	4413      	add	r3, r2
 8014258:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801425c:	4293      	cmp	r3, r2
 801425e:	dd02      	ble.n	8014266 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014260:	f06f 0301 	mvn.w	r3, #1
 8014264:	e100      	b.n	8014468 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801426a:	b29a      	uxth	r2, r3
 801426c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801426e:	4413      	add	r3, r2
 8014270:	b29b      	uxth	r3, r3
 8014272:	3302      	adds	r3, #2
 8014274:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801427a:	2b00      	cmp	r3, #0
 801427c:	f000 808a 	beq.w	8014394 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014280:	2300      	movs	r3, #0
 8014282:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014284:	6a3b      	ldr	r3, [r7, #32]
 8014286:	2b00      	cmp	r3, #0
 8014288:	db02      	blt.n	8014290 <dhcp_parse_reply+0x3a4>
 801428a:	6a3b      	ldr	r3, [r7, #32]
 801428c:	2b07      	cmp	r3, #7
 801428e:	dd06      	ble.n	801429e <dhcp_parse_reply+0x3b2>
 8014290:	4b77      	ldr	r3, [pc, #476]	; (8014470 <dhcp_parse_reply+0x584>)
 8014292:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014296:	4979      	ldr	r1, [pc, #484]	; (801447c <dhcp_parse_reply+0x590>)
 8014298:	4877      	ldr	r0, [pc, #476]	; (8014478 <dhcp_parse_reply+0x58c>)
 801429a:	f003 f863 	bl	8017364 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801429e:	4a78      	ldr	r2, [pc, #480]	; (8014480 <dhcp_parse_reply+0x594>)
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	4413      	add	r3, r2
 80142a4:	781b      	ldrb	r3, [r3, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d174      	bne.n	8014394 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80142aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142ae:	2b04      	cmp	r3, #4
 80142b0:	bf28      	it	cs
 80142b2:	2304      	movcs	r3, #4
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80142b8:	8bfb      	ldrh	r3, [r7, #30]
 80142ba:	8aba      	ldrh	r2, [r7, #20]
 80142bc:	f107 0108 	add.w	r1, r7, #8
 80142c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142c2:	f7f8 fc1b 	bl	800cafc <pbuf_copy_partial>
 80142c6:	4603      	mov	r3, r0
 80142c8:	461a      	mov	r2, r3
 80142ca:	8abb      	ldrh	r3, [r7, #20]
 80142cc:	4293      	cmp	r3, r2
 80142ce:	d002      	beq.n	80142d6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80142d0:	f06f 0301 	mvn.w	r3, #1
 80142d4:	e0c8      	b.n	8014468 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80142d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142da:	2b04      	cmp	r3, #4
 80142dc:	d933      	bls.n	8014346 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80142de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142e2:	f003 0303 	and.w	r3, r3, #3
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d009      	beq.n	8014300 <dhcp_parse_reply+0x414>
 80142ec:	4b60      	ldr	r3, [pc, #384]	; (8014470 <dhcp_parse_reply+0x584>)
 80142ee:	f240 6281 	movw	r2, #1665	; 0x681
 80142f2:	4964      	ldr	r1, [pc, #400]	; (8014484 <dhcp_parse_reply+0x598>)
 80142f4:	4860      	ldr	r0, [pc, #384]	; (8014478 <dhcp_parse_reply+0x58c>)
 80142f6:	f003 f835 	bl	8017364 <iprintf>
 80142fa:	f06f 0305 	mvn.w	r3, #5
 80142fe:	e0b3      	b.n	8014468 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014300:	4a5f      	ldr	r2, [pc, #380]	; (8014480 <dhcp_parse_reply+0x594>)
 8014302:	6a3b      	ldr	r3, [r7, #32]
 8014304:	4413      	add	r3, r2
 8014306:	2201      	movs	r2, #1
 8014308:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	4618      	mov	r0, r3
 801430e:	f7f6 fe4c 	bl	800afaa <lwip_htonl>
 8014312:	4602      	mov	r2, r0
 8014314:	495c      	ldr	r1, [pc, #368]	; (8014488 <dhcp_parse_reply+0x59c>)
 8014316:	6a3b      	ldr	r3, [r7, #32]
 8014318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801431c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014320:	3b04      	subs	r3, #4
 8014322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014326:	8bfb      	ldrh	r3, [r7, #30]
 8014328:	3304      	adds	r3, #4
 801432a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801432c:	8a7a      	ldrh	r2, [r7, #18]
 801432e:	8bfb      	ldrh	r3, [r7, #30]
 8014330:	429a      	cmp	r2, r3
 8014332:	d202      	bcs.n	801433a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014334:	f06f 0301 	mvn.w	r3, #1
 8014338:	e096      	b.n	8014468 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801433a:	8a7b      	ldrh	r3, [r7, #18]
 801433c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801433e:	6a3b      	ldr	r3, [r7, #32]
 8014340:	3301      	adds	r3, #1
 8014342:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014344:	e79e      	b.n	8014284 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801434a:	2b04      	cmp	r3, #4
 801434c:	d106      	bne.n	801435c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	4618      	mov	r0, r3
 8014352:	f7f6 fe2a 	bl	800afaa <lwip_htonl>
 8014356:	4603      	mov	r3, r0
 8014358:	60bb      	str	r3, [r7, #8]
 801435a:	e011      	b.n	8014380 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801435c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014360:	2b01      	cmp	r3, #1
 8014362:	d009      	beq.n	8014378 <dhcp_parse_reply+0x48c>
 8014364:	4b42      	ldr	r3, [pc, #264]	; (8014470 <dhcp_parse_reply+0x584>)
 8014366:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801436a:	4948      	ldr	r1, [pc, #288]	; (801448c <dhcp_parse_reply+0x5a0>)
 801436c:	4842      	ldr	r0, [pc, #264]	; (8014478 <dhcp_parse_reply+0x58c>)
 801436e:	f002 fff9 	bl	8017364 <iprintf>
 8014372:	f06f 0305 	mvn.w	r3, #5
 8014376:	e077      	b.n	8014468 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014378:	f107 0308 	add.w	r3, r7, #8
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014380:	4a3f      	ldr	r2, [pc, #252]	; (8014480 <dhcp_parse_reply+0x594>)
 8014382:	6a3b      	ldr	r3, [r7, #32]
 8014384:	4413      	add	r3, r2
 8014386:	2201      	movs	r2, #1
 8014388:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801438a:	68ba      	ldr	r2, [r7, #8]
 801438c:	493e      	ldr	r1, [pc, #248]	; (8014488 <dhcp_parse_reply+0x59c>)
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014396:	895b      	ldrh	r3, [r3, #10]
 8014398:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801439a:	429a      	cmp	r2, r3
 801439c:	d324      	bcc.n	80143e8 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a0:	895b      	ldrh	r3, [r3, #10]
 80143a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80143a4:	1ad3      	subs	r3, r2, r3
 80143a6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80143a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143aa:	895b      	ldrh	r3, [r3, #10]
 80143ac:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80143ae:	1ad3      	subs	r3, r2, r3
 80143b0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80143b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80143b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d213      	bcs.n	80143e2 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80143c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d109      	bne.n	80143da <dhcp_parse_reply+0x4ee>
 80143c6:	4b2a      	ldr	r3, [pc, #168]	; (8014470 <dhcp_parse_reply+0x584>)
 80143c8:	f240 629d 	movw	r2, #1693	; 0x69d
 80143cc:	4930      	ldr	r1, [pc, #192]	; (8014490 <dhcp_parse_reply+0x5a4>)
 80143ce:	482a      	ldr	r0, [pc, #168]	; (8014478 <dhcp_parse_reply+0x58c>)
 80143d0:	f002 ffc8 	bl	8017364 <iprintf>
 80143d4:	f06f 0305 	mvn.w	r3, #5
 80143d8:	e046      	b.n	8014468 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80143da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80143e0:	e002      	b.n	80143e8 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80143e2:	f06f 0301 	mvn.w	r3, #1
 80143e6:	e03f      	b.n	8014468 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80143e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00a      	beq.n	8014404 <dhcp_parse_reply+0x518>
 80143ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80143f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d206      	bcs.n	8014404 <dhcp_parse_reply+0x518>
 80143f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80143f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80143fa:	4413      	add	r3, r2
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	2bff      	cmp	r3, #255	; 0xff
 8014400:	f47f adb7 	bne.w	8013f72 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014404:	4b1e      	ldr	r3, [pc, #120]	; (8014480 <dhcp_parse_reply+0x594>)
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d018      	beq.n	801443e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801440c:	4b1e      	ldr	r3, [pc, #120]	; (8014488 <dhcp_parse_reply+0x59c>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014412:	4b1b      	ldr	r3, [pc, #108]	; (8014480 <dhcp_parse_reply+0x594>)
 8014414:	2200      	movs	r2, #0
 8014416:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d102      	bne.n	8014424 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801441e:	2301      	movs	r3, #1
 8014420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014422:	e00c      	b.n	801443e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2b02      	cmp	r3, #2
 8014428:	d102      	bne.n	8014430 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801442a:	2301      	movs	r3, #1
 801442c:	62bb      	str	r3, [r7, #40]	; 0x28
 801442e:	e006      	b.n	801443e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	2b03      	cmp	r3, #3
 8014434:	d103      	bne.n	801443e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014436:	2301      	movs	r3, #1
 8014438:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801443a:	2301      	movs	r3, #1
 801443c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014440:	2b00      	cmp	r3, #0
 8014442:	d006      	beq.n	8014452 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014444:	2300      	movs	r3, #0
 8014446:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014448:	236c      	movs	r3, #108	; 0x6c
 801444a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801444c:	23ec      	movs	r3, #236	; 0xec
 801444e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014450:	e569      	b.n	8013f26 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014454:	2b00      	cmp	r3, #0
 8014456:	d006      	beq.n	8014466 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014458:	2300      	movs	r3, #0
 801445a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801445c:	232c      	movs	r3, #44	; 0x2c
 801445e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014460:	236c      	movs	r3, #108	; 0x6c
 8014462:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014464:	e55f      	b.n	8013f26 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014466:	2300      	movs	r3, #0
}
 8014468:	4618      	mov	r0, r3
 801446a:	3740      	adds	r7, #64	; 0x40
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	0801a68c 	.word	0x0801a68c
 8014474:	0801a914 	.word	0x0801a914
 8014478:	0801a6ec 	.word	0x0801a6ec
 801447c:	0801a958 	.word	0x0801a958
 8014480:	2000bbb4 	.word	0x2000bbb4
 8014484:	0801a96c 	.word	0x0801a96c
 8014488:	2000bbbc 	.word	0x2000bbbc
 801448c:	0801a984 	.word	0x0801a984
 8014490:	0801a998 	.word	0x0801a998

08014494 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b08a      	sub	sp, #40	; 0x28
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	607a      	str	r2, [r7, #4]
 80144a0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80144a2:	4b60      	ldr	r3, [pc, #384]	; (8014624 <dhcp_recv+0x190>)
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144a8:	6a3b      	ldr	r3, [r7, #32]
 80144aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ac:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f000 809d 	beq.w	80145f6 <dhcp_recv+0x162>
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	791b      	ldrb	r3, [r3, #4]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f000 8098 	beq.w	80145f6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	895b      	ldrh	r3, [r3, #10]
 80144ca:	2b2b      	cmp	r3, #43	; 0x2b
 80144cc:	f240 8095 	bls.w	80145fa <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80144d0:	69bb      	ldr	r3, [r7, #24]
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	2b02      	cmp	r3, #2
 80144d6:	f040 8092 	bne.w	80145fe <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80144da:	2300      	movs	r3, #0
 80144dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80144e0:	e012      	b.n	8014508 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80144e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144e6:	6a3a      	ldr	r2, [r7, #32]
 80144e8:	4413      	add	r3, r2
 80144ea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80144ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144f2:	69b9      	ldr	r1, [r7, #24]
 80144f4:	440b      	add	r3, r1
 80144f6:	7f1b      	ldrb	r3, [r3, #28]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	f040 8082 	bne.w	8014602 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80144fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014502:	3301      	adds	r3, #1
 8014504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014508:	6a3b      	ldr	r3, [r7, #32]
 801450a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801450e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014512:	429a      	cmp	r2, r3
 8014514:	d203      	bcs.n	801451e <dhcp_recv+0x8a>
 8014516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801451a:	2b05      	cmp	r3, #5
 801451c:	d9e1      	bls.n	80144e2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	4618      	mov	r0, r3
 8014524:	f7f6 fd41 	bl	800afaa <lwip_htonl>
 8014528:	4602      	mov	r2, r0
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	429a      	cmp	r2, r3
 8014530:	d169      	bne.n	8014606 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014532:	69f9      	ldr	r1, [r7, #28]
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f7ff fcd9 	bl	8013eec <dhcp_parse_reply>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d164      	bne.n	801460a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014540:	4b39      	ldr	r3, [pc, #228]	; (8014628 <dhcp_recv+0x194>)
 8014542:	785b      	ldrb	r3, [r3, #1]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d062      	beq.n	801460e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801454e:	4b37      	ldr	r3, [pc, #220]	; (801462c <dhcp_recv+0x198>)
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014554:	7cfb      	ldrb	r3, [r7, #19]
 8014556:	2b05      	cmp	r3, #5
 8014558:	d12a      	bne.n	80145b0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801455a:	69fb      	ldr	r3, [r7, #28]
 801455c:	795b      	ldrb	r3, [r3, #5]
 801455e:	2b01      	cmp	r3, #1
 8014560:	d112      	bne.n	8014588 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014562:	6979      	ldr	r1, [r7, #20]
 8014564:	6a38      	ldr	r0, [r7, #32]
 8014566:	f7fe fe17 	bl	8013198 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801456a:	6a3b      	ldr	r3, [r7, #32]
 801456c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014570:	f003 0308 	and.w	r3, r3, #8
 8014574:	2b00      	cmp	r3, #0
 8014576:	d003      	beq.n	8014580 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014578:	6a38      	ldr	r0, [r7, #32]
 801457a:	f7fe fb87 	bl	8012c8c <dhcp_check>
 801457e:	e049      	b.n	8014614 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014580:	6a38      	ldr	r0, [r7, #32]
 8014582:	f7ff f867 	bl	8013654 <dhcp_bind>
 8014586:	e045      	b.n	8014614 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	795b      	ldrb	r3, [r3, #5]
 801458c:	2b03      	cmp	r3, #3
 801458e:	d007      	beq.n	80145a0 <dhcp_recv+0x10c>
 8014590:	69fb      	ldr	r3, [r7, #28]
 8014592:	795b      	ldrb	r3, [r3, #5]
 8014594:	2b04      	cmp	r3, #4
 8014596:	d003      	beq.n	80145a0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801459c:	2b05      	cmp	r3, #5
 801459e:	d139      	bne.n	8014614 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80145a0:	6979      	ldr	r1, [r7, #20]
 80145a2:	6a38      	ldr	r0, [r7, #32]
 80145a4:	f7fe fdf8 	bl	8013198 <dhcp_handle_ack>
      dhcp_bind(netif);
 80145a8:	6a38      	ldr	r0, [r7, #32]
 80145aa:	f7ff f853 	bl	8013654 <dhcp_bind>
 80145ae:	e031      	b.n	8014614 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80145b0:	7cfb      	ldrb	r3, [r7, #19]
 80145b2:	2b06      	cmp	r3, #6
 80145b4:	d113      	bne.n	80145de <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80145b6:	69fb      	ldr	r3, [r7, #28]
 80145b8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80145ba:	2b03      	cmp	r3, #3
 80145bc:	d00b      	beq.n	80145d6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	795b      	ldrb	r3, [r3, #5]
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d007      	beq.n	80145d6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80145ca:	2b04      	cmp	r3, #4
 80145cc:	d003      	beq.n	80145d6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	795b      	ldrb	r3, [r3, #5]
 80145d2:	2b05      	cmp	r3, #5
 80145d4:	d103      	bne.n	80145de <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80145d6:	6a38      	ldr	r0, [r7, #32]
 80145d8:	f7fe fb3e 	bl	8012c58 <dhcp_handle_nak>
 80145dc:	e01a      	b.n	8014614 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80145de:	7cfb      	ldrb	r3, [r7, #19]
 80145e0:	2b02      	cmp	r3, #2
 80145e2:	d116      	bne.n	8014612 <dhcp_recv+0x17e>
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	795b      	ldrb	r3, [r3, #5]
 80145e8:	2b06      	cmp	r3, #6
 80145ea:	d112      	bne.n	8014612 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80145ec:	6979      	ldr	r1, [r7, #20]
 80145ee:	6a38      	ldr	r0, [r7, #32]
 80145f0:	f7fe fb80 	bl	8012cf4 <dhcp_handle_offer>
 80145f4:	e00e      	b.n	8014614 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80145f6:	bf00      	nop
 80145f8:	e00c      	b.n	8014614 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80145fa:	bf00      	nop
 80145fc:	e00a      	b.n	8014614 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80145fe:	bf00      	nop
 8014600:	e008      	b.n	8014614 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014602:	bf00      	nop
 8014604:	e006      	b.n	8014614 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014606:	bf00      	nop
 8014608:	e004      	b.n	8014614 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801460a:	bf00      	nop
 801460c:	e002      	b.n	8014614 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801460e:	bf00      	nop
 8014610:	e000      	b.n	8014614 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014612:	bf00      	nop
  pbuf_free(p);
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f7f8 f86b 	bl	800c6f0 <pbuf_free>
}
 801461a:	bf00      	nop
 801461c:	3728      	adds	r7, #40	; 0x28
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	20008464 	.word	0x20008464
 8014628:	2000bbb4 	.word	0x2000bbb4
 801462c:	2000bbbc 	.word	0x2000bbbc

08014630 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b088      	sub	sp, #32
 8014634:	af00      	add	r7, sp, #0
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	603b      	str	r3, [r7, #0]
 801463c:	4613      	mov	r3, r2
 801463e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d108      	bne.n	8014658 <dhcp_create_msg+0x28>
 8014646:	4b5f      	ldr	r3, [pc, #380]	; (80147c4 <dhcp_create_msg+0x194>)
 8014648:	f240 7269 	movw	r2, #1897	; 0x769
 801464c:	495e      	ldr	r1, [pc, #376]	; (80147c8 <dhcp_create_msg+0x198>)
 801464e:	485f      	ldr	r0, [pc, #380]	; (80147cc <dhcp_create_msg+0x19c>)
 8014650:	f002 fe88 	bl	8017364 <iprintf>
 8014654:	2300      	movs	r3, #0
 8014656:	e0b1      	b.n	80147bc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d108      	bne.n	8014670 <dhcp_create_msg+0x40>
 801465e:	4b59      	ldr	r3, [pc, #356]	; (80147c4 <dhcp_create_msg+0x194>)
 8014660:	f240 726a 	movw	r2, #1898	; 0x76a
 8014664:	495a      	ldr	r1, [pc, #360]	; (80147d0 <dhcp_create_msg+0x1a0>)
 8014666:	4859      	ldr	r0, [pc, #356]	; (80147cc <dhcp_create_msg+0x19c>)
 8014668:	f002 fe7c 	bl	8017364 <iprintf>
 801466c:	2300      	movs	r3, #0
 801466e:	e0a5      	b.n	80147bc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014670:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014674:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014678:	2036      	movs	r0, #54	; 0x36
 801467a:	f7f7 fd55 	bl	800c128 <pbuf_alloc>
 801467e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014680:	69bb      	ldr	r3, [r7, #24]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d101      	bne.n	801468a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014686:	2300      	movs	r3, #0
 8014688:	e098      	b.n	80147bc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801468a:	69bb      	ldr	r3, [r7, #24]
 801468c:	895b      	ldrh	r3, [r3, #10]
 801468e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014692:	d206      	bcs.n	80146a2 <dhcp_create_msg+0x72>
 8014694:	4b4b      	ldr	r3, [pc, #300]	; (80147c4 <dhcp_create_msg+0x194>)
 8014696:	f240 7271 	movw	r2, #1905	; 0x771
 801469a:	494e      	ldr	r1, [pc, #312]	; (80147d4 <dhcp_create_msg+0x1a4>)
 801469c:	484b      	ldr	r0, [pc, #300]	; (80147cc <dhcp_create_msg+0x19c>)
 801469e:	f002 fe61 	bl	8017364 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80146a2:	79fb      	ldrb	r3, [r7, #7]
 80146a4:	2b03      	cmp	r3, #3
 80146a6:	d103      	bne.n	80146b0 <dhcp_create_msg+0x80>
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	795b      	ldrb	r3, [r3, #5]
 80146ac:	2b03      	cmp	r3, #3
 80146ae:	d10d      	bne.n	80146cc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	799b      	ldrb	r3, [r3, #6]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d105      	bne.n	80146c4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80146b8:	f002 fe6c 	bl	8017394 <rand>
 80146bc:	4603      	mov	r3, r0
 80146be:	461a      	mov	r2, r3
 80146c0:	4b45      	ldr	r3, [pc, #276]	; (80147d8 <dhcp_create_msg+0x1a8>)
 80146c2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80146c4:	4b44      	ldr	r3, [pc, #272]	; (80147d8 <dhcp_create_msg+0x1a8>)
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80146d2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80146d6:	2100      	movs	r1, #0
 80146d8:	6978      	ldr	r0, [r7, #20]
 80146da:	f002 fde0 	bl	801729e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	2201      	movs	r2, #1
 80146e2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	2201      	movs	r2, #1
 80146e8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80146f0:	697b      	ldr	r3, [r7, #20]
 80146f2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f6 fc56 	bl	800afaa <lwip_htonl>
 80146fe:	4602      	mov	r2, r0
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014704:	79fb      	ldrb	r3, [r7, #7]
 8014706:	2b08      	cmp	r3, #8
 8014708:	d010      	beq.n	801472c <dhcp_create_msg+0xfc>
 801470a:	79fb      	ldrb	r3, [r7, #7]
 801470c:	2b04      	cmp	r3, #4
 801470e:	d00d      	beq.n	801472c <dhcp_create_msg+0xfc>
 8014710:	79fb      	ldrb	r3, [r7, #7]
 8014712:	2b07      	cmp	r3, #7
 8014714:	d00a      	beq.n	801472c <dhcp_create_msg+0xfc>
 8014716:	79fb      	ldrb	r3, [r7, #7]
 8014718:	2b03      	cmp	r3, #3
 801471a:	d10c      	bne.n	8014736 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014720:	2b05      	cmp	r3, #5
 8014722:	d003      	beq.n	801472c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	795b      	ldrb	r3, [r3, #5]
 8014728:	2b04      	cmp	r3, #4
 801472a:	d104      	bne.n	8014736 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	3304      	adds	r3, #4
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014736:	2300      	movs	r3, #0
 8014738:	83fb      	strh	r3, [r7, #30]
 801473a:	e00c      	b.n	8014756 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801473c:	8bfa      	ldrh	r2, [r7, #30]
 801473e:	8bfb      	ldrh	r3, [r7, #30]
 8014740:	68f9      	ldr	r1, [r7, #12]
 8014742:	440a      	add	r2, r1
 8014744:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014748:	697a      	ldr	r2, [r7, #20]
 801474a:	4413      	add	r3, r2
 801474c:	460a      	mov	r2, r1
 801474e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014750:	8bfb      	ldrh	r3, [r7, #30]
 8014752:	3301      	adds	r3, #1
 8014754:	83fb      	strh	r3, [r7, #30]
 8014756:	8bfb      	ldrh	r3, [r7, #30]
 8014758:	2b05      	cmp	r3, #5
 801475a:	d9ef      	bls.n	801473c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	2200      	movs	r2, #0
 8014760:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014764:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014768:	2200      	movs	r2, #0
 801476a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801476e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8014772:	2200      	movs	r2, #0
 8014774:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014778:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801477c:	2200      	movs	r2, #0
 801477e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014782:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801478c:	2301      	movs	r3, #1
 801478e:	2235      	movs	r2, #53	; 0x35
 8014790:	2000      	movs	r0, #0
 8014792:	f7ff fadb 	bl	8013d4c <dhcp_option>
 8014796:	4603      	mov	r3, r0
 8014798:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147a0:	79fa      	ldrb	r2, [r7, #7]
 80147a2:	8a7b      	ldrh	r3, [r7, #18]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7ff fb05 	bl	8013db4 <dhcp_option_byte>
 80147aa:	4603      	mov	r3, r0
 80147ac:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d002      	beq.n	80147ba <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	8a7a      	ldrh	r2, [r7, #18]
 80147b8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80147ba:	69bb      	ldr	r3, [r7, #24]
}
 80147bc:	4618      	mov	r0, r3
 80147be:	3720      	adds	r7, #32
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	0801a68c 	.word	0x0801a68c
 80147c8:	0801a9ac 	.word	0x0801a9ac
 80147cc:	0801a6ec 	.word	0x0801a6ec
 80147d0:	0801a9cc 	.word	0x0801a9cc
 80147d4:	0801a9ec 	.word	0x0801a9ec
 80147d8:	20004b18 	.word	0x20004b18

080147dc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	4603      	mov	r3, r0
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80147ea:	89fb      	ldrh	r3, [r7, #14]
 80147ec:	1c5a      	adds	r2, r3, #1
 80147ee:	81fa      	strh	r2, [r7, #14]
 80147f0:	461a      	mov	r2, r3
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	4413      	add	r3, r2
 80147f6:	22ff      	movs	r2, #255	; 0xff
 80147f8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80147fa:	e007      	b.n	801480c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80147fc:	89fb      	ldrh	r3, [r7, #14]
 80147fe:	1c5a      	adds	r2, r3, #1
 8014800:	81fa      	strh	r2, [r7, #14]
 8014802:	461a      	mov	r2, r3
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	4413      	add	r3, r2
 8014808:	2200      	movs	r2, #0
 801480a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801480c:	89fb      	ldrh	r3, [r7, #14]
 801480e:	2b43      	cmp	r3, #67	; 0x43
 8014810:	d904      	bls.n	801481c <dhcp_option_trailer+0x40>
 8014812:	89fb      	ldrh	r3, [r7, #14]
 8014814:	f003 0303 	and.w	r3, r3, #3
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <dhcp_option_trailer+0x46>
 801481c:	89fb      	ldrh	r3, [r7, #14]
 801481e:	2b43      	cmp	r3, #67	; 0x43
 8014820:	d9ec      	bls.n	80147fc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014822:	89fb      	ldrh	r3, [r7, #14]
 8014824:	33f0      	adds	r3, #240	; 0xf0
 8014826:	b29b      	uxth	r3, r3
 8014828:	4619      	mov	r1, r3
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7f7 fdda 	bl	800c3e4 <pbuf_realloc>
}
 8014830:	bf00      	nop
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014838:	b480      	push	{r7}
 801483a:	b085      	sub	sp, #20
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d017      	beq.n	8014876 <dhcp_supplied_address+0x3e>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801484a:	2b00      	cmp	r3, #0
 801484c:	d013      	beq.n	8014876 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014852:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	795b      	ldrb	r3, [r3, #5]
 8014858:	2b0a      	cmp	r3, #10
 801485a:	d007      	beq.n	801486c <dhcp_supplied_address+0x34>
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	795b      	ldrb	r3, [r3, #5]
 8014860:	2b05      	cmp	r3, #5
 8014862:	d003      	beq.n	801486c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014868:	2b04      	cmp	r3, #4
 801486a:	d101      	bne.n	8014870 <dhcp_supplied_address+0x38>
 801486c:	2301      	movs	r3, #1
 801486e:	e000      	b.n	8014872 <dhcp_supplied_address+0x3a>
 8014870:	2300      	movs	r3, #0
 8014872:	b2db      	uxtb	r3, r3
 8014874:	e000      	b.n	8014878 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014876:	2300      	movs	r3, #0
}
 8014878:	4618      	mov	r0, r3
 801487a:	3714      	adds	r7, #20
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr

08014884 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801488c:	4915      	ldr	r1, [pc, #84]	; (80148e4 <etharp_free_entry+0x60>)
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	4613      	mov	r3, r2
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	4413      	add	r3, r2
 8014896:	00db      	lsls	r3, r3, #3
 8014898:	440b      	add	r3, r1
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d013      	beq.n	80148c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80148a0:	4910      	ldr	r1, [pc, #64]	; (80148e4 <etharp_free_entry+0x60>)
 80148a2:	687a      	ldr	r2, [r7, #4]
 80148a4:	4613      	mov	r3, r2
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	4413      	add	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	440b      	add	r3, r1
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7f7 ff1d 	bl	800c6f0 <pbuf_free>
    arp_table[i].q = NULL;
 80148b6:	490b      	ldr	r1, [pc, #44]	; (80148e4 <etharp_free_entry+0x60>)
 80148b8:	687a      	ldr	r2, [r7, #4]
 80148ba:	4613      	mov	r3, r2
 80148bc:	005b      	lsls	r3, r3, #1
 80148be:	4413      	add	r3, r2
 80148c0:	00db      	lsls	r3, r3, #3
 80148c2:	440b      	add	r3, r1
 80148c4:	2200      	movs	r2, #0
 80148c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80148c8:	4906      	ldr	r1, [pc, #24]	; (80148e4 <etharp_free_entry+0x60>)
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	4613      	mov	r3, r2
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	4413      	add	r3, r2
 80148d2:	00db      	lsls	r3, r3, #3
 80148d4:	440b      	add	r3, r1
 80148d6:	3314      	adds	r3, #20
 80148d8:	2200      	movs	r2, #0
 80148da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80148dc:	bf00      	nop
 80148de:	3708      	adds	r7, #8
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}
 80148e4:	20004b1c 	.word	0x20004b1c

080148e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b082      	sub	sp, #8
 80148ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148ee:	2300      	movs	r3, #0
 80148f0:	607b      	str	r3, [r7, #4]
 80148f2:	e096      	b.n	8014a22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80148f4:	494f      	ldr	r1, [pc, #316]	; (8014a34 <etharp_tmr+0x14c>)
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	4613      	mov	r3, r2
 80148fa:	005b      	lsls	r3, r3, #1
 80148fc:	4413      	add	r3, r2
 80148fe:	00db      	lsls	r3, r3, #3
 8014900:	440b      	add	r3, r1
 8014902:	3314      	adds	r3, #20
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014908:	78fb      	ldrb	r3, [r7, #3]
 801490a:	2b00      	cmp	r3, #0
 801490c:	f000 8086 	beq.w	8014a1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014910:	4948      	ldr	r1, [pc, #288]	; (8014a34 <etharp_tmr+0x14c>)
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	4613      	mov	r3, r2
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	4413      	add	r3, r2
 801491a:	00db      	lsls	r3, r3, #3
 801491c:	440b      	add	r3, r1
 801491e:	3312      	adds	r3, #18
 8014920:	881b      	ldrh	r3, [r3, #0]
 8014922:	3301      	adds	r3, #1
 8014924:	b298      	uxth	r0, r3
 8014926:	4943      	ldr	r1, [pc, #268]	; (8014a34 <etharp_tmr+0x14c>)
 8014928:	687a      	ldr	r2, [r7, #4]
 801492a:	4613      	mov	r3, r2
 801492c:	005b      	lsls	r3, r3, #1
 801492e:	4413      	add	r3, r2
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	440b      	add	r3, r1
 8014934:	3312      	adds	r3, #18
 8014936:	4602      	mov	r2, r0
 8014938:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801493a:	493e      	ldr	r1, [pc, #248]	; (8014a34 <etharp_tmr+0x14c>)
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	4613      	mov	r3, r2
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4413      	add	r3, r2
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	440b      	add	r3, r1
 8014948:	3312      	adds	r3, #18
 801494a:	881b      	ldrh	r3, [r3, #0]
 801494c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014950:	d215      	bcs.n	801497e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014952:	4938      	ldr	r1, [pc, #224]	; (8014a34 <etharp_tmr+0x14c>)
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	4613      	mov	r3, r2
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	4413      	add	r3, r2
 801495c:	00db      	lsls	r3, r3, #3
 801495e:	440b      	add	r3, r1
 8014960:	3314      	adds	r3, #20
 8014962:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014964:	2b01      	cmp	r3, #1
 8014966:	d10e      	bne.n	8014986 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014968:	4932      	ldr	r1, [pc, #200]	; (8014a34 <etharp_tmr+0x14c>)
 801496a:	687a      	ldr	r2, [r7, #4]
 801496c:	4613      	mov	r3, r2
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	4413      	add	r3, r2
 8014972:	00db      	lsls	r3, r3, #3
 8014974:	440b      	add	r3, r1
 8014976:	3312      	adds	r3, #18
 8014978:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801497a:	2b04      	cmp	r3, #4
 801497c:	d903      	bls.n	8014986 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f7ff ff80 	bl	8014884 <etharp_free_entry>
 8014984:	e04a      	b.n	8014a1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014986:	492b      	ldr	r1, [pc, #172]	; (8014a34 <etharp_tmr+0x14c>)
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	4613      	mov	r3, r2
 801498c:	005b      	lsls	r3, r3, #1
 801498e:	4413      	add	r3, r2
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	440b      	add	r3, r1
 8014994:	3314      	adds	r3, #20
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	2b03      	cmp	r3, #3
 801499a:	d10a      	bne.n	80149b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801499c:	4925      	ldr	r1, [pc, #148]	; (8014a34 <etharp_tmr+0x14c>)
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	4613      	mov	r3, r2
 80149a2:	005b      	lsls	r3, r3, #1
 80149a4:	4413      	add	r3, r2
 80149a6:	00db      	lsls	r3, r3, #3
 80149a8:	440b      	add	r3, r1
 80149aa:	3314      	adds	r3, #20
 80149ac:	2204      	movs	r2, #4
 80149ae:	701a      	strb	r2, [r3, #0]
 80149b0:	e034      	b.n	8014a1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80149b2:	4920      	ldr	r1, [pc, #128]	; (8014a34 <etharp_tmr+0x14c>)
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	4613      	mov	r3, r2
 80149b8:	005b      	lsls	r3, r3, #1
 80149ba:	4413      	add	r3, r2
 80149bc:	00db      	lsls	r3, r3, #3
 80149be:	440b      	add	r3, r1
 80149c0:	3314      	adds	r3, #20
 80149c2:	781b      	ldrb	r3, [r3, #0]
 80149c4:	2b04      	cmp	r3, #4
 80149c6:	d10a      	bne.n	80149de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80149c8:	491a      	ldr	r1, [pc, #104]	; (8014a34 <etharp_tmr+0x14c>)
 80149ca:	687a      	ldr	r2, [r7, #4]
 80149cc:	4613      	mov	r3, r2
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	440b      	add	r3, r1
 80149d6:	3314      	adds	r3, #20
 80149d8:	2202      	movs	r2, #2
 80149da:	701a      	strb	r2, [r3, #0]
 80149dc:	e01e      	b.n	8014a1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80149de:	4915      	ldr	r1, [pc, #84]	; (8014a34 <etharp_tmr+0x14c>)
 80149e0:	687a      	ldr	r2, [r7, #4]
 80149e2:	4613      	mov	r3, r2
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	4413      	add	r3, r2
 80149e8:	00db      	lsls	r3, r3, #3
 80149ea:	440b      	add	r3, r1
 80149ec:	3314      	adds	r3, #20
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d113      	bne.n	8014a1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80149f4:	490f      	ldr	r1, [pc, #60]	; (8014a34 <etharp_tmr+0x14c>)
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	4613      	mov	r3, r2
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	4413      	add	r3, r2
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	440b      	add	r3, r1
 8014a02:	3308      	adds	r3, #8
 8014a04:	6818      	ldr	r0, [r3, #0]
 8014a06:	687a      	ldr	r2, [r7, #4]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	005b      	lsls	r3, r3, #1
 8014a0c:	4413      	add	r3, r2
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	4a08      	ldr	r2, [pc, #32]	; (8014a34 <etharp_tmr+0x14c>)
 8014a12:	4413      	add	r3, r2
 8014a14:	3304      	adds	r3, #4
 8014a16:	4619      	mov	r1, r3
 8014a18:	f000 fe72 	bl	8015700 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	3301      	adds	r3, #1
 8014a20:	607b      	str	r3, [r7, #4]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2b09      	cmp	r3, #9
 8014a26:	f77f af65 	ble.w	80148f4 <etharp_tmr+0xc>
      }
    }
  }
}
 8014a2a:	bf00      	nop
 8014a2c:	bf00      	nop
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	20004b1c 	.word	0x20004b1c

08014a38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b08a      	sub	sp, #40	; 0x28
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	460b      	mov	r3, r1
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014a46:	230a      	movs	r3, #10
 8014a48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014a4a:	230a      	movs	r3, #10
 8014a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014a4e:	230a      	movs	r3, #10
 8014a50:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014a52:	2300      	movs	r3, #0
 8014a54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014a56:	230a      	movs	r3, #10
 8014a58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	83bb      	strh	r3, [r7, #28]
 8014a5e:	2300      	movs	r3, #0
 8014a60:	837b      	strh	r3, [r7, #26]
 8014a62:	2300      	movs	r3, #0
 8014a64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a66:	2300      	movs	r3, #0
 8014a68:	843b      	strh	r3, [r7, #32]
 8014a6a:	e0ae      	b.n	8014bca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a70:	49a6      	ldr	r1, [pc, #664]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014a72:	4613      	mov	r3, r2
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4413      	add	r3, r2
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3314      	adds	r3, #20
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014a82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014a86:	2b0a      	cmp	r3, #10
 8014a88:	d105      	bne.n	8014a96 <etharp_find_entry+0x5e>
 8014a8a:	7dfb      	ldrb	r3, [r7, #23]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d102      	bne.n	8014a96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014a90:	8c3b      	ldrh	r3, [r7, #32]
 8014a92:	847b      	strh	r3, [r7, #34]	; 0x22
 8014a94:	e095      	b.n	8014bc2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014a96:	7dfb      	ldrb	r3, [r7, #23]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	f000 8092 	beq.w	8014bc2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014a9e:	7dfb      	ldrb	r3, [r7, #23]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d009      	beq.n	8014ab8 <etharp_find_entry+0x80>
 8014aa4:	7dfb      	ldrb	r3, [r7, #23]
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	d806      	bhi.n	8014ab8 <etharp_find_entry+0x80>
 8014aaa:	4b99      	ldr	r3, [pc, #612]	; (8014d10 <etharp_find_entry+0x2d8>)
 8014aac:	f240 1223 	movw	r2, #291	; 0x123
 8014ab0:	4998      	ldr	r1, [pc, #608]	; (8014d14 <etharp_find_entry+0x2dc>)
 8014ab2:	4899      	ldr	r0, [pc, #612]	; (8014d18 <etharp_find_entry+0x2e0>)
 8014ab4:	f002 fc56 	bl	8017364 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d020      	beq.n	8014b00 <etharp_find_entry+0xc8>
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	6819      	ldr	r1, [r3, #0]
 8014ac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ac6:	4891      	ldr	r0, [pc, #580]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014ac8:	4613      	mov	r3, r2
 8014aca:	005b      	lsls	r3, r3, #1
 8014acc:	4413      	add	r3, r2
 8014ace:	00db      	lsls	r3, r3, #3
 8014ad0:	4403      	add	r3, r0
 8014ad2:	3304      	adds	r3, #4
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	4299      	cmp	r1, r3
 8014ad8:	d112      	bne.n	8014b00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00c      	beq.n	8014afa <etharp_find_entry+0xc2>
 8014ae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ae4:	4989      	ldr	r1, [pc, #548]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014ae6:	4613      	mov	r3, r2
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	4413      	add	r3, r2
 8014aec:	00db      	lsls	r3, r3, #3
 8014aee:	440b      	add	r3, r1
 8014af0:	3308      	adds	r3, #8
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d102      	bne.n	8014b00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014afa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014afe:	e100      	b.n	8014d02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014b00:	7dfb      	ldrb	r3, [r7, #23]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d140      	bne.n	8014b88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014b06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b0a:	4980      	ldr	r1, [pc, #512]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	00db      	lsls	r3, r3, #3
 8014b14:	440b      	add	r3, r1
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d01a      	beq.n	8014b52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014b1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b20:	497a      	ldr	r1, [pc, #488]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014b22:	4613      	mov	r3, r2
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4413      	add	r3, r2
 8014b28:	00db      	lsls	r3, r3, #3
 8014b2a:	440b      	add	r3, r1
 8014b2c:	3312      	adds	r3, #18
 8014b2e:	881b      	ldrh	r3, [r3, #0]
 8014b30:	8bba      	ldrh	r2, [r7, #28]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d845      	bhi.n	8014bc2 <etharp_find_entry+0x18a>
            old_queue = i;
 8014b36:	8c3b      	ldrh	r3, [r7, #32]
 8014b38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014b3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b3e:	4973      	ldr	r1, [pc, #460]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014b40:	4613      	mov	r3, r2
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	4413      	add	r3, r2
 8014b46:	00db      	lsls	r3, r3, #3
 8014b48:	440b      	add	r3, r1
 8014b4a:	3312      	adds	r3, #18
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	83bb      	strh	r3, [r7, #28]
 8014b50:	e037      	b.n	8014bc2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014b52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b56:	496d      	ldr	r1, [pc, #436]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014b58:	4613      	mov	r3, r2
 8014b5a:	005b      	lsls	r3, r3, #1
 8014b5c:	4413      	add	r3, r2
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	440b      	add	r3, r1
 8014b62:	3312      	adds	r3, #18
 8014b64:	881b      	ldrh	r3, [r3, #0]
 8014b66:	8b7a      	ldrh	r2, [r7, #26]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d82a      	bhi.n	8014bc2 <etharp_find_entry+0x18a>
            old_pending = i;
 8014b6c:	8c3b      	ldrh	r3, [r7, #32]
 8014b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014b70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b74:	4965      	ldr	r1, [pc, #404]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014b76:	4613      	mov	r3, r2
 8014b78:	005b      	lsls	r3, r3, #1
 8014b7a:	4413      	add	r3, r2
 8014b7c:	00db      	lsls	r3, r3, #3
 8014b7e:	440b      	add	r3, r1
 8014b80:	3312      	adds	r3, #18
 8014b82:	881b      	ldrh	r3, [r3, #0]
 8014b84:	837b      	strh	r3, [r7, #26]
 8014b86:	e01c      	b.n	8014bc2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014b88:	7dfb      	ldrb	r3, [r7, #23]
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	d919      	bls.n	8014bc2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014b8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b92:	495e      	ldr	r1, [pc, #376]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014b94:	4613      	mov	r3, r2
 8014b96:	005b      	lsls	r3, r3, #1
 8014b98:	4413      	add	r3, r2
 8014b9a:	00db      	lsls	r3, r3, #3
 8014b9c:	440b      	add	r3, r1
 8014b9e:	3312      	adds	r3, #18
 8014ba0:	881b      	ldrh	r3, [r3, #0]
 8014ba2:	8b3a      	ldrh	r2, [r7, #24]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d80c      	bhi.n	8014bc2 <etharp_find_entry+0x18a>
            old_stable = i;
 8014ba8:	8c3b      	ldrh	r3, [r7, #32]
 8014baa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bb0:	4956      	ldr	r1, [pc, #344]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	3312      	adds	r3, #18
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014bc2:	8c3b      	ldrh	r3, [r7, #32]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	843b      	strh	r3, [r7, #32]
 8014bca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014bce:	2b09      	cmp	r3, #9
 8014bd0:	f77f af4c 	ble.w	8014a6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014bd4:	7afb      	ldrb	r3, [r7, #11]
 8014bd6:	f003 0302 	and.w	r3, r3, #2
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d108      	bne.n	8014bf0 <etharp_find_entry+0x1b8>
 8014bde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014be2:	2b0a      	cmp	r3, #10
 8014be4:	d107      	bne.n	8014bf6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014be6:	7afb      	ldrb	r3, [r7, #11]
 8014be8:	f003 0301 	and.w	r3, r3, #1
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d102      	bne.n	8014bf6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf4:	e085      	b.n	8014d02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014bfa:	2b09      	cmp	r3, #9
 8014bfc:	dc02      	bgt.n	8014c04 <etharp_find_entry+0x1cc>
    i = empty;
 8014bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c00:	843b      	strh	r3, [r7, #32]
 8014c02:	e039      	b.n	8014c78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014c04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014c08:	2b09      	cmp	r3, #9
 8014c0a:	dc14      	bgt.n	8014c36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014c10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c14:	493d      	ldr	r1, [pc, #244]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014c16:	4613      	mov	r3, r2
 8014c18:	005b      	lsls	r3, r3, #1
 8014c1a:	4413      	add	r3, r2
 8014c1c:	00db      	lsls	r3, r3, #3
 8014c1e:	440b      	add	r3, r1
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d018      	beq.n	8014c58 <etharp_find_entry+0x220>
 8014c26:	4b3a      	ldr	r3, [pc, #232]	; (8014d10 <etharp_find_entry+0x2d8>)
 8014c28:	f240 126d 	movw	r2, #365	; 0x16d
 8014c2c:	493b      	ldr	r1, [pc, #236]	; (8014d1c <etharp_find_entry+0x2e4>)
 8014c2e:	483a      	ldr	r0, [pc, #232]	; (8014d18 <etharp_find_entry+0x2e0>)
 8014c30:	f002 fb98 	bl	8017364 <iprintf>
 8014c34:	e010      	b.n	8014c58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014c36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014c3a:	2b09      	cmp	r3, #9
 8014c3c:	dc02      	bgt.n	8014c44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014c3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c40:	843b      	strh	r3, [r7, #32]
 8014c42:	e009      	b.n	8014c58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014c44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014c48:	2b09      	cmp	r3, #9
 8014c4a:	dc02      	bgt.n	8014c52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014c4c:	8bfb      	ldrh	r3, [r7, #30]
 8014c4e:	843b      	strh	r3, [r7, #32]
 8014c50:	e002      	b.n	8014c58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014c52:	f04f 33ff 	mov.w	r3, #4294967295
 8014c56:	e054      	b.n	8014d02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c5c:	2b09      	cmp	r3, #9
 8014c5e:	dd06      	ble.n	8014c6e <etharp_find_entry+0x236>
 8014c60:	4b2b      	ldr	r3, [pc, #172]	; (8014d10 <etharp_find_entry+0x2d8>)
 8014c62:	f240 127f 	movw	r2, #383	; 0x17f
 8014c66:	492e      	ldr	r1, [pc, #184]	; (8014d20 <etharp_find_entry+0x2e8>)
 8014c68:	482b      	ldr	r0, [pc, #172]	; (8014d18 <etharp_find_entry+0x2e0>)
 8014c6a:	f002 fb7b 	bl	8017364 <iprintf>
    etharp_free_entry(i);
 8014c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7ff fe06 	bl	8014884 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c7c:	2b09      	cmp	r3, #9
 8014c7e:	dd06      	ble.n	8014c8e <etharp_find_entry+0x256>
 8014c80:	4b23      	ldr	r3, [pc, #140]	; (8014d10 <etharp_find_entry+0x2d8>)
 8014c82:	f240 1283 	movw	r2, #387	; 0x183
 8014c86:	4926      	ldr	r1, [pc, #152]	; (8014d20 <etharp_find_entry+0x2e8>)
 8014c88:	4823      	ldr	r0, [pc, #140]	; (8014d18 <etharp_find_entry+0x2e0>)
 8014c8a:	f002 fb6b 	bl	8017364 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c92:	491e      	ldr	r1, [pc, #120]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014c94:	4613      	mov	r3, r2
 8014c96:	005b      	lsls	r3, r3, #1
 8014c98:	4413      	add	r3, r2
 8014c9a:	00db      	lsls	r3, r3, #3
 8014c9c:	440b      	add	r3, r1
 8014c9e:	3314      	adds	r3, #20
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d006      	beq.n	8014cb4 <etharp_find_entry+0x27c>
 8014ca6:	4b1a      	ldr	r3, [pc, #104]	; (8014d10 <etharp_find_entry+0x2d8>)
 8014ca8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014cac:	491d      	ldr	r1, [pc, #116]	; (8014d24 <etharp_find_entry+0x2ec>)
 8014cae:	481a      	ldr	r0, [pc, #104]	; (8014d18 <etharp_find_entry+0x2e0>)
 8014cb0:	f002 fb58 	bl	8017364 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00b      	beq.n	8014cd2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014cba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	6819      	ldr	r1, [r3, #0]
 8014cc2:	4812      	ldr	r0, [pc, #72]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	4413      	add	r3, r2
 8014cca:	00db      	lsls	r3, r3, #3
 8014ccc:	4403      	add	r3, r0
 8014cce:	3304      	adds	r3, #4
 8014cd0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cd6:	490d      	ldr	r1, [pc, #52]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014cd8:	4613      	mov	r3, r2
 8014cda:	005b      	lsls	r3, r3, #1
 8014cdc:	4413      	add	r3, r2
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	440b      	add	r3, r1
 8014ce2:	3312      	adds	r3, #18
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cec:	4907      	ldr	r1, [pc, #28]	; (8014d0c <etharp_find_entry+0x2d4>)
 8014cee:	4613      	mov	r3, r2
 8014cf0:	005b      	lsls	r3, r3, #1
 8014cf2:	4413      	add	r3, r2
 8014cf4:	00db      	lsls	r3, r3, #3
 8014cf6:	440b      	add	r3, r1
 8014cf8:	3308      	adds	r3, #8
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014cfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3728      	adds	r7, #40	; 0x28
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	20004b1c 	.word	0x20004b1c
 8014d10:	0801aa2c 	.word	0x0801aa2c
 8014d14:	0801aa64 	.word	0x0801aa64
 8014d18:	0801aaa4 	.word	0x0801aaa4
 8014d1c:	0801aacc 	.word	0x0801aacc
 8014d20:	0801aae4 	.word	0x0801aae4
 8014d24:	0801aaf8 	.word	0x0801aaf8

08014d28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b088      	sub	sp, #32
 8014d2c:	af02      	add	r7, sp, #8
 8014d2e:	60f8      	str	r0, [r7, #12]
 8014d30:	60b9      	str	r1, [r7, #8]
 8014d32:	607a      	str	r2, [r7, #4]
 8014d34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d3c:	2b06      	cmp	r3, #6
 8014d3e:	d006      	beq.n	8014d4e <etharp_update_arp_entry+0x26>
 8014d40:	4b48      	ldr	r3, [pc, #288]	; (8014e64 <etharp_update_arp_entry+0x13c>)
 8014d42:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014d46:	4948      	ldr	r1, [pc, #288]	; (8014e68 <etharp_update_arp_entry+0x140>)
 8014d48:	4848      	ldr	r0, [pc, #288]	; (8014e6c <etharp_update_arp_entry+0x144>)
 8014d4a:	f002 fb0b 	bl	8017364 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d012      	beq.n	8014d7a <etharp_update_arp_entry+0x52>
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d00e      	beq.n	8014d7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	68f9      	ldr	r1, [r7, #12]
 8014d62:	4618      	mov	r0, r3
 8014d64:	f001 f920 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 8014d68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d105      	bne.n	8014d7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d76:	2be0      	cmp	r3, #224	; 0xe0
 8014d78:	d102      	bne.n	8014d80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d7a:	f06f 030f 	mvn.w	r3, #15
 8014d7e:	e06c      	b.n	8014e5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014d80:	78fb      	ldrb	r3, [r7, #3]
 8014d82:	68fa      	ldr	r2, [r7, #12]
 8014d84:	4619      	mov	r1, r3
 8014d86:	68b8      	ldr	r0, [r7, #8]
 8014d88:	f7ff fe56 	bl	8014a38 <etharp_find_entry>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014d90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	da02      	bge.n	8014d9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014d98:	8afb      	ldrh	r3, [r7, #22]
 8014d9a:	b25b      	sxtb	r3, r3
 8014d9c:	e05d      	b.n	8014e5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014d9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014da2:	4933      	ldr	r1, [pc, #204]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014da4:	4613      	mov	r3, r2
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	4413      	add	r3, r2
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	440b      	add	r3, r1
 8014dae:	3314      	adds	r3, #20
 8014db0:	2202      	movs	r2, #2
 8014db2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014db4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014db8:	492d      	ldr	r1, [pc, #180]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014dba:	4613      	mov	r3, r2
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	4413      	add	r3, r2
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	440b      	add	r3, r1
 8014dc4:	3308      	adds	r3, #8
 8014dc6:	68fa      	ldr	r2, [r7, #12]
 8014dc8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014dca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dce:	4613      	mov	r3, r2
 8014dd0:	005b      	lsls	r3, r3, #1
 8014dd2:	4413      	add	r3, r2
 8014dd4:	00db      	lsls	r3, r3, #3
 8014dd6:	3308      	adds	r3, #8
 8014dd8:	4a25      	ldr	r2, [pc, #148]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014dda:	4413      	add	r3, r2
 8014ddc:	3304      	adds	r3, #4
 8014dde:	2206      	movs	r2, #6
 8014de0:	6879      	ldr	r1, [r7, #4]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f002 fa4d 	bl	8017282 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014de8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dec:	4920      	ldr	r1, [pc, #128]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014dee:	4613      	mov	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	4413      	add	r3, r2
 8014df4:	00db      	lsls	r3, r3, #3
 8014df6:	440b      	add	r3, r1
 8014df8:	3312      	adds	r3, #18
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014dfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e02:	491b      	ldr	r1, [pc, #108]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014e04:	4613      	mov	r3, r2
 8014e06:	005b      	lsls	r3, r3, #1
 8014e08:	4413      	add	r3, r2
 8014e0a:	00db      	lsls	r3, r3, #3
 8014e0c:	440b      	add	r3, r1
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d021      	beq.n	8014e58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014e14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e18:	4915      	ldr	r1, [pc, #84]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	005b      	lsls	r3, r3, #1
 8014e1e:	4413      	add	r3, r2
 8014e20:	00db      	lsls	r3, r3, #3
 8014e22:	440b      	add	r3, r1
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e2c:	4910      	ldr	r1, [pc, #64]	; (8014e70 <etharp_update_arp_entry+0x148>)
 8014e2e:	4613      	mov	r3, r2
 8014e30:	005b      	lsls	r3, r3, #1
 8014e32:	4413      	add	r3, r2
 8014e34:	00db      	lsls	r3, r3, #3
 8014e36:	440b      	add	r3, r1
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e46:	9300      	str	r3, [sp, #0]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6939      	ldr	r1, [r7, #16]
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f001 ffb3 	bl	8016db8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014e52:	6938      	ldr	r0, [r7, #16]
 8014e54:	f7f7 fc4c 	bl	800c6f0 <pbuf_free>
  }
  return ERR_OK;
 8014e58:	2300      	movs	r3, #0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3718      	adds	r7, #24
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	0801aa2c 	.word	0x0801aa2c
 8014e68:	0801ab24 	.word	0x0801ab24
 8014e6c:	0801aaa4 	.word	0x0801aaa4
 8014e70:	20004b1c 	.word	0x20004b1c

08014e74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	60fb      	str	r3, [r7, #12]
 8014e80:	e01e      	b.n	8014ec0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014e82:	4913      	ldr	r1, [pc, #76]	; (8014ed0 <etharp_cleanup_netif+0x5c>)
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	4613      	mov	r3, r2
 8014e88:	005b      	lsls	r3, r3, #1
 8014e8a:	4413      	add	r3, r2
 8014e8c:	00db      	lsls	r3, r3, #3
 8014e8e:	440b      	add	r3, r1
 8014e90:	3314      	adds	r3, #20
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014e96:	7afb      	ldrb	r3, [r7, #11]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d00e      	beq.n	8014eba <etharp_cleanup_netif+0x46>
 8014e9c:	490c      	ldr	r1, [pc, #48]	; (8014ed0 <etharp_cleanup_netif+0x5c>)
 8014e9e:	68fa      	ldr	r2, [r7, #12]
 8014ea0:	4613      	mov	r3, r2
 8014ea2:	005b      	lsls	r3, r3, #1
 8014ea4:	4413      	add	r3, r2
 8014ea6:	00db      	lsls	r3, r3, #3
 8014ea8:	440b      	add	r3, r1
 8014eaa:	3308      	adds	r3, #8
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d102      	bne.n	8014eba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f7ff fce5 	bl	8014884 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	60fb      	str	r3, [r7, #12]
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2b09      	cmp	r3, #9
 8014ec4:	dddd      	ble.n	8014e82 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014ec6:	bf00      	nop
 8014ec8:	bf00      	nop
 8014eca:	3710      	adds	r7, #16
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	20004b1c 	.word	0x20004b1c

08014ed4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014ed4:	b5b0      	push	{r4, r5, r7, lr}
 8014ed6:	b08a      	sub	sp, #40	; 0x28
 8014ed8:	af04      	add	r7, sp, #16
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d107      	bne.n	8014ef4 <etharp_input+0x20>
 8014ee4:	4b3f      	ldr	r3, [pc, #252]	; (8014fe4 <etharp_input+0x110>)
 8014ee6:	f240 228a 	movw	r2, #650	; 0x28a
 8014eea:	493f      	ldr	r1, [pc, #252]	; (8014fe8 <etharp_input+0x114>)
 8014eec:	483f      	ldr	r0, [pc, #252]	; (8014fec <etharp_input+0x118>)
 8014eee:	f002 fa39 	bl	8017364 <iprintf>
 8014ef2:	e074      	b.n	8014fde <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	685b      	ldr	r3, [r3, #4]
 8014ef8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	881b      	ldrh	r3, [r3, #0]
 8014efe:	b29b      	uxth	r3, r3
 8014f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f04:	d10c      	bne.n	8014f20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014f0a:	2b06      	cmp	r3, #6
 8014f0c:	d108      	bne.n	8014f20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014f12:	2b04      	cmp	r3, #4
 8014f14:	d104      	bne.n	8014f20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	885b      	ldrh	r3, [r3, #2]
 8014f1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014f1c:	2b08      	cmp	r3, #8
 8014f1e:	d003      	beq.n	8014f28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f7f7 fbe5 	bl	800c6f0 <pbuf_free>
    return;
 8014f26:	e05a      	b.n	8014fde <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	330e      	adds	r3, #14
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	3318      	adds	r3, #24
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	3304      	adds	r3, #4
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d102      	bne.n	8014f48 <etharp_input+0x74>
    for_us = 0;
 8014f42:	2300      	movs	r3, #0
 8014f44:	75fb      	strb	r3, [r7, #23]
 8014f46:	e009      	b.n	8014f5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014f48:	68ba      	ldr	r2, [r7, #8]
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	bf0c      	ite	eq
 8014f54:	2301      	moveq	r3, #1
 8014f56:	2300      	movne	r3, #0
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	f103 0208 	add.w	r2, r3, #8
 8014f62:	7dfb      	ldrb	r3, [r7, #23]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d001      	beq.n	8014f6c <etharp_input+0x98>
 8014f68:	2301      	movs	r3, #1
 8014f6a:	e000      	b.n	8014f6e <etharp_input+0x9a>
 8014f6c:	2302      	movs	r3, #2
 8014f6e:	f107 010c 	add.w	r1, r7, #12
 8014f72:	6838      	ldr	r0, [r7, #0]
 8014f74:	f7ff fed8 	bl	8014d28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	88db      	ldrh	r3, [r3, #6]
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f82:	d003      	beq.n	8014f8c <etharp_input+0xb8>
 8014f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f88:	d01e      	beq.n	8014fc8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014f8a:	e025      	b.n	8014fd8 <etharp_input+0x104>
      if (for_us) {
 8014f8c:	7dfb      	ldrb	r3, [r7, #23]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d021      	beq.n	8014fd6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014fa8:	693a      	ldr	r2, [r7, #16]
 8014faa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014fac:	2102      	movs	r1, #2
 8014fae:	9103      	str	r1, [sp, #12]
 8014fb0:	f107 010c 	add.w	r1, r7, #12
 8014fb4:	9102      	str	r1, [sp, #8]
 8014fb6:	9201      	str	r2, [sp, #4]
 8014fb8:	9300      	str	r3, [sp, #0]
 8014fba:	462b      	mov	r3, r5
 8014fbc:	4622      	mov	r2, r4
 8014fbe:	4601      	mov	r1, r0
 8014fc0:	6838      	ldr	r0, [r7, #0]
 8014fc2:	f000 faef 	bl	80155a4 <etharp_raw>
      break;
 8014fc6:	e006      	b.n	8014fd6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014fc8:	f107 030c 	add.w	r3, r7, #12
 8014fcc:	4619      	mov	r1, r3
 8014fce:	6838      	ldr	r0, [r7, #0]
 8014fd0:	f7fe f9fc 	bl	80133cc <dhcp_arp_reply>
      break;
 8014fd4:	e000      	b.n	8014fd8 <etharp_input+0x104>
      break;
 8014fd6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f7f7 fb89 	bl	800c6f0 <pbuf_free>
}
 8014fde:	3718      	adds	r7, #24
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8014fe4:	0801aa2c 	.word	0x0801aa2c
 8014fe8:	0801ab7c 	.word	0x0801ab7c
 8014fec:	0801aaa4 	.word	0x0801aaa4

08014ff0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af02      	add	r7, sp, #8
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014ffe:	79fa      	ldrb	r2, [r7, #7]
 8015000:	4944      	ldr	r1, [pc, #272]	; (8015114 <etharp_output_to_arp_index+0x124>)
 8015002:	4613      	mov	r3, r2
 8015004:	005b      	lsls	r3, r3, #1
 8015006:	4413      	add	r3, r2
 8015008:	00db      	lsls	r3, r3, #3
 801500a:	440b      	add	r3, r1
 801500c:	3314      	adds	r3, #20
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	2b01      	cmp	r3, #1
 8015012:	d806      	bhi.n	8015022 <etharp_output_to_arp_index+0x32>
 8015014:	4b40      	ldr	r3, [pc, #256]	; (8015118 <etharp_output_to_arp_index+0x128>)
 8015016:	f240 22ee 	movw	r2, #750	; 0x2ee
 801501a:	4940      	ldr	r1, [pc, #256]	; (801511c <etharp_output_to_arp_index+0x12c>)
 801501c:	4840      	ldr	r0, [pc, #256]	; (8015120 <etharp_output_to_arp_index+0x130>)
 801501e:	f002 f9a1 	bl	8017364 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015022:	79fa      	ldrb	r2, [r7, #7]
 8015024:	493b      	ldr	r1, [pc, #236]	; (8015114 <etharp_output_to_arp_index+0x124>)
 8015026:	4613      	mov	r3, r2
 8015028:	005b      	lsls	r3, r3, #1
 801502a:	4413      	add	r3, r2
 801502c:	00db      	lsls	r3, r3, #3
 801502e:	440b      	add	r3, r1
 8015030:	3314      	adds	r3, #20
 8015032:	781b      	ldrb	r3, [r3, #0]
 8015034:	2b02      	cmp	r3, #2
 8015036:	d153      	bne.n	80150e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015038:	79fa      	ldrb	r2, [r7, #7]
 801503a:	4936      	ldr	r1, [pc, #216]	; (8015114 <etharp_output_to_arp_index+0x124>)
 801503c:	4613      	mov	r3, r2
 801503e:	005b      	lsls	r3, r3, #1
 8015040:	4413      	add	r3, r2
 8015042:	00db      	lsls	r3, r3, #3
 8015044:	440b      	add	r3, r1
 8015046:	3312      	adds	r3, #18
 8015048:	881b      	ldrh	r3, [r3, #0]
 801504a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801504e:	d919      	bls.n	8015084 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015050:	79fa      	ldrb	r2, [r7, #7]
 8015052:	4613      	mov	r3, r2
 8015054:	005b      	lsls	r3, r3, #1
 8015056:	4413      	add	r3, r2
 8015058:	00db      	lsls	r3, r3, #3
 801505a:	4a2e      	ldr	r2, [pc, #184]	; (8015114 <etharp_output_to_arp_index+0x124>)
 801505c:	4413      	add	r3, r2
 801505e:	3304      	adds	r3, #4
 8015060:	4619      	mov	r1, r3
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	f000 fb4c 	bl	8015700 <etharp_request>
 8015068:	4603      	mov	r3, r0
 801506a:	2b00      	cmp	r3, #0
 801506c:	d138      	bne.n	80150e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801506e:	79fa      	ldrb	r2, [r7, #7]
 8015070:	4928      	ldr	r1, [pc, #160]	; (8015114 <etharp_output_to_arp_index+0x124>)
 8015072:	4613      	mov	r3, r2
 8015074:	005b      	lsls	r3, r3, #1
 8015076:	4413      	add	r3, r2
 8015078:	00db      	lsls	r3, r3, #3
 801507a:	440b      	add	r3, r1
 801507c:	3314      	adds	r3, #20
 801507e:	2203      	movs	r2, #3
 8015080:	701a      	strb	r2, [r3, #0]
 8015082:	e02d      	b.n	80150e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015084:	79fa      	ldrb	r2, [r7, #7]
 8015086:	4923      	ldr	r1, [pc, #140]	; (8015114 <etharp_output_to_arp_index+0x124>)
 8015088:	4613      	mov	r3, r2
 801508a:	005b      	lsls	r3, r3, #1
 801508c:	4413      	add	r3, r2
 801508e:	00db      	lsls	r3, r3, #3
 8015090:	440b      	add	r3, r1
 8015092:	3312      	adds	r3, #18
 8015094:	881b      	ldrh	r3, [r3, #0]
 8015096:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801509a:	d321      	bcc.n	80150e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801509c:	79fa      	ldrb	r2, [r7, #7]
 801509e:	4613      	mov	r3, r2
 80150a0:	005b      	lsls	r3, r3, #1
 80150a2:	4413      	add	r3, r2
 80150a4:	00db      	lsls	r3, r3, #3
 80150a6:	4a1b      	ldr	r2, [pc, #108]	; (8015114 <etharp_output_to_arp_index+0x124>)
 80150a8:	4413      	add	r3, r2
 80150aa:	1d19      	adds	r1, r3, #4
 80150ac:	79fa      	ldrb	r2, [r7, #7]
 80150ae:	4613      	mov	r3, r2
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	4413      	add	r3, r2
 80150b4:	00db      	lsls	r3, r3, #3
 80150b6:	3308      	adds	r3, #8
 80150b8:	4a16      	ldr	r2, [pc, #88]	; (8015114 <etharp_output_to_arp_index+0x124>)
 80150ba:	4413      	add	r3, r2
 80150bc:	3304      	adds	r3, #4
 80150be:	461a      	mov	r2, r3
 80150c0:	68f8      	ldr	r0, [r7, #12]
 80150c2:	f000 fafb 	bl	80156bc <etharp_request_dst>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d109      	bne.n	80150e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80150cc:	79fa      	ldrb	r2, [r7, #7]
 80150ce:	4911      	ldr	r1, [pc, #68]	; (8015114 <etharp_output_to_arp_index+0x124>)
 80150d0:	4613      	mov	r3, r2
 80150d2:	005b      	lsls	r3, r3, #1
 80150d4:	4413      	add	r3, r2
 80150d6:	00db      	lsls	r3, r3, #3
 80150d8:	440b      	add	r3, r1
 80150da:	3314      	adds	r3, #20
 80150dc:	2203      	movs	r2, #3
 80150de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80150e6:	79fa      	ldrb	r2, [r7, #7]
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	3308      	adds	r3, #8
 80150f2:	4a08      	ldr	r2, [pc, #32]	; (8015114 <etharp_output_to_arp_index+0x124>)
 80150f4:	4413      	add	r3, r2
 80150f6:	3304      	adds	r3, #4
 80150f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80150fc:	9200      	str	r2, [sp, #0]
 80150fe:	460a      	mov	r2, r1
 8015100:	68b9      	ldr	r1, [r7, #8]
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f001 fe58 	bl	8016db8 <ethernet_output>
 8015108:	4603      	mov	r3, r0
}
 801510a:	4618      	mov	r0, r3
 801510c:	3710      	adds	r7, #16
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
 8015112:	bf00      	nop
 8015114:	20004b1c 	.word	0x20004b1c
 8015118:	0801aa2c 	.word	0x0801aa2c
 801511c:	0801ab9c 	.word	0x0801ab9c
 8015120:	0801aaa4 	.word	0x0801aaa4

08015124 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b08a      	sub	sp, #40	; 0x28
 8015128:	af02      	add	r7, sp, #8
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d106      	bne.n	8015148 <etharp_output+0x24>
 801513a:	4b73      	ldr	r3, [pc, #460]	; (8015308 <etharp_output+0x1e4>)
 801513c:	f240 321e 	movw	r2, #798	; 0x31e
 8015140:	4972      	ldr	r1, [pc, #456]	; (801530c <etharp_output+0x1e8>)
 8015142:	4873      	ldr	r0, [pc, #460]	; (8015310 <etharp_output+0x1ec>)
 8015144:	f002 f90e 	bl	8017364 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d106      	bne.n	801515c <etharp_output+0x38>
 801514e:	4b6e      	ldr	r3, [pc, #440]	; (8015308 <etharp_output+0x1e4>)
 8015150:	f240 321f 	movw	r2, #799	; 0x31f
 8015154:	496f      	ldr	r1, [pc, #444]	; (8015314 <etharp_output+0x1f0>)
 8015156:	486e      	ldr	r0, [pc, #440]	; (8015310 <etharp_output+0x1ec>)
 8015158:	f002 f904 	bl	8017364 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d106      	bne.n	8015170 <etharp_output+0x4c>
 8015162:	4b69      	ldr	r3, [pc, #420]	; (8015308 <etharp_output+0x1e4>)
 8015164:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015168:	496b      	ldr	r1, [pc, #428]	; (8015318 <etharp_output+0x1f4>)
 801516a:	4869      	ldr	r0, [pc, #420]	; (8015310 <etharp_output+0x1ec>)
 801516c:	f002 f8fa 	bl	8017364 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	68f9      	ldr	r1, [r7, #12]
 8015176:	4618      	mov	r0, r3
 8015178:	f000 ff16 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 801517c:	4603      	mov	r3, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d002      	beq.n	8015188 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015182:	4b66      	ldr	r3, [pc, #408]	; (801531c <etharp_output+0x1f8>)
 8015184:	61fb      	str	r3, [r7, #28]
 8015186:	e0af      	b.n	80152e8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015190:	2be0      	cmp	r3, #224	; 0xe0
 8015192:	d118      	bne.n	80151c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015194:	2301      	movs	r3, #1
 8015196:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015198:	2300      	movs	r3, #0
 801519a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801519c:	235e      	movs	r3, #94	; 0x5e
 801519e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	3301      	adds	r3, #1
 80151a4:	781b      	ldrb	r3, [r3, #0]
 80151a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	3302      	adds	r3, #2
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	3303      	adds	r3, #3
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80151be:	f107 0310 	add.w	r3, r7, #16
 80151c2:	61fb      	str	r3, [r7, #28]
 80151c4:	e090      	b.n	80152e8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	3304      	adds	r3, #4
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	405a      	eors	r2, r3
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	3308      	adds	r3, #8
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	4013      	ands	r3, r2
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d012      	beq.n	8015204 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80151e4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80151e8:	4293      	cmp	r3, r2
 80151ea:	d00b      	beq.n	8015204 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	330c      	adds	r3, #12
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d003      	beq.n	80151fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	330c      	adds	r3, #12
 80151fa:	61bb      	str	r3, [r7, #24]
 80151fc:	e002      	b.n	8015204 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80151fe:	f06f 0303 	mvn.w	r3, #3
 8015202:	e07d      	b.n	8015300 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015204:	4b46      	ldr	r3, [pc, #280]	; (8015320 <etharp_output+0x1fc>)
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	4619      	mov	r1, r3
 801520a:	4a46      	ldr	r2, [pc, #280]	; (8015324 <etharp_output+0x200>)
 801520c:	460b      	mov	r3, r1
 801520e:	005b      	lsls	r3, r3, #1
 8015210:	440b      	add	r3, r1
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	4413      	add	r3, r2
 8015216:	3314      	adds	r3, #20
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	2b01      	cmp	r3, #1
 801521c:	d925      	bls.n	801526a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801521e:	4b40      	ldr	r3, [pc, #256]	; (8015320 <etharp_output+0x1fc>)
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	4619      	mov	r1, r3
 8015224:	4a3f      	ldr	r2, [pc, #252]	; (8015324 <etharp_output+0x200>)
 8015226:	460b      	mov	r3, r1
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	440b      	add	r3, r1
 801522c:	00db      	lsls	r3, r3, #3
 801522e:	4413      	add	r3, r2
 8015230:	3308      	adds	r3, #8
 8015232:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	429a      	cmp	r2, r3
 8015238:	d117      	bne.n	801526a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	4b38      	ldr	r3, [pc, #224]	; (8015320 <etharp_output+0x1fc>)
 8015240:	781b      	ldrb	r3, [r3, #0]
 8015242:	4618      	mov	r0, r3
 8015244:	4937      	ldr	r1, [pc, #220]	; (8015324 <etharp_output+0x200>)
 8015246:	4603      	mov	r3, r0
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	4403      	add	r3, r0
 801524c:	00db      	lsls	r3, r3, #3
 801524e:	440b      	add	r3, r1
 8015250:	3304      	adds	r3, #4
 8015252:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015254:	429a      	cmp	r2, r3
 8015256:	d108      	bne.n	801526a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015258:	4b31      	ldr	r3, [pc, #196]	; (8015320 <etharp_output+0x1fc>)
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	461a      	mov	r2, r3
 801525e:	68b9      	ldr	r1, [r7, #8]
 8015260:	68f8      	ldr	r0, [r7, #12]
 8015262:	f7ff fec5 	bl	8014ff0 <etharp_output_to_arp_index>
 8015266:	4603      	mov	r3, r0
 8015268:	e04a      	b.n	8015300 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801526a:	2300      	movs	r3, #0
 801526c:	75fb      	strb	r3, [r7, #23]
 801526e:	e031      	b.n	80152d4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015270:	7dfa      	ldrb	r2, [r7, #23]
 8015272:	492c      	ldr	r1, [pc, #176]	; (8015324 <etharp_output+0x200>)
 8015274:	4613      	mov	r3, r2
 8015276:	005b      	lsls	r3, r3, #1
 8015278:	4413      	add	r3, r2
 801527a:	00db      	lsls	r3, r3, #3
 801527c:	440b      	add	r3, r1
 801527e:	3314      	adds	r3, #20
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	2b01      	cmp	r3, #1
 8015284:	d923      	bls.n	80152ce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015286:	7dfa      	ldrb	r2, [r7, #23]
 8015288:	4926      	ldr	r1, [pc, #152]	; (8015324 <etharp_output+0x200>)
 801528a:	4613      	mov	r3, r2
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	4413      	add	r3, r2
 8015290:	00db      	lsls	r3, r3, #3
 8015292:	440b      	add	r3, r1
 8015294:	3308      	adds	r3, #8
 8015296:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015298:	68fa      	ldr	r2, [r7, #12]
 801529a:	429a      	cmp	r2, r3
 801529c:	d117      	bne.n	80152ce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801529e:	69bb      	ldr	r3, [r7, #24]
 80152a0:	6819      	ldr	r1, [r3, #0]
 80152a2:	7dfa      	ldrb	r2, [r7, #23]
 80152a4:	481f      	ldr	r0, [pc, #124]	; (8015324 <etharp_output+0x200>)
 80152a6:	4613      	mov	r3, r2
 80152a8:	005b      	lsls	r3, r3, #1
 80152aa:	4413      	add	r3, r2
 80152ac:	00db      	lsls	r3, r3, #3
 80152ae:	4403      	add	r3, r0
 80152b0:	3304      	adds	r3, #4
 80152b2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80152b4:	4299      	cmp	r1, r3
 80152b6:	d10a      	bne.n	80152ce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80152b8:	4a19      	ldr	r2, [pc, #100]	; (8015320 <etharp_output+0x1fc>)
 80152ba:	7dfb      	ldrb	r3, [r7, #23]
 80152bc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80152be:	7dfb      	ldrb	r3, [r7, #23]
 80152c0:	461a      	mov	r2, r3
 80152c2:	68b9      	ldr	r1, [r7, #8]
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	f7ff fe93 	bl	8014ff0 <etharp_output_to_arp_index>
 80152ca:	4603      	mov	r3, r0
 80152cc:	e018      	b.n	8015300 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80152ce:	7dfb      	ldrb	r3, [r7, #23]
 80152d0:	3301      	adds	r3, #1
 80152d2:	75fb      	strb	r3, [r7, #23]
 80152d4:	7dfb      	ldrb	r3, [r7, #23]
 80152d6:	2b09      	cmp	r3, #9
 80152d8:	d9ca      	bls.n	8015270 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80152da:	68ba      	ldr	r2, [r7, #8]
 80152dc:	69b9      	ldr	r1, [r7, #24]
 80152de:	68f8      	ldr	r0, [r7, #12]
 80152e0:	f000 f822 	bl	8015328 <etharp_query>
 80152e4:	4603      	mov	r3, r0
 80152e6:	e00b      	b.n	8015300 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80152ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80152f2:	9300      	str	r3, [sp, #0]
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	68b9      	ldr	r1, [r7, #8]
 80152f8:	68f8      	ldr	r0, [r7, #12]
 80152fa:	f001 fd5d 	bl	8016db8 <ethernet_output>
 80152fe:	4603      	mov	r3, r0
}
 8015300:	4618      	mov	r0, r3
 8015302:	3720      	adds	r7, #32
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}
 8015308:	0801aa2c 	.word	0x0801aa2c
 801530c:	0801ab7c 	.word	0x0801ab7c
 8015310:	0801aaa4 	.word	0x0801aaa4
 8015314:	0801abcc 	.word	0x0801abcc
 8015318:	0801ab6c 	.word	0x0801ab6c
 801531c:	0801b37c 	.word	0x0801b37c
 8015320:	20004c0c 	.word	0x20004c0c
 8015324:	20004b1c 	.word	0x20004b1c

08015328 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08c      	sub	sp, #48	; 0x30
 801532c:	af02      	add	r7, sp, #8
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	332a      	adds	r3, #42	; 0x2a
 8015338:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801533a:	23ff      	movs	r3, #255	; 0xff
 801533c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015340:	2300      	movs	r3, #0
 8015342:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	68f9      	ldr	r1, [r7, #12]
 801534a:	4618      	mov	r0, r3
 801534c:	f000 fe2c 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d10c      	bne.n	8015370 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801535e:	2be0      	cmp	r3, #224	; 0xe0
 8015360:	d006      	beq.n	8015370 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d003      	beq.n	8015370 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d102      	bne.n	8015376 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015370:	f06f 030f 	mvn.w	r3, #15
 8015374:	e101      	b.n	801557a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015376:	68fa      	ldr	r2, [r7, #12]
 8015378:	2101      	movs	r1, #1
 801537a:	68b8      	ldr	r0, [r7, #8]
 801537c:	f7ff fb5c 	bl	8014a38 <etharp_find_entry>
 8015380:	4603      	mov	r3, r0
 8015382:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015384:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015388:	2b00      	cmp	r3, #0
 801538a:	da02      	bge.n	8015392 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801538c:	8a7b      	ldrh	r3, [r7, #18]
 801538e:	b25b      	sxtb	r3, r3
 8015390:	e0f3      	b.n	801557a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015392:	8a7b      	ldrh	r3, [r7, #18]
 8015394:	2b7e      	cmp	r3, #126	; 0x7e
 8015396:	d906      	bls.n	80153a6 <etharp_query+0x7e>
 8015398:	4b7a      	ldr	r3, [pc, #488]	; (8015584 <etharp_query+0x25c>)
 801539a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801539e:	497a      	ldr	r1, [pc, #488]	; (8015588 <etharp_query+0x260>)
 80153a0:	487a      	ldr	r0, [pc, #488]	; (801558c <etharp_query+0x264>)
 80153a2:	f001 ffdf 	bl	8017364 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80153a6:	8a7b      	ldrh	r3, [r7, #18]
 80153a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80153aa:	7c7a      	ldrb	r2, [r7, #17]
 80153ac:	4978      	ldr	r1, [pc, #480]	; (8015590 <etharp_query+0x268>)
 80153ae:	4613      	mov	r3, r2
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	4413      	add	r3, r2
 80153b4:	00db      	lsls	r3, r3, #3
 80153b6:	440b      	add	r3, r1
 80153b8:	3314      	adds	r3, #20
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d115      	bne.n	80153ec <etharp_query+0xc4>
    is_new_entry = 1;
 80153c0:	2301      	movs	r3, #1
 80153c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80153c4:	7c7a      	ldrb	r2, [r7, #17]
 80153c6:	4972      	ldr	r1, [pc, #456]	; (8015590 <etharp_query+0x268>)
 80153c8:	4613      	mov	r3, r2
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	4413      	add	r3, r2
 80153ce:	00db      	lsls	r3, r3, #3
 80153d0:	440b      	add	r3, r1
 80153d2:	3314      	adds	r3, #20
 80153d4:	2201      	movs	r2, #1
 80153d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80153d8:	7c7a      	ldrb	r2, [r7, #17]
 80153da:	496d      	ldr	r1, [pc, #436]	; (8015590 <etharp_query+0x268>)
 80153dc:	4613      	mov	r3, r2
 80153de:	005b      	lsls	r3, r3, #1
 80153e0:	4413      	add	r3, r2
 80153e2:	00db      	lsls	r3, r3, #3
 80153e4:	440b      	add	r3, r1
 80153e6:	3308      	adds	r3, #8
 80153e8:	68fa      	ldr	r2, [r7, #12]
 80153ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80153ec:	7c7a      	ldrb	r2, [r7, #17]
 80153ee:	4968      	ldr	r1, [pc, #416]	; (8015590 <etharp_query+0x268>)
 80153f0:	4613      	mov	r3, r2
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	4413      	add	r3, r2
 80153f6:	00db      	lsls	r3, r3, #3
 80153f8:	440b      	add	r3, r1
 80153fa:	3314      	adds	r3, #20
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	2b01      	cmp	r3, #1
 8015400:	d011      	beq.n	8015426 <etharp_query+0xfe>
 8015402:	7c7a      	ldrb	r2, [r7, #17]
 8015404:	4962      	ldr	r1, [pc, #392]	; (8015590 <etharp_query+0x268>)
 8015406:	4613      	mov	r3, r2
 8015408:	005b      	lsls	r3, r3, #1
 801540a:	4413      	add	r3, r2
 801540c:	00db      	lsls	r3, r3, #3
 801540e:	440b      	add	r3, r1
 8015410:	3314      	adds	r3, #20
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	2b01      	cmp	r3, #1
 8015416:	d806      	bhi.n	8015426 <etharp_query+0xfe>
 8015418:	4b5a      	ldr	r3, [pc, #360]	; (8015584 <etharp_query+0x25c>)
 801541a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801541e:	495d      	ldr	r1, [pc, #372]	; (8015594 <etharp_query+0x26c>)
 8015420:	485a      	ldr	r0, [pc, #360]	; (801558c <etharp_query+0x264>)
 8015422:	f001 ff9f 	bl	8017364 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015426:	6a3b      	ldr	r3, [r7, #32]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d102      	bne.n	8015432 <etharp_query+0x10a>
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d10c      	bne.n	801544c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015432:	68b9      	ldr	r1, [r7, #8]
 8015434:	68f8      	ldr	r0, [r7, #12]
 8015436:	f000 f963 	bl	8015700 <etharp_request>
 801543a:	4603      	mov	r3, r0
 801543c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d102      	bne.n	801544c <etharp_query+0x124>
      return result;
 8015446:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801544a:	e096      	b.n	801557a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d106      	bne.n	8015460 <etharp_query+0x138>
 8015452:	4b4c      	ldr	r3, [pc, #304]	; (8015584 <etharp_query+0x25c>)
 8015454:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015458:	494f      	ldr	r1, [pc, #316]	; (8015598 <etharp_query+0x270>)
 801545a:	484c      	ldr	r0, [pc, #304]	; (801558c <etharp_query+0x264>)
 801545c:	f001 ff82 	bl	8017364 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015460:	7c7a      	ldrb	r2, [r7, #17]
 8015462:	494b      	ldr	r1, [pc, #300]	; (8015590 <etharp_query+0x268>)
 8015464:	4613      	mov	r3, r2
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	4413      	add	r3, r2
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	440b      	add	r3, r1
 801546e:	3314      	adds	r3, #20
 8015470:	781b      	ldrb	r3, [r3, #0]
 8015472:	2b01      	cmp	r3, #1
 8015474:	d917      	bls.n	80154a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015476:	4a49      	ldr	r2, [pc, #292]	; (801559c <etharp_query+0x274>)
 8015478:	7c7b      	ldrb	r3, [r7, #17]
 801547a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801547c:	7c7a      	ldrb	r2, [r7, #17]
 801547e:	4613      	mov	r3, r2
 8015480:	005b      	lsls	r3, r3, #1
 8015482:	4413      	add	r3, r2
 8015484:	00db      	lsls	r3, r3, #3
 8015486:	3308      	adds	r3, #8
 8015488:	4a41      	ldr	r2, [pc, #260]	; (8015590 <etharp_query+0x268>)
 801548a:	4413      	add	r3, r2
 801548c:	3304      	adds	r3, #4
 801548e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015492:	9200      	str	r2, [sp, #0]
 8015494:	697a      	ldr	r2, [r7, #20]
 8015496:	6879      	ldr	r1, [r7, #4]
 8015498:	68f8      	ldr	r0, [r7, #12]
 801549a:	f001 fc8d 	bl	8016db8 <ethernet_output>
 801549e:	4603      	mov	r3, r0
 80154a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80154a4:	e067      	b.n	8015576 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80154a6:	7c7a      	ldrb	r2, [r7, #17]
 80154a8:	4939      	ldr	r1, [pc, #228]	; (8015590 <etharp_query+0x268>)
 80154aa:	4613      	mov	r3, r2
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	4413      	add	r3, r2
 80154b0:	00db      	lsls	r3, r3, #3
 80154b2:	440b      	add	r3, r1
 80154b4:	3314      	adds	r3, #20
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	2b01      	cmp	r3, #1
 80154ba:	d15c      	bne.n	8015576 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80154bc:	2300      	movs	r3, #0
 80154be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80154c4:	e01c      	b.n	8015500 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	895a      	ldrh	r2, [r3, #10]
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	891b      	ldrh	r3, [r3, #8]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d10a      	bne.n	80154e8 <etharp_query+0x1c0>
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d006      	beq.n	80154e8 <etharp_query+0x1c0>
 80154da:	4b2a      	ldr	r3, [pc, #168]	; (8015584 <etharp_query+0x25c>)
 80154dc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80154e0:	492f      	ldr	r1, [pc, #188]	; (80155a0 <etharp_query+0x278>)
 80154e2:	482a      	ldr	r0, [pc, #168]	; (801558c <etharp_query+0x264>)
 80154e4:	f001 ff3e 	bl	8017364 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	7b1b      	ldrb	r3, [r3, #12]
 80154ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d002      	beq.n	80154fa <etharp_query+0x1d2>
        copy_needed = 1;
 80154f4:	2301      	movs	r3, #1
 80154f6:	61bb      	str	r3, [r7, #24]
        break;
 80154f8:	e005      	b.n	8015506 <etharp_query+0x1de>
      }
      p = p->next;
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d1df      	bne.n	80154c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d007      	beq.n	801551c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801550c:	687a      	ldr	r2, [r7, #4]
 801550e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015512:	200e      	movs	r0, #14
 8015514:	f7f7 fb64 	bl	800cbe0 <pbuf_clone>
 8015518:	61f8      	str	r0, [r7, #28]
 801551a:	e004      	b.n	8015526 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015520:	69f8      	ldr	r0, [r7, #28]
 8015522:	f7f7 f98b 	bl	800c83c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d021      	beq.n	8015570 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801552c:	7c7a      	ldrb	r2, [r7, #17]
 801552e:	4918      	ldr	r1, [pc, #96]	; (8015590 <etharp_query+0x268>)
 8015530:	4613      	mov	r3, r2
 8015532:	005b      	lsls	r3, r3, #1
 8015534:	4413      	add	r3, r2
 8015536:	00db      	lsls	r3, r3, #3
 8015538:	440b      	add	r3, r1
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d00a      	beq.n	8015556 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015540:	7c7a      	ldrb	r2, [r7, #17]
 8015542:	4913      	ldr	r1, [pc, #76]	; (8015590 <etharp_query+0x268>)
 8015544:	4613      	mov	r3, r2
 8015546:	005b      	lsls	r3, r3, #1
 8015548:	4413      	add	r3, r2
 801554a:	00db      	lsls	r3, r3, #3
 801554c:	440b      	add	r3, r1
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	4618      	mov	r0, r3
 8015552:	f7f7 f8cd 	bl	800c6f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8015556:	7c7a      	ldrb	r2, [r7, #17]
 8015558:	490d      	ldr	r1, [pc, #52]	; (8015590 <etharp_query+0x268>)
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	00db      	lsls	r3, r3, #3
 8015562:	440b      	add	r3, r1
 8015564:	69fa      	ldr	r2, [r7, #28]
 8015566:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015568:	2300      	movs	r3, #0
 801556a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801556e:	e002      	b.n	8015576 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015570:	23ff      	movs	r3, #255	; 0xff
 8015572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801557a:	4618      	mov	r0, r3
 801557c:	3728      	adds	r7, #40	; 0x28
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
 8015582:	bf00      	nop
 8015584:	0801aa2c 	.word	0x0801aa2c
 8015588:	0801abd8 	.word	0x0801abd8
 801558c:	0801aaa4 	.word	0x0801aaa4
 8015590:	20004b1c 	.word	0x20004b1c
 8015594:	0801abe8 	.word	0x0801abe8
 8015598:	0801abcc 	.word	0x0801abcc
 801559c:	20004c0c 	.word	0x20004c0c
 80155a0:	0801ac10 	.word	0x0801ac10

080155a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b08a      	sub	sp, #40	; 0x28
 80155a8:	af02      	add	r7, sp, #8
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	607a      	str	r2, [r7, #4]
 80155b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80155b2:	2300      	movs	r3, #0
 80155b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d106      	bne.n	80155ca <etharp_raw+0x26>
 80155bc:	4b3a      	ldr	r3, [pc, #232]	; (80156a8 <etharp_raw+0x104>)
 80155be:	f240 4257 	movw	r2, #1111	; 0x457
 80155c2:	493a      	ldr	r1, [pc, #232]	; (80156ac <etharp_raw+0x108>)
 80155c4:	483a      	ldr	r0, [pc, #232]	; (80156b0 <etharp_raw+0x10c>)
 80155c6:	f001 fecd 	bl	8017364 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80155ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155ce:	211c      	movs	r1, #28
 80155d0:	200e      	movs	r0, #14
 80155d2:	f7f6 fda9 	bl	800c128 <pbuf_alloc>
 80155d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80155d8:	69bb      	ldr	r3, [r7, #24]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d102      	bne.n	80155e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80155de:	f04f 33ff 	mov.w	r3, #4294967295
 80155e2:	e05d      	b.n	80156a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	895b      	ldrh	r3, [r3, #10]
 80155e8:	2b1b      	cmp	r3, #27
 80155ea:	d806      	bhi.n	80155fa <etharp_raw+0x56>
 80155ec:	4b2e      	ldr	r3, [pc, #184]	; (80156a8 <etharp_raw+0x104>)
 80155ee:	f240 4262 	movw	r2, #1122	; 0x462
 80155f2:	4930      	ldr	r1, [pc, #192]	; (80156b4 <etharp_raw+0x110>)
 80155f4:	482e      	ldr	r0, [pc, #184]	; (80156b0 <etharp_raw+0x10c>)
 80155f6:	f001 feb5 	bl	8017364 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	685b      	ldr	r3, [r3, #4]
 80155fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015600:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015602:	4618      	mov	r0, r3
 8015604:	f7f5 fcbc 	bl	800af80 <lwip_htons>
 8015608:	4603      	mov	r3, r0
 801560a:	461a      	mov	r2, r3
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015616:	2b06      	cmp	r3, #6
 8015618:	d006      	beq.n	8015628 <etharp_raw+0x84>
 801561a:	4b23      	ldr	r3, [pc, #140]	; (80156a8 <etharp_raw+0x104>)
 801561c:	f240 4269 	movw	r2, #1129	; 0x469
 8015620:	4925      	ldr	r1, [pc, #148]	; (80156b8 <etharp_raw+0x114>)
 8015622:	4823      	ldr	r0, [pc, #140]	; (80156b0 <etharp_raw+0x10c>)
 8015624:	f001 fe9e 	bl	8017364 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	3308      	adds	r3, #8
 801562c:	2206      	movs	r2, #6
 801562e:	6839      	ldr	r1, [r7, #0]
 8015630:	4618      	mov	r0, r3
 8015632:	f001 fe26 	bl	8017282 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	3312      	adds	r3, #18
 801563a:	2206      	movs	r2, #6
 801563c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801563e:	4618      	mov	r0, r3
 8015640:	f001 fe1f 	bl	8017282 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	330e      	adds	r3, #14
 8015648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801564a:	6812      	ldr	r2, [r2, #0]
 801564c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	3318      	adds	r3, #24
 8015652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015654:	6812      	ldr	r2, [r2, #0]
 8015656:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	2200      	movs	r2, #0
 801565c:	701a      	strb	r2, [r3, #0]
 801565e:	2200      	movs	r2, #0
 8015660:	f042 0201 	orr.w	r2, r2, #1
 8015664:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	2200      	movs	r2, #0
 801566a:	f042 0208 	orr.w	r2, r2, #8
 801566e:	709a      	strb	r2, [r3, #2]
 8015670:	2200      	movs	r2, #0
 8015672:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	2206      	movs	r2, #6
 8015678:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	2204      	movs	r2, #4
 801567e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015680:	f640 0306 	movw	r3, #2054	; 0x806
 8015684:	9300      	str	r3, [sp, #0]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	68ba      	ldr	r2, [r7, #8]
 801568a:	69b9      	ldr	r1, [r7, #24]
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f001 fb93 	bl	8016db8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015692:	69b8      	ldr	r0, [r7, #24]
 8015694:	f7f7 f82c 	bl	800c6f0 <pbuf_free>
  p = NULL;
 8015698:	2300      	movs	r3, #0
 801569a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801569c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3720      	adds	r7, #32
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}
 80156a8:	0801aa2c 	.word	0x0801aa2c
 80156ac:	0801ab7c 	.word	0x0801ab7c
 80156b0:	0801aaa4 	.word	0x0801aaa4
 80156b4:	0801ac2c 	.word	0x0801ac2c
 80156b8:	0801ac60 	.word	0x0801ac60

080156bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b088      	sub	sp, #32
 80156c0:	af04      	add	r7, sp, #16
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80156d8:	2201      	movs	r2, #1
 80156da:	9203      	str	r2, [sp, #12]
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	9202      	str	r2, [sp, #8]
 80156e0:	4a06      	ldr	r2, [pc, #24]	; (80156fc <etharp_request_dst+0x40>)
 80156e2:	9201      	str	r2, [sp, #4]
 80156e4:	9300      	str	r3, [sp, #0]
 80156e6:	4603      	mov	r3, r0
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	68f8      	ldr	r0, [r7, #12]
 80156ec:	f7ff ff5a 	bl	80155a4 <etharp_raw>
 80156f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3710      	adds	r7, #16
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop
 80156fc:	0801b384 	.word	0x0801b384

08015700 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801570a:	4a05      	ldr	r2, [pc, #20]	; (8015720 <etharp_request+0x20>)
 801570c:	6839      	ldr	r1, [r7, #0]
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f7ff ffd4 	bl	80156bc <etharp_request_dst>
 8015714:	4603      	mov	r3, r0
}
 8015716:	4618      	mov	r0, r3
 8015718:	3708      	adds	r7, #8
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}
 801571e:	bf00      	nop
 8015720:	0801b37c 	.word	0x0801b37c

08015724 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b08e      	sub	sp, #56	; 0x38
 8015728:	af04      	add	r7, sp, #16
 801572a:	6078      	str	r0, [r7, #4]
 801572c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801572e:	4b79      	ldr	r3, [pc, #484]	; (8015914 <icmp_input+0x1f0>)
 8015730:	689b      	ldr	r3, [r3, #8]
 8015732:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015736:	781b      	ldrb	r3, [r3, #0]
 8015738:	f003 030f 	and.w	r3, r3, #15
 801573c:	b2db      	uxtb	r3, r3
 801573e:	009b      	lsls	r3, r3, #2
 8015740:	b2db      	uxtb	r3, r3
 8015742:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015746:	2b13      	cmp	r3, #19
 8015748:	f240 80cd 	bls.w	80158e6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	895b      	ldrh	r3, [r3, #10]
 8015750:	2b03      	cmp	r3, #3
 8015752:	f240 80ca 	bls.w	80158ea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015760:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015764:	2b00      	cmp	r3, #0
 8015766:	f000 80b7 	beq.w	80158d8 <icmp_input+0x1b4>
 801576a:	2b08      	cmp	r3, #8
 801576c:	f040 80b7 	bne.w	80158de <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015770:	4b69      	ldr	r3, [pc, #420]	; (8015918 <icmp_input+0x1f4>)
 8015772:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015774:	4b67      	ldr	r3, [pc, #412]	; (8015914 <icmp_input+0x1f0>)
 8015776:	695b      	ldr	r3, [r3, #20]
 8015778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801577c:	2be0      	cmp	r3, #224	; 0xe0
 801577e:	f000 80bb 	beq.w	80158f8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015782:	4b64      	ldr	r3, [pc, #400]	; (8015914 <icmp_input+0x1f0>)
 8015784:	695b      	ldr	r3, [r3, #20]
 8015786:	4a63      	ldr	r2, [pc, #396]	; (8015914 <icmp_input+0x1f0>)
 8015788:	6812      	ldr	r2, [r2, #0]
 801578a:	4611      	mov	r1, r2
 801578c:	4618      	mov	r0, r3
 801578e:	f000 fc0b 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 8015792:	4603      	mov	r3, r0
 8015794:	2b00      	cmp	r3, #0
 8015796:	f040 80b1 	bne.w	80158fc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	891b      	ldrh	r3, [r3, #8]
 801579e:	2b07      	cmp	r3, #7
 80157a0:	f240 80a5 	bls.w	80158ee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80157a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157a6:	330e      	adds	r3, #14
 80157a8:	4619      	mov	r1, r3
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f7f6 ff0a 	bl	800c5c4 <pbuf_add_header>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d04b      	beq.n	801584e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	891a      	ldrh	r2, [r3, #8]
 80157ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157bc:	4413      	add	r3, r2
 80157be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	891b      	ldrh	r3, [r3, #8]
 80157c4:	8b7a      	ldrh	r2, [r7, #26]
 80157c6:	429a      	cmp	r2, r3
 80157c8:	f0c0 809a 	bcc.w	8015900 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80157cc:	8b7b      	ldrh	r3, [r7, #26]
 80157ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157d2:	4619      	mov	r1, r3
 80157d4:	200e      	movs	r0, #14
 80157d6:	f7f6 fca7 	bl	800c128 <pbuf_alloc>
 80157da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	f000 8090 	beq.w	8015904 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	895b      	ldrh	r3, [r3, #10]
 80157e8:	461a      	mov	r2, r3
 80157ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157ec:	3308      	adds	r3, #8
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d203      	bcs.n	80157fa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80157f2:	6978      	ldr	r0, [r7, #20]
 80157f4:	f7f6 ff7c 	bl	800c6f0 <pbuf_free>
          goto icmperr;
 80157f8:	e085      	b.n	8015906 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015802:	4618      	mov	r0, r3
 8015804:	f001 fd3d 	bl	8017282 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801580a:	4619      	mov	r1, r3
 801580c:	6978      	ldr	r0, [r7, #20]
 801580e:	f7f6 fee9 	bl	800c5e4 <pbuf_remove_header>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d009      	beq.n	801582c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015818:	4b40      	ldr	r3, [pc, #256]	; (801591c <icmp_input+0x1f8>)
 801581a:	22b6      	movs	r2, #182	; 0xb6
 801581c:	4940      	ldr	r1, [pc, #256]	; (8015920 <icmp_input+0x1fc>)
 801581e:	4841      	ldr	r0, [pc, #260]	; (8015924 <icmp_input+0x200>)
 8015820:	f001 fda0 	bl	8017364 <iprintf>
          pbuf_free(r);
 8015824:	6978      	ldr	r0, [r7, #20]
 8015826:	f7f6 ff63 	bl	800c6f0 <pbuf_free>
          goto icmperr;
 801582a:	e06c      	b.n	8015906 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801582c:	6879      	ldr	r1, [r7, #4]
 801582e:	6978      	ldr	r0, [r7, #20]
 8015830:	f7f7 f892 	bl	800c958 <pbuf_copy>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d003      	beq.n	8015842 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801583a:	6978      	ldr	r0, [r7, #20]
 801583c:	f7f6 ff58 	bl	800c6f0 <pbuf_free>
          goto icmperr;
 8015840:	e061      	b.n	8015906 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f7f6 ff54 	bl	800c6f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	607b      	str	r3, [r7, #4]
 801584c:	e00f      	b.n	801586e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801584e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015850:	330e      	adds	r3, #14
 8015852:	4619      	mov	r1, r3
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f7f6 fec5 	bl	800c5e4 <pbuf_remove_header>
 801585a:	4603      	mov	r3, r0
 801585c:	2b00      	cmp	r3, #0
 801585e:	d006      	beq.n	801586e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015860:	4b2e      	ldr	r3, [pc, #184]	; (801591c <icmp_input+0x1f8>)
 8015862:	22c7      	movs	r2, #199	; 0xc7
 8015864:	4930      	ldr	r1, [pc, #192]	; (8015928 <icmp_input+0x204>)
 8015866:	482f      	ldr	r0, [pc, #188]	; (8015924 <icmp_input+0x200>)
 8015868:	f001 fd7c 	bl	8017364 <iprintf>
          goto icmperr;
 801586c:	e04b      	b.n	8015906 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015874:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015876:	4619      	mov	r1, r3
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7f6 fea3 	bl	800c5c4 <pbuf_add_header>
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	d12b      	bne.n	80158dc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	681a      	ldr	r2, [r3, #0]
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015892:	4b20      	ldr	r3, [pc, #128]	; (8015914 <icmp_input+0x1f0>)
 8015894:	691a      	ldr	r2, [r3, #16]
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	2200      	movs	r2, #0
 801589e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80158a0:	693b      	ldr	r3, [r7, #16]
 80158a2:	2200      	movs	r2, #0
 80158a4:	709a      	strb	r2, [r3, #2]
 80158a6:	2200      	movs	r2, #0
 80158a8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	22ff      	movs	r2, #255	; 0xff
 80158ae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2200      	movs	r2, #0
 80158b4:	729a      	strb	r2, [r3, #10]
 80158b6:	2200      	movs	r2, #0
 80158b8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	9302      	str	r3, [sp, #8]
 80158be:	2301      	movs	r3, #1
 80158c0:	9301      	str	r3, [sp, #4]
 80158c2:	2300      	movs	r3, #0
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	23ff      	movs	r3, #255	; 0xff
 80158c8:	2200      	movs	r2, #0
 80158ca:	69f9      	ldr	r1, [r7, #28]
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fa93 	bl	8015df8 <ip4_output_if>
 80158d2:	4603      	mov	r3, r0
 80158d4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80158d6:	e001      	b.n	80158dc <icmp_input+0x1b8>
      break;
 80158d8:	bf00      	nop
 80158da:	e000      	b.n	80158de <icmp_input+0x1ba>
      break;
 80158dc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f7f6 ff06 	bl	800c6f0 <pbuf_free>
  return;
 80158e4:	e013      	b.n	801590e <icmp_input+0x1ea>
    goto lenerr;
 80158e6:	bf00      	nop
 80158e8:	e002      	b.n	80158f0 <icmp_input+0x1cc>
    goto lenerr;
 80158ea:	bf00      	nop
 80158ec:	e000      	b.n	80158f0 <icmp_input+0x1cc>
        goto lenerr;
 80158ee:	bf00      	nop
lenerr:
  pbuf_free(p);
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7f6 fefd 	bl	800c6f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80158f6:	e00a      	b.n	801590e <icmp_input+0x1ea>
        goto icmperr;
 80158f8:	bf00      	nop
 80158fa:	e004      	b.n	8015906 <icmp_input+0x1e2>
        goto icmperr;
 80158fc:	bf00      	nop
 80158fe:	e002      	b.n	8015906 <icmp_input+0x1e2>
          goto icmperr;
 8015900:	bf00      	nop
 8015902:	e000      	b.n	8015906 <icmp_input+0x1e2>
          goto icmperr;
 8015904:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f7f6 fef2 	bl	800c6f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801590c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801590e:	3728      	adds	r7, #40	; 0x28
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}
 8015914:	20008464 	.word	0x20008464
 8015918:	20008478 	.word	0x20008478
 801591c:	0801aca4 	.word	0x0801aca4
 8015920:	0801acdc 	.word	0x0801acdc
 8015924:	0801ad14 	.word	0x0801ad14
 8015928:	0801ad3c 	.word	0x0801ad3c

0801592c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b082      	sub	sp, #8
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	460b      	mov	r3, r1
 8015936:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015938:	78fb      	ldrb	r3, [r7, #3]
 801593a:	461a      	mov	r2, r3
 801593c:	2103      	movs	r1, #3
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 f814 	bl	801596c <icmp_send_response>
}
 8015944:	bf00      	nop
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	460b      	mov	r3, r1
 8015956:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015958:	78fb      	ldrb	r3, [r7, #3]
 801595a:	461a      	mov	r2, r3
 801595c:	210b      	movs	r1, #11
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f000 f804 	bl	801596c <icmp_send_response>
}
 8015964:	bf00      	nop
 8015966:	3708      	adds	r7, #8
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b08c      	sub	sp, #48	; 0x30
 8015970:	af04      	add	r7, sp, #16
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	460b      	mov	r3, r1
 8015976:	70fb      	strb	r3, [r7, #3]
 8015978:	4613      	mov	r3, r2
 801597a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801597c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015980:	2124      	movs	r1, #36	; 0x24
 8015982:	2022      	movs	r0, #34	; 0x22
 8015984:	f7f6 fbd0 	bl	800c128 <pbuf_alloc>
 8015988:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801598a:	69fb      	ldr	r3, [r7, #28]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d04c      	beq.n	8015a2a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	895b      	ldrh	r3, [r3, #10]
 8015994:	2b23      	cmp	r3, #35	; 0x23
 8015996:	d806      	bhi.n	80159a6 <icmp_send_response+0x3a>
 8015998:	4b26      	ldr	r3, [pc, #152]	; (8015a34 <icmp_send_response+0xc8>)
 801599a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801599e:	4926      	ldr	r1, [pc, #152]	; (8015a38 <icmp_send_response+0xcc>)
 80159a0:	4826      	ldr	r0, [pc, #152]	; (8015a3c <icmp_send_response+0xd0>)
 80159a2:	f001 fcdf 	bl	8017364 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	685b      	ldr	r3, [r3, #4]
 80159b0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	78fa      	ldrb	r2, [r7, #3]
 80159b6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80159b8:	697b      	ldr	r3, [r7, #20]
 80159ba:	78ba      	ldrb	r2, [r7, #2]
 80159bc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	2200      	movs	r2, #0
 80159c2:	711a      	strb	r2, [r3, #4]
 80159c4:	2200      	movs	r2, #0
 80159c6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	2200      	movs	r2, #0
 80159cc:	719a      	strb	r2, [r3, #6]
 80159ce:	2200      	movs	r2, #0
 80159d0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	f103 0008 	add.w	r0, r3, #8
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	221c      	movs	r2, #28
 80159e0:	4619      	mov	r1, r3
 80159e2:	f001 fc4e 	bl	8017282 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80159ec:	f107 030c 	add.w	r3, r7, #12
 80159f0:	4618      	mov	r0, r3
 80159f2:	f000 f825 	bl	8015a40 <ip4_route>
 80159f6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d011      	beq.n	8015a22 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	2200      	movs	r2, #0
 8015a02:	709a      	strb	r2, [r3, #2]
 8015a04:	2200      	movs	r2, #0
 8015a06:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015a08:	f107 020c 	add.w	r2, r7, #12
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	9302      	str	r3, [sp, #8]
 8015a10:	2301      	movs	r3, #1
 8015a12:	9301      	str	r3, [sp, #4]
 8015a14:	2300      	movs	r3, #0
 8015a16:	9300      	str	r3, [sp, #0]
 8015a18:	23ff      	movs	r3, #255	; 0xff
 8015a1a:	2100      	movs	r1, #0
 8015a1c:	69f8      	ldr	r0, [r7, #28]
 8015a1e:	f000 f9eb 	bl	8015df8 <ip4_output_if>
  }
  pbuf_free(q);
 8015a22:	69f8      	ldr	r0, [r7, #28]
 8015a24:	f7f6 fe64 	bl	800c6f0 <pbuf_free>
 8015a28:	e000      	b.n	8015a2c <icmp_send_response+0xc0>
    return;
 8015a2a:	bf00      	nop
}
 8015a2c:	3720      	adds	r7, #32
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	0801aca4 	.word	0x0801aca4
 8015a38:	0801ad70 	.word	0x0801ad70
 8015a3c:	0801ad14 	.word	0x0801ad14

08015a40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015a40:	b480      	push	{r7}
 8015a42:	b085      	sub	sp, #20
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015a48:	4b33      	ldr	r3, [pc, #204]	; (8015b18 <ip4_route+0xd8>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	60fb      	str	r3, [r7, #12]
 8015a4e:	e036      	b.n	8015abe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a56:	f003 0301 	and.w	r3, r3, #1
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d02b      	beq.n	8015ab8 <ip4_route+0x78>
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a66:	089b      	lsrs	r3, r3, #2
 8015a68:	f003 0301 	and.w	r3, r3, #1
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d022      	beq.n	8015ab8 <ip4_route+0x78>
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	3304      	adds	r3, #4
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d01d      	beq.n	8015ab8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681a      	ldr	r2, [r3, #0]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	3304      	adds	r3, #4
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	405a      	eors	r2, r3
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	3308      	adds	r3, #8
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	4013      	ands	r3, r2
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d101      	bne.n	8015a98 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	e038      	b.n	8015b0a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a9e:	f003 0302 	and.w	r3, r3, #2
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d108      	bne.n	8015ab8 <ip4_route+0x78>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	330c      	adds	r3, #12
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d101      	bne.n	8015ab8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	e028      	b.n	8015b0a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	60fb      	str	r3, [r7, #12]
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d1c5      	bne.n	8015a50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ac4:	4b15      	ldr	r3, [pc, #84]	; (8015b1c <ip4_route+0xdc>)
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d01a      	beq.n	8015b02 <ip4_route+0xc2>
 8015acc:	4b13      	ldr	r3, [pc, #76]	; (8015b1c <ip4_route+0xdc>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ad4:	f003 0301 	and.w	r3, r3, #1
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d012      	beq.n	8015b02 <ip4_route+0xc2>
 8015adc:	4b0f      	ldr	r3, [pc, #60]	; (8015b1c <ip4_route+0xdc>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ae4:	f003 0304 	and.w	r3, r3, #4
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d00a      	beq.n	8015b02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015aec:	4b0b      	ldr	r3, [pc, #44]	; (8015b1c <ip4_route+0xdc>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	3304      	adds	r3, #4
 8015af2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d004      	beq.n	8015b02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	b2db      	uxtb	r3, r3
 8015afe:	2b7f      	cmp	r3, #127	; 0x7f
 8015b00:	d101      	bne.n	8015b06 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015b02:	2300      	movs	r3, #0
 8015b04:	e001      	b.n	8015b0a <ip4_route+0xca>
  }

  return netif_default;
 8015b06:	4b05      	ldr	r3, [pc, #20]	; (8015b1c <ip4_route+0xdc>)
 8015b08:	681b      	ldr	r3, [r3, #0]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3714      	adds	r7, #20
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr
 8015b16:	bf00      	nop
 8015b18:	2000bb88 	.word	0x2000bb88
 8015b1c:	2000bb8c 	.word	0x2000bb8c

08015b20 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b2e:	f003 0301 	and.w	r3, r3, #1
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d016      	beq.n	8015b66 <ip4_input_accept+0x46>
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	3304      	adds	r3, #4
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d011      	beq.n	8015b66 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b42:	4b0b      	ldr	r3, [pc, #44]	; (8015b70 <ip4_input_accept+0x50>)
 8015b44:	695a      	ldr	r2, [r3, #20]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	3304      	adds	r3, #4
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d008      	beq.n	8015b62 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015b50:	4b07      	ldr	r3, [pc, #28]	; (8015b70 <ip4_input_accept+0x50>)
 8015b52:	695b      	ldr	r3, [r3, #20]
 8015b54:	6879      	ldr	r1, [r7, #4]
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 fa26 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 8015b5c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d001      	beq.n	8015b66 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015b62:	2301      	movs	r3, #1
 8015b64:	e000      	b.n	8015b68 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015b66:	2300      	movs	r3, #0
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}
 8015b70:	20008464 	.word	0x20008464

08015b74 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b088      	sub	sp, #32
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015b7e:	2301      	movs	r3, #1
 8015b80:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	091b      	lsrs	r3, r3, #4
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b04      	cmp	r3, #4
 8015b92:	d004      	beq.n	8015b9e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f7f6 fdab 	bl	800c6f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	e123      	b.n	8015de6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015b9e:	69fb      	ldr	r3, [r7, #28]
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	f003 030f 	and.w	r3, r3, #15
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	885b      	ldrh	r3, [r3, #2]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7f5 f9e3 	bl	800af80 <lwip_htons>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	891b      	ldrh	r3, [r3, #8]
 8015bc2:	8a3a      	ldrh	r2, [r7, #16]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d204      	bcs.n	8015bd2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015bc8:	8a3b      	ldrh	r3, [r7, #16]
 8015bca:	4619      	mov	r1, r3
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f7f6 fc09 	bl	800c3e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	895b      	ldrh	r3, [r3, #10]
 8015bd6:	8a7a      	ldrh	r2, [r7, #18]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d807      	bhi.n	8015bec <ip4_input+0x78>
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	891b      	ldrh	r3, [r3, #8]
 8015be0:	8a3a      	ldrh	r2, [r7, #16]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d802      	bhi.n	8015bec <ip4_input+0x78>
 8015be6:	8a7b      	ldrh	r3, [r7, #18]
 8015be8:	2b13      	cmp	r3, #19
 8015bea:	d804      	bhi.n	8015bf6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7f6 fd7f 	bl	800c6f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	e0f7      	b.n	8015de6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	691b      	ldr	r3, [r3, #16]
 8015bfa:	4a7d      	ldr	r2, [pc, #500]	; (8015df0 <ip4_input+0x27c>)
 8015bfc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	4a7b      	ldr	r2, [pc, #492]	; (8015df0 <ip4_input+0x27c>)
 8015c04:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c06:	4b7a      	ldr	r3, [pc, #488]	; (8015df0 <ip4_input+0x27c>)
 8015c08:	695b      	ldr	r3, [r3, #20]
 8015c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c0e:	2be0      	cmp	r3, #224	; 0xe0
 8015c10:	d112      	bne.n	8015c38 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c18:	f003 0301 	and.w	r3, r3, #1
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d007      	beq.n	8015c32 <ip4_input+0xbe>
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	3304      	adds	r3, #4
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d002      	beq.n	8015c32 <ip4_input+0xbe>
      netif = inp;
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	61bb      	str	r3, [r7, #24]
 8015c30:	e02a      	b.n	8015c88 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015c32:	2300      	movs	r3, #0
 8015c34:	61bb      	str	r3, [r7, #24]
 8015c36:	e027      	b.n	8015c88 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015c38:	6838      	ldr	r0, [r7, #0]
 8015c3a:	f7ff ff71 	bl	8015b20 <ip4_input_accept>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d002      	beq.n	8015c4a <ip4_input+0xd6>
      netif = inp;
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	61bb      	str	r3, [r7, #24]
 8015c48:	e01e      	b.n	8015c88 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015c4e:	4b68      	ldr	r3, [pc, #416]	; (8015df0 <ip4_input+0x27c>)
 8015c50:	695b      	ldr	r3, [r3, #20]
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	2b7f      	cmp	r3, #127	; 0x7f
 8015c56:	d017      	beq.n	8015c88 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015c58:	4b66      	ldr	r3, [pc, #408]	; (8015df4 <ip4_input+0x280>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	61bb      	str	r3, [r7, #24]
 8015c5e:	e00e      	b.n	8015c7e <ip4_input+0x10a>
          if (netif == inp) {
 8015c60:	69ba      	ldr	r2, [r7, #24]
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d006      	beq.n	8015c76 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015c68:	69b8      	ldr	r0, [r7, #24]
 8015c6a:	f7ff ff59 	bl	8015b20 <ip4_input_accept>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d108      	bne.n	8015c86 <ip4_input+0x112>
 8015c74:	e000      	b.n	8015c78 <ip4_input+0x104>
            continue;
 8015c76:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	61bb      	str	r3, [r7, #24]
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d1ed      	bne.n	8015c60 <ip4_input+0xec>
 8015c84:	e000      	b.n	8015c88 <ip4_input+0x114>
            break;
 8015c86:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015c88:	69bb      	ldr	r3, [r7, #24]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d111      	bne.n	8015cb2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	7a5b      	ldrb	r3, [r3, #9]
 8015c92:	2b11      	cmp	r3, #17
 8015c94:	d10d      	bne.n	8015cb2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015c96:	8a7b      	ldrh	r3, [r7, #18]
 8015c98:	69fa      	ldr	r2, [r7, #28]
 8015c9a:	4413      	add	r3, r2
 8015c9c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	885b      	ldrh	r3, [r3, #2]
 8015ca2:	b29b      	uxth	r3, r3
 8015ca4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015ca8:	d103      	bne.n	8015cb2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d017      	beq.n	8015ce8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015cb8:	4b4d      	ldr	r3, [pc, #308]	; (8015df0 <ip4_input+0x27c>)
 8015cba:	691b      	ldr	r3, [r3, #16]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d013      	beq.n	8015ce8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cc0:	4b4b      	ldr	r3, [pc, #300]	; (8015df0 <ip4_input+0x27c>)
 8015cc2:	691b      	ldr	r3, [r3, #16]
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f000 f96e 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d105      	bne.n	8015cde <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015cd2:	4b47      	ldr	r3, [pc, #284]	; (8015df0 <ip4_input+0x27c>)
 8015cd4:	691b      	ldr	r3, [r3, #16]
 8015cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cda:	2be0      	cmp	r3, #224	; 0xe0
 8015cdc:	d104      	bne.n	8015ce8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f7f6 fd06 	bl	800c6f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	e07e      	b.n	8015de6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015ce8:	69bb      	ldr	r3, [r7, #24]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d104      	bne.n	8015cf8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f7f6 fcfe 	bl	800c6f0 <pbuf_free>
    return ERR_OK;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	e076      	b.n	8015de6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015cf8:	69fb      	ldr	r3, [r7, #28]
 8015cfa:	88db      	ldrh	r3, [r3, #6]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	461a      	mov	r2, r3
 8015d00:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015d04:	4013      	ands	r3, r2
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00b      	beq.n	8015d22 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 fc92 	bl	8016634 <ip4_reass>
 8015d10:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d101      	bne.n	8015d1c <ip4_input+0x1a8>
      return ERR_OK;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e064      	b.n	8015de6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015d22:	4a33      	ldr	r2, [pc, #204]	; (8015df0 <ip4_input+0x27c>)
 8015d24:	69bb      	ldr	r3, [r7, #24]
 8015d26:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015d28:	4a31      	ldr	r2, [pc, #196]	; (8015df0 <ip4_input+0x27c>)
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015d2e:	4a30      	ldr	r2, [pc, #192]	; (8015df0 <ip4_input+0x27c>)
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015d34:	69fb      	ldr	r3, [r7, #28]
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	f003 030f 	and.w	r3, r3, #15
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	009b      	lsls	r3, r3, #2
 8015d40:	b2db      	uxtb	r3, r3
 8015d42:	b29a      	uxth	r2, r3
 8015d44:	4b2a      	ldr	r3, [pc, #168]	; (8015df0 <ip4_input+0x27c>)
 8015d46:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015d48:	8a7b      	ldrh	r3, [r7, #18]
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f7f6 fc49 	bl	800c5e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	7a5b      	ldrb	r3, [r3, #9]
 8015d56:	2b11      	cmp	r3, #17
 8015d58:	d006      	beq.n	8015d68 <ip4_input+0x1f4>
 8015d5a:	2b11      	cmp	r3, #17
 8015d5c:	dc13      	bgt.n	8015d86 <ip4_input+0x212>
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	d00c      	beq.n	8015d7c <ip4_input+0x208>
 8015d62:	2b06      	cmp	r3, #6
 8015d64:	d005      	beq.n	8015d72 <ip4_input+0x1fe>
 8015d66:	e00e      	b.n	8015d86 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015d68:	6839      	ldr	r1, [r7, #0]
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7fc faea 	bl	8012344 <udp_input>
        break;
 8015d70:	e026      	b.n	8015dc0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015d72:	6839      	ldr	r1, [r7, #0]
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f7f8 faff 	bl	800e378 <tcp_input>
        break;
 8015d7a:	e021      	b.n	8015dc0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015d7c:	6839      	ldr	r1, [r7, #0]
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f7ff fcd0 	bl	8015724 <icmp_input>
        break;
 8015d84:	e01c      	b.n	8015dc0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015d86:	4b1a      	ldr	r3, [pc, #104]	; (8015df0 <ip4_input+0x27c>)
 8015d88:	695b      	ldr	r3, [r3, #20]
 8015d8a:	69b9      	ldr	r1, [r7, #24]
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f000 f90b 	bl	8015fa8 <ip4_addr_isbroadcast_u32>
 8015d92:	4603      	mov	r3, r0
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d10f      	bne.n	8015db8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d98:	4b15      	ldr	r3, [pc, #84]	; (8015df0 <ip4_input+0x27c>)
 8015d9a:	695b      	ldr	r3, [r3, #20]
 8015d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015da0:	2be0      	cmp	r3, #224	; 0xe0
 8015da2:	d009      	beq.n	8015db8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015da4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015da8:	4619      	mov	r1, r3
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f7f6 fc8d 	bl	800c6ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015db0:	2102      	movs	r1, #2
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7ff fdba 	bl	801592c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f7f6 fc99 	bl	800c6f0 <pbuf_free>
        break;
 8015dbe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015dc0:	4b0b      	ldr	r3, [pc, #44]	; (8015df0 <ip4_input+0x27c>)
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015dc6:	4b0a      	ldr	r3, [pc, #40]	; (8015df0 <ip4_input+0x27c>)
 8015dc8:	2200      	movs	r2, #0
 8015dca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015dcc:	4b08      	ldr	r3, [pc, #32]	; (8015df0 <ip4_input+0x27c>)
 8015dce:	2200      	movs	r2, #0
 8015dd0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015dd2:	4b07      	ldr	r3, [pc, #28]	; (8015df0 <ip4_input+0x27c>)
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015dd8:	4b05      	ldr	r3, [pc, #20]	; (8015df0 <ip4_input+0x27c>)
 8015dda:	2200      	movs	r2, #0
 8015ddc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015dde:	4b04      	ldr	r3, [pc, #16]	; (8015df0 <ip4_input+0x27c>)
 8015de0:	2200      	movs	r2, #0
 8015de2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015de4:	2300      	movs	r3, #0
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3720      	adds	r7, #32
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	20008464 	.word	0x20008464
 8015df4:	2000bb88 	.word	0x2000bb88

08015df8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b08a      	sub	sp, #40	; 0x28
 8015dfc:	af04      	add	r7, sp, #16
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015e06:	68bb      	ldr	r3, [r7, #8]
 8015e08:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d009      	beq.n	8015e24 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d003      	beq.n	8015e1e <ip4_output_if+0x26>
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d102      	bne.n	8015e24 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e20:	3304      	adds	r3, #4
 8015e22:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015e24:	78fa      	ldrb	r2, [r7, #3]
 8015e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e28:	9302      	str	r3, [sp, #8]
 8015e2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e2e:	9301      	str	r3, [sp, #4]
 8015e30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e34:	9300      	str	r3, [sp, #0]
 8015e36:	4613      	mov	r3, r2
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	6979      	ldr	r1, [r7, #20]
 8015e3c:	68f8      	ldr	r0, [r7, #12]
 8015e3e:	f000 f805 	bl	8015e4c <ip4_output_if_src>
 8015e42:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	3718      	adds	r7, #24
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
 8015e58:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	7b9b      	ldrb	r3, [r3, #14]
 8015e5e:	2b01      	cmp	r3, #1
 8015e60:	d006      	beq.n	8015e70 <ip4_output_if_src+0x24>
 8015e62:	4b4b      	ldr	r3, [pc, #300]	; (8015f90 <ip4_output_if_src+0x144>)
 8015e64:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015e68:	494a      	ldr	r1, [pc, #296]	; (8015f94 <ip4_output_if_src+0x148>)
 8015e6a:	484b      	ldr	r0, [pc, #300]	; (8015f98 <ip4_output_if_src+0x14c>)
 8015e6c:	f001 fa7a 	bl	8017364 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d060      	beq.n	8015f38 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015e76:	2314      	movs	r3, #20
 8015e78:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015e7a:	2114      	movs	r1, #20
 8015e7c:	68f8      	ldr	r0, [r7, #12]
 8015e7e:	f7f6 fba1 	bl	800c5c4 <pbuf_add_header>
 8015e82:	4603      	mov	r3, r0
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d002      	beq.n	8015e8e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e88:	f06f 0301 	mvn.w	r3, #1
 8015e8c:	e07c      	b.n	8015f88 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	895b      	ldrh	r3, [r3, #10]
 8015e98:	2b13      	cmp	r3, #19
 8015e9a:	d806      	bhi.n	8015eaa <ip4_output_if_src+0x5e>
 8015e9c:	4b3c      	ldr	r3, [pc, #240]	; (8015f90 <ip4_output_if_src+0x144>)
 8015e9e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015ea2:	493e      	ldr	r1, [pc, #248]	; (8015f9c <ip4_output_if_src+0x150>)
 8015ea4:	483c      	ldr	r0, [pc, #240]	; (8015f98 <ip4_output_if_src+0x14c>)
 8015ea6:	f001 fa5d 	bl	8017364 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	78fa      	ldrb	r2, [r7, #3]
 8015eae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015eb6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015ec0:	8b7b      	ldrh	r3, [r7, #26]
 8015ec2:	089b      	lsrs	r3, r3, #2
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ecc:	b2da      	uxtb	r2, r3
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015ed2:	69fb      	ldr	r3, [r7, #28]
 8015ed4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015ed8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	891b      	ldrh	r3, [r3, #8]
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7f5 f84e 	bl	800af80 <lwip_htons>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	719a      	strb	r2, [r3, #6]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015ef6:	4b2a      	ldr	r3, [pc, #168]	; (8015fa0 <ip4_output_if_src+0x154>)
 8015ef8:	881b      	ldrh	r3, [r3, #0]
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7f5 f840 	bl	800af80 <lwip_htons>
 8015f00:	4603      	mov	r3, r0
 8015f02:	461a      	mov	r2, r3
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015f08:	4b25      	ldr	r3, [pc, #148]	; (8015fa0 <ip4_output_if_src+0x154>)
 8015f0a:	881b      	ldrh	r3, [r3, #0]
 8015f0c:	3301      	adds	r3, #1
 8015f0e:	b29a      	uxth	r2, r3
 8015f10:	4b23      	ldr	r3, [pc, #140]	; (8015fa0 <ip4_output_if_src+0x154>)
 8015f12:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d104      	bne.n	8015f24 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015f1a:	4b22      	ldr	r3, [pc, #136]	; (8015fa4 <ip4_output_if_src+0x158>)
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	69fb      	ldr	r3, [r7, #28]
 8015f20:	60da      	str	r2, [r3, #12]
 8015f22:	e003      	b.n	8015f2c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	681a      	ldr	r2, [r3, #0]
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015f2c:	69fb      	ldr	r3, [r7, #28]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	729a      	strb	r2, [r3, #10]
 8015f32:	2200      	movs	r2, #0
 8015f34:	72da      	strb	r2, [r3, #11]
 8015f36:	e00f      	b.n	8015f58 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	895b      	ldrh	r3, [r3, #10]
 8015f3c:	2b13      	cmp	r3, #19
 8015f3e:	d802      	bhi.n	8015f46 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015f40:	f06f 0301 	mvn.w	r3, #1
 8015f44:	e020      	b.n	8015f88 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	691b      	ldr	r3, [r3, #16]
 8015f50:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015f52:	f107 0314 	add.w	r3, r7, #20
 8015f56:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00c      	beq.n	8015f7a <ip4_output_if_src+0x12e>
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	891a      	ldrh	r2, [r3, #8]
 8015f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d906      	bls.n	8015f7a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f70:	68f8      	ldr	r0, [r7, #12]
 8015f72:	f000 fd4d 	bl	8016a10 <ip4_frag>
 8015f76:	4603      	mov	r3, r0
 8015f78:	e006      	b.n	8015f88 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f7c:	695b      	ldr	r3, [r3, #20]
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	68f9      	ldr	r1, [r7, #12]
 8015f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f84:	4798      	blx	r3
 8015f86:	4603      	mov	r3, r0
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3720      	adds	r7, #32
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	0801ad9c 	.word	0x0801ad9c
 8015f94:	0801add0 	.word	0x0801add0
 8015f98:	0801addc 	.word	0x0801addc
 8015f9c:	0801ae04 	.word	0x0801ae04
 8015fa0:	20004c0e 	.word	0x20004c0e
 8015fa4:	0801b374 	.word	0x0801b374

08015fa8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fbc:	d002      	beq.n	8015fc4 <ip4_addr_isbroadcast_u32+0x1c>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d101      	bne.n	8015fc8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015fc4:	2301      	movs	r3, #1
 8015fc6:	e02a      	b.n	801601e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015fce:	f003 0302 	and.w	r3, r3, #2
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d101      	bne.n	8015fda <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	e021      	b.n	801601e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	3304      	adds	r3, #4
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d101      	bne.n	8015fea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	e019      	b.n	801601e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015fea:	68fa      	ldr	r2, [r7, #12]
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	3304      	adds	r3, #4
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	405a      	eors	r2, r3
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	3308      	adds	r3, #8
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d10d      	bne.n	801601c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	3308      	adds	r3, #8
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	43da      	mvns	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	3308      	adds	r3, #8
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016014:	429a      	cmp	r2, r3
 8016016:	d101      	bne.n	801601c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016018:	2301      	movs	r3, #1
 801601a:	e000      	b.n	801601e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801601c:	2300      	movs	r3, #0
  }
}
 801601e:	4618      	mov	r0, r3
 8016020:	3714      	adds	r7, #20
 8016022:	46bd      	mov	sp, r7
 8016024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016028:	4770      	bx	lr
	...

0801602c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016032:	2300      	movs	r3, #0
 8016034:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016036:	4b12      	ldr	r3, [pc, #72]	; (8016080 <ip_reass_tmr+0x54>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801603c:	e018      	b.n	8016070 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	7fdb      	ldrb	r3, [r3, #31]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d00b      	beq.n	801605e <ip_reass_tmr+0x32>
      r->timer--;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	7fdb      	ldrb	r3, [r3, #31]
 801604a:	3b01      	subs	r3, #1
 801604c:	b2da      	uxtb	r2, r3
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	60fb      	str	r3, [r7, #12]
 801605c:	e008      	b.n	8016070 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016068:	68b9      	ldr	r1, [r7, #8]
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f000 f80a 	bl	8016084 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1e3      	bne.n	801603e <ip_reass_tmr+0x12>
    }
  }
}
 8016076:	bf00      	nop
 8016078:	bf00      	nop
 801607a:	3710      	adds	r7, #16
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	20004c10 	.word	0x20004c10

08016084 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b088      	sub	sp, #32
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801608e:	2300      	movs	r3, #0
 8016090:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016092:	683a      	ldr	r2, [r7, #0]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	429a      	cmp	r2, r3
 8016098:	d105      	bne.n	80160a6 <ip_reass_free_complete_datagram+0x22>
 801609a:	4b45      	ldr	r3, [pc, #276]	; (80161b0 <ip_reass_free_complete_datagram+0x12c>)
 801609c:	22ab      	movs	r2, #171	; 0xab
 801609e:	4945      	ldr	r1, [pc, #276]	; (80161b4 <ip_reass_free_complete_datagram+0x130>)
 80160a0:	4845      	ldr	r0, [pc, #276]	; (80161b8 <ip_reass_free_complete_datagram+0x134>)
 80160a2:	f001 f95f 	bl	8017364 <iprintf>
  if (prev != NULL) {
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d00a      	beq.n	80160c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	687a      	ldr	r2, [r7, #4]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d005      	beq.n	80160c2 <ip_reass_free_complete_datagram+0x3e>
 80160b6:	4b3e      	ldr	r3, [pc, #248]	; (80161b0 <ip_reass_free_complete_datagram+0x12c>)
 80160b8:	22ad      	movs	r2, #173	; 0xad
 80160ba:	4940      	ldr	r1, [pc, #256]	; (80161bc <ip_reass_free_complete_datagram+0x138>)
 80160bc:	483e      	ldr	r0, [pc, #248]	; (80161b8 <ip_reass_free_complete_datagram+0x134>)
 80160be:	f001 f951 	bl	8017364 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	889b      	ldrh	r3, [r3, #4]
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d12a      	bne.n	801612a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	685b      	ldr	r3, [r3, #4]
 80160d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80160da:	697b      	ldr	r3, [r7, #20]
 80160dc:	681a      	ldr	r2, [r3, #0]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80160e2:	69bb      	ldr	r3, [r7, #24]
 80160e4:	6858      	ldr	r0, [r3, #4]
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	3308      	adds	r3, #8
 80160ea:	2214      	movs	r2, #20
 80160ec:	4619      	mov	r1, r3
 80160ee:	f001 f8c8 	bl	8017282 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80160f2:	2101      	movs	r1, #1
 80160f4:	69b8      	ldr	r0, [r7, #24]
 80160f6:	f7ff fc29 	bl	801594c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80160fa:	69b8      	ldr	r0, [r7, #24]
 80160fc:	f7f6 fb86 	bl	800c80c <pbuf_clen>
 8016100:	4603      	mov	r3, r0
 8016102:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016104:	8bfa      	ldrh	r2, [r7, #30]
 8016106:	8a7b      	ldrh	r3, [r7, #18]
 8016108:	4413      	add	r3, r2
 801610a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801610e:	db05      	blt.n	801611c <ip_reass_free_complete_datagram+0x98>
 8016110:	4b27      	ldr	r3, [pc, #156]	; (80161b0 <ip_reass_free_complete_datagram+0x12c>)
 8016112:	22bc      	movs	r2, #188	; 0xbc
 8016114:	492a      	ldr	r1, [pc, #168]	; (80161c0 <ip_reass_free_complete_datagram+0x13c>)
 8016116:	4828      	ldr	r0, [pc, #160]	; (80161b8 <ip_reass_free_complete_datagram+0x134>)
 8016118:	f001 f924 	bl	8017364 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801611c:	8bfa      	ldrh	r2, [r7, #30]
 801611e:	8a7b      	ldrh	r3, [r7, #18]
 8016120:	4413      	add	r3, r2
 8016122:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016124:	69b8      	ldr	r0, [r7, #24]
 8016126:	f7f6 fae3 	bl	800c6f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016130:	e01f      	b.n	8016172 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016132:	69bb      	ldr	r3, [r7, #24]
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016138:	69bb      	ldr	r3, [r7, #24]
 801613a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016142:	68f8      	ldr	r0, [r7, #12]
 8016144:	f7f6 fb62 	bl	800c80c <pbuf_clen>
 8016148:	4603      	mov	r3, r0
 801614a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801614c:	8bfa      	ldrh	r2, [r7, #30]
 801614e:	8a7b      	ldrh	r3, [r7, #18]
 8016150:	4413      	add	r3, r2
 8016152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016156:	db05      	blt.n	8016164 <ip_reass_free_complete_datagram+0xe0>
 8016158:	4b15      	ldr	r3, [pc, #84]	; (80161b0 <ip_reass_free_complete_datagram+0x12c>)
 801615a:	22cc      	movs	r2, #204	; 0xcc
 801615c:	4918      	ldr	r1, [pc, #96]	; (80161c0 <ip_reass_free_complete_datagram+0x13c>)
 801615e:	4816      	ldr	r0, [pc, #88]	; (80161b8 <ip_reass_free_complete_datagram+0x134>)
 8016160:	f001 f900 	bl	8017364 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016164:	8bfa      	ldrh	r2, [r7, #30]
 8016166:	8a7b      	ldrh	r3, [r7, #18]
 8016168:	4413      	add	r3, r2
 801616a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801616c:	68f8      	ldr	r0, [r7, #12]
 801616e:	f7f6 fabf 	bl	800c6f0 <pbuf_free>
  while (p != NULL) {
 8016172:	69bb      	ldr	r3, [r7, #24]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d1dc      	bne.n	8016132 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016178:	6839      	ldr	r1, [r7, #0]
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 f8c2 	bl	8016304 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016180:	4b10      	ldr	r3, [pc, #64]	; (80161c4 <ip_reass_free_complete_datagram+0x140>)
 8016182:	881b      	ldrh	r3, [r3, #0]
 8016184:	8bfa      	ldrh	r2, [r7, #30]
 8016186:	429a      	cmp	r2, r3
 8016188:	d905      	bls.n	8016196 <ip_reass_free_complete_datagram+0x112>
 801618a:	4b09      	ldr	r3, [pc, #36]	; (80161b0 <ip_reass_free_complete_datagram+0x12c>)
 801618c:	22d2      	movs	r2, #210	; 0xd2
 801618e:	490e      	ldr	r1, [pc, #56]	; (80161c8 <ip_reass_free_complete_datagram+0x144>)
 8016190:	4809      	ldr	r0, [pc, #36]	; (80161b8 <ip_reass_free_complete_datagram+0x134>)
 8016192:	f001 f8e7 	bl	8017364 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016196:	4b0b      	ldr	r3, [pc, #44]	; (80161c4 <ip_reass_free_complete_datagram+0x140>)
 8016198:	881a      	ldrh	r2, [r3, #0]
 801619a:	8bfb      	ldrh	r3, [r7, #30]
 801619c:	1ad3      	subs	r3, r2, r3
 801619e:	b29a      	uxth	r2, r3
 80161a0:	4b08      	ldr	r3, [pc, #32]	; (80161c4 <ip_reass_free_complete_datagram+0x140>)
 80161a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80161a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3720      	adds	r7, #32
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	0801ae34 	.word	0x0801ae34
 80161b4:	0801ae70 	.word	0x0801ae70
 80161b8:	0801ae7c 	.word	0x0801ae7c
 80161bc:	0801aea4 	.word	0x0801aea4
 80161c0:	0801aeb8 	.word	0x0801aeb8
 80161c4:	20004c14 	.word	0x20004c14
 80161c8:	0801aed8 	.word	0x0801aed8

080161cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b08a      	sub	sp, #40	; 0x28
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80161d6:	2300      	movs	r3, #0
 80161d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80161da:	2300      	movs	r3, #0
 80161dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80161de:	2300      	movs	r3, #0
 80161e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80161e2:	2300      	movs	r3, #0
 80161e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80161e6:	2300      	movs	r3, #0
 80161e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80161ea:	4b28      	ldr	r3, [pc, #160]	; (801628c <ip_reass_remove_oldest_datagram+0xc0>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80161f0:	e030      	b.n	8016254 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80161f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f4:	695a      	ldr	r2, [r3, #20]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	68db      	ldr	r3, [r3, #12]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d10c      	bne.n	8016218 <ip_reass_remove_oldest_datagram+0x4c>
 80161fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016200:	699a      	ldr	r2, [r3, #24]
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	691b      	ldr	r3, [r3, #16]
 8016206:	429a      	cmp	r2, r3
 8016208:	d106      	bne.n	8016218 <ip_reass_remove_oldest_datagram+0x4c>
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	899a      	ldrh	r2, [r3, #12]
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	889b      	ldrh	r3, [r3, #4]
 8016212:	b29b      	uxth	r3, r3
 8016214:	429a      	cmp	r2, r3
 8016216:	d014      	beq.n	8016242 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	3301      	adds	r3, #1
 801621c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801621e:	6a3b      	ldr	r3, [r7, #32]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d104      	bne.n	801622e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016226:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016228:	69fb      	ldr	r3, [r7, #28]
 801622a:	61bb      	str	r3, [r7, #24]
 801622c:	e009      	b.n	8016242 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016230:	7fda      	ldrb	r2, [r3, #31]
 8016232:	6a3b      	ldr	r3, [r7, #32]
 8016234:	7fdb      	ldrb	r3, [r3, #31]
 8016236:	429a      	cmp	r2, r3
 8016238:	d803      	bhi.n	8016242 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801623e:	69fb      	ldr	r3, [r7, #28]
 8016240:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d001      	beq.n	801624e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1cb      	bne.n	80161f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801625a:	6a3b      	ldr	r3, [r7, #32]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d008      	beq.n	8016272 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016260:	69b9      	ldr	r1, [r7, #24]
 8016262:	6a38      	ldr	r0, [r7, #32]
 8016264:	f7ff ff0e 	bl	8016084 <ip_reass_free_complete_datagram>
 8016268:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801626a:	697a      	ldr	r2, [r7, #20]
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	4413      	add	r3, r2
 8016270:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016272:	697a      	ldr	r2, [r7, #20]
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	429a      	cmp	r2, r3
 8016278:	da02      	bge.n	8016280 <ip_reass_remove_oldest_datagram+0xb4>
 801627a:	693b      	ldr	r3, [r7, #16]
 801627c:	2b01      	cmp	r3, #1
 801627e:	dcac      	bgt.n	80161da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016280:	697b      	ldr	r3, [r7, #20]
}
 8016282:	4618      	mov	r0, r3
 8016284:	3728      	adds	r7, #40	; 0x28
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	20004c10 	.word	0x20004c10

08016290 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
 8016298:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801629a:	2004      	movs	r0, #4
 801629c:	f7f5 fb26 	bl	800b8ec <memp_malloc>
 80162a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d110      	bne.n	80162ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80162a8:	6839      	ldr	r1, [r7, #0]
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f7ff ff8e 	bl	80161cc <ip_reass_remove_oldest_datagram>
 80162b0:	4602      	mov	r2, r0
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	4293      	cmp	r3, r2
 80162b6:	dc03      	bgt.n	80162c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80162b8:	2004      	movs	r0, #4
 80162ba:	f7f5 fb17 	bl	800b8ec <memp_malloc>
 80162be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d101      	bne.n	80162ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80162c6:	2300      	movs	r3, #0
 80162c8:	e016      	b.n	80162f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80162ca:	2220      	movs	r2, #32
 80162cc:	2100      	movs	r1, #0
 80162ce:	68f8      	ldr	r0, [r7, #12]
 80162d0:	f000 ffe5 	bl	801729e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	220f      	movs	r2, #15
 80162d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80162da:	4b09      	ldr	r3, [pc, #36]	; (8016300 <ip_reass_enqueue_new_datagram+0x70>)
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80162e2:	4a07      	ldr	r2, [pc, #28]	; (8016300 <ip_reass_enqueue_new_datagram+0x70>)
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	3308      	adds	r3, #8
 80162ec:	2214      	movs	r2, #20
 80162ee:	6879      	ldr	r1, [r7, #4]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f000 ffc6 	bl	8017282 <memcpy>
  return ipr;
 80162f6:	68fb      	ldr	r3, [r7, #12]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3710      	adds	r7, #16
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	20004c10 	.word	0x20004c10

08016304 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801630e:	4b10      	ldr	r3, [pc, #64]	; (8016350 <ip_reass_dequeue_datagram+0x4c>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	429a      	cmp	r2, r3
 8016316:	d104      	bne.n	8016322 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	4a0c      	ldr	r2, [pc, #48]	; (8016350 <ip_reass_dequeue_datagram+0x4c>)
 801631e:	6013      	str	r3, [r2, #0]
 8016320:	e00d      	b.n	801633e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d106      	bne.n	8016336 <ip_reass_dequeue_datagram+0x32>
 8016328:	4b0a      	ldr	r3, [pc, #40]	; (8016354 <ip_reass_dequeue_datagram+0x50>)
 801632a:	f240 1245 	movw	r2, #325	; 0x145
 801632e:	490a      	ldr	r1, [pc, #40]	; (8016358 <ip_reass_dequeue_datagram+0x54>)
 8016330:	480a      	ldr	r0, [pc, #40]	; (801635c <ip_reass_dequeue_datagram+0x58>)
 8016332:	f001 f817 	bl	8017364 <iprintf>
    prev->next = ipr->next;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801633e:	6879      	ldr	r1, [r7, #4]
 8016340:	2004      	movs	r0, #4
 8016342:	f7f5 fb25 	bl	800b990 <memp_free>
}
 8016346:	bf00      	nop
 8016348:	3708      	adds	r7, #8
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
 801634e:	bf00      	nop
 8016350:	20004c10 	.word	0x20004c10
 8016354:	0801ae34 	.word	0x0801ae34
 8016358:	0801aefc 	.word	0x0801aefc
 801635c:	0801ae7c 	.word	0x0801ae7c

08016360 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b08c      	sub	sp, #48	; 0x30
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801636c:	2300      	movs	r3, #0
 801636e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016370:	2301      	movs	r3, #1
 8016372:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	685b      	ldr	r3, [r3, #4]
 8016378:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	885b      	ldrh	r3, [r3, #2]
 801637e:	b29b      	uxth	r3, r3
 8016380:	4618      	mov	r0, r3
 8016382:	f7f4 fdfd 	bl	800af80 <lwip_htons>
 8016386:	4603      	mov	r3, r0
 8016388:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	f003 030f 	and.w	r3, r3, #15
 8016392:	b2db      	uxtb	r3, r3
 8016394:	009b      	lsls	r3, r3, #2
 8016396:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016398:	7e7b      	ldrb	r3, [r7, #25]
 801639a:	b29b      	uxth	r3, r3
 801639c:	8b7a      	ldrh	r2, [r7, #26]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d202      	bcs.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163a2:	f04f 33ff 	mov.w	r3, #4294967295
 80163a6:	e135      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80163a8:	7e7b      	ldrb	r3, [r7, #25]
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	8b7a      	ldrh	r2, [r7, #26]
 80163ae:	1ad3      	subs	r3, r2, r3
 80163b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	88db      	ldrh	r3, [r3, #6]
 80163b6:	b29b      	uxth	r3, r3
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7f4 fde1 	bl	800af80 <lwip_htons>
 80163be:	4603      	mov	r3, r0
 80163c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	00db      	lsls	r3, r3, #3
 80163c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80163d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d2:	2200      	movs	r2, #0
 80163d4:	701a      	strb	r2, [r3, #0]
 80163d6:	2200      	movs	r2, #0
 80163d8:	705a      	strb	r2, [r3, #1]
 80163da:	2200      	movs	r2, #0
 80163dc:	709a      	strb	r2, [r3, #2]
 80163de:	2200      	movs	r2, #0
 80163e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80163e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e4:	8afa      	ldrh	r2, [r7, #22]
 80163e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80163e8:	8afa      	ldrh	r2, [r7, #22]
 80163ea:	8b7b      	ldrh	r3, [r7, #26]
 80163ec:	4413      	add	r3, r2
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80163f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f6:	88db      	ldrh	r3, [r3, #6]
 80163f8:	b29b      	uxth	r3, r3
 80163fa:	8afa      	ldrh	r2, [r7, #22]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d902      	bls.n	8016406 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016400:	f04f 33ff 	mov.w	r3, #4294967295
 8016404:	e106      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	627b      	str	r3, [r7, #36]	; 0x24
 801640c:	e068      	b.n	80164e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016416:	889b      	ldrh	r3, [r3, #4]
 8016418:	b29a      	uxth	r2, r3
 801641a:	693b      	ldr	r3, [r7, #16]
 801641c:	889b      	ldrh	r3, [r3, #4]
 801641e:	b29b      	uxth	r3, r3
 8016420:	429a      	cmp	r2, r3
 8016422:	d235      	bcs.n	8016490 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016428:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801642c:	2b00      	cmp	r3, #0
 801642e:	d020      	beq.n	8016472 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016432:	889b      	ldrh	r3, [r3, #4]
 8016434:	b29a      	uxth	r2, r3
 8016436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016438:	88db      	ldrh	r3, [r3, #6]
 801643a:	b29b      	uxth	r3, r3
 801643c:	429a      	cmp	r2, r3
 801643e:	d307      	bcc.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016442:	88db      	ldrh	r3, [r3, #6]
 8016444:	b29a      	uxth	r2, r3
 8016446:	693b      	ldr	r3, [r7, #16]
 8016448:	889b      	ldrh	r3, [r3, #4]
 801644a:	b29b      	uxth	r3, r3
 801644c:	429a      	cmp	r2, r3
 801644e:	d902      	bls.n	8016456 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016450:	f04f 33ff 	mov.w	r3, #4294967295
 8016454:	e0de      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016458:	68ba      	ldr	r2, [r7, #8]
 801645a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645e:	88db      	ldrh	r3, [r3, #6]
 8016460:	b29a      	uxth	r2, r3
 8016462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016464:	889b      	ldrh	r3, [r3, #4]
 8016466:	b29b      	uxth	r3, r3
 8016468:	429a      	cmp	r2, r3
 801646a:	d03d      	beq.n	80164e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801646c:	2300      	movs	r3, #0
 801646e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016470:	e03a      	b.n	80164e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016474:	88db      	ldrh	r3, [r3, #6]
 8016476:	b29a      	uxth	r2, r3
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	889b      	ldrh	r3, [r3, #4]
 801647c:	b29b      	uxth	r3, r3
 801647e:	429a      	cmp	r2, r3
 8016480:	d902      	bls.n	8016488 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016482:	f04f 33ff 	mov.w	r3, #4294967295
 8016486:	e0c5      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	605a      	str	r2, [r3, #4]
      break;
 801648e:	e02b      	b.n	80164e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016492:	889b      	ldrh	r3, [r3, #4]
 8016494:	b29a      	uxth	r2, r3
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	889b      	ldrh	r3, [r3, #4]
 801649a:	b29b      	uxth	r3, r3
 801649c:	429a      	cmp	r2, r3
 801649e:	d102      	bne.n	80164a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164a0:	f04f 33ff 	mov.w	r3, #4294967295
 80164a4:	e0b6      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80164a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a8:	889b      	ldrh	r3, [r3, #4]
 80164aa:	b29a      	uxth	r2, r3
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	88db      	ldrh	r3, [r3, #6]
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d202      	bcs.n	80164bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164b6:	f04f 33ff 	mov.w	r3, #4294967295
 80164ba:	e0ab      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80164bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d009      	beq.n	80164d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80164c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c4:	88db      	ldrh	r3, [r3, #6]
 80164c6:	b29a      	uxth	r2, r3
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	889b      	ldrh	r3, [r3, #4]
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d001      	beq.n	80164d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80164d2:	2300      	movs	r3, #0
 80164d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80164e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d193      	bne.n	801640e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80164e6:	e000      	b.n	80164ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80164e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80164ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d12d      	bne.n	801654c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80164f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d01c      	beq.n	8016530 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80164f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f8:	88db      	ldrh	r3, [r3, #6]
 80164fa:	b29a      	uxth	r2, r3
 80164fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fe:	889b      	ldrh	r3, [r3, #4]
 8016500:	b29b      	uxth	r3, r3
 8016502:	429a      	cmp	r2, r3
 8016504:	d906      	bls.n	8016514 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016506:	4b45      	ldr	r3, [pc, #276]	; (801661c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016508:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801650c:	4944      	ldr	r1, [pc, #272]	; (8016620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801650e:	4845      	ldr	r0, [pc, #276]	; (8016624 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016510:	f000 ff28 	bl	8017364 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016516:	68ba      	ldr	r2, [r7, #8]
 8016518:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801651c:	88db      	ldrh	r3, [r3, #6]
 801651e:	b29a      	uxth	r2, r3
 8016520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016522:	889b      	ldrh	r3, [r3, #4]
 8016524:	b29b      	uxth	r3, r3
 8016526:	429a      	cmp	r2, r3
 8016528:	d010      	beq.n	801654c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801652a:	2300      	movs	r3, #0
 801652c:	623b      	str	r3, [r7, #32]
 801652e:	e00d      	b.n	801654c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	685b      	ldr	r3, [r3, #4]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d006      	beq.n	8016546 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016538:	4b38      	ldr	r3, [pc, #224]	; (801661c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801653a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801653e:	493a      	ldr	r1, [pc, #232]	; (8016628 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016540:	4838      	ldr	r0, [pc, #224]	; (8016624 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016542:	f000 ff0f 	bl	8017364 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	68ba      	ldr	r2, [r7, #8]
 801654a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d105      	bne.n	801655e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	7f9b      	ldrb	r3, [r3, #30]
 8016556:	f003 0301 	and.w	r3, r3, #1
 801655a:	2b00      	cmp	r3, #0
 801655c:	d059      	beq.n	8016612 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801655e:	6a3b      	ldr	r3, [r7, #32]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d04f      	beq.n	8016604 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d006      	beq.n	801657a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	889b      	ldrh	r3, [r3, #4]
 8016574:	b29b      	uxth	r3, r3
 8016576:	2b00      	cmp	r3, #0
 8016578:	d002      	beq.n	8016580 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801657a:	2300      	movs	r3, #0
 801657c:	623b      	str	r3, [r7, #32]
 801657e:	e041      	b.n	8016604 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016582:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801658a:	e012      	b.n	80165b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658e:	685b      	ldr	r3, [r3, #4]
 8016590:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016594:	88db      	ldrh	r3, [r3, #6]
 8016596:	b29a      	uxth	r2, r3
 8016598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801659a:	889b      	ldrh	r3, [r3, #4]
 801659c:	b29b      	uxth	r3, r3
 801659e:	429a      	cmp	r2, r3
 80165a0:	d002      	beq.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80165a2:	2300      	movs	r3, #0
 80165a4:	623b      	str	r3, [r7, #32]
            break;
 80165a6:	e007      	b.n	80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80165a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80165ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80165b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d1e9      	bne.n	801658c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80165b8:	6a3b      	ldr	r3, [r7, #32]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d022      	beq.n	8016604 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d106      	bne.n	80165d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80165c6:	4b15      	ldr	r3, [pc, #84]	; (801661c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165c8:	f240 12df 	movw	r2, #479	; 0x1df
 80165cc:	4917      	ldr	r1, [pc, #92]	; (801662c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80165ce:	4815      	ldr	r0, [pc, #84]	; (8016624 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165d0:	f000 fec8 	bl	8017364 <iprintf>
          LWIP_ASSERT("sanity check",
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165dc:	429a      	cmp	r2, r3
 80165de:	d106      	bne.n	80165ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80165e0:	4b0e      	ldr	r3, [pc, #56]	; (801661c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80165e6:	4911      	ldr	r1, [pc, #68]	; (801662c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80165e8:	480e      	ldr	r0, [pc, #56]	; (8016624 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165ea:	f000 febb 	bl	8017364 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80165ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d006      	beq.n	8016604 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80165f6:	4b09      	ldr	r3, [pc, #36]	; (801661c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165f8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80165fc:	490c      	ldr	r1, [pc, #48]	; (8016630 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80165fe:	4809      	ldr	r0, [pc, #36]	; (8016624 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016600:	f000 feb0 	bl	8017364 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016604:	6a3b      	ldr	r3, [r7, #32]
 8016606:	2b00      	cmp	r3, #0
 8016608:	bf14      	ite	ne
 801660a:	2301      	movne	r3, #1
 801660c:	2300      	moveq	r3, #0
 801660e:	b2db      	uxtb	r3, r3
 8016610:	e000      	b.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016612:	2300      	movs	r3, #0
}
 8016614:	4618      	mov	r0, r3
 8016616:	3730      	adds	r7, #48	; 0x30
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}
 801661c:	0801ae34 	.word	0x0801ae34
 8016620:	0801af18 	.word	0x0801af18
 8016624:	0801ae7c 	.word	0x0801ae7c
 8016628:	0801af38 	.word	0x0801af38
 801662c:	0801af70 	.word	0x0801af70
 8016630:	0801af80 	.word	0x0801af80

08016634 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b08e      	sub	sp, #56	; 0x38
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	f003 030f 	and.w	r3, r3, #15
 801664a:	b2db      	uxtb	r3, r3
 801664c:	009b      	lsls	r3, r3, #2
 801664e:	b2db      	uxtb	r3, r3
 8016650:	2b14      	cmp	r3, #20
 8016652:	f040 8167 	bne.w	8016924 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016658:	88db      	ldrh	r3, [r3, #6]
 801665a:	b29b      	uxth	r3, r3
 801665c:	4618      	mov	r0, r3
 801665e:	f7f4 fc8f 	bl	800af80 <lwip_htons>
 8016662:	4603      	mov	r3, r0
 8016664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016668:	b29b      	uxth	r3, r3
 801666a:	00db      	lsls	r3, r3, #3
 801666c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016670:	885b      	ldrh	r3, [r3, #2]
 8016672:	b29b      	uxth	r3, r3
 8016674:	4618      	mov	r0, r3
 8016676:	f7f4 fc83 	bl	800af80 <lwip_htons>
 801667a:	4603      	mov	r3, r0
 801667c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016680:	781b      	ldrb	r3, [r3, #0]
 8016682:	f003 030f 	and.w	r3, r3, #15
 8016686:	b2db      	uxtb	r3, r3
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801668e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016692:	b29b      	uxth	r3, r3
 8016694:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016696:	429a      	cmp	r2, r3
 8016698:	f0c0 8146 	bcc.w	8016928 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801669c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80166a0:	b29b      	uxth	r3, r3
 80166a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80166a4:	1ad3      	subs	r3, r2, r3
 80166a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f7f6 f8af 	bl	800c80c <pbuf_clen>
 80166ae:	4603      	mov	r3, r0
 80166b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80166b2:	4b9f      	ldr	r3, [pc, #636]	; (8016930 <ip4_reass+0x2fc>)
 80166b4:	881b      	ldrh	r3, [r3, #0]
 80166b6:	461a      	mov	r2, r3
 80166b8:	8c3b      	ldrh	r3, [r7, #32]
 80166ba:	4413      	add	r3, r2
 80166bc:	2b0a      	cmp	r3, #10
 80166be:	dd10      	ble.n	80166e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80166c0:	8c3b      	ldrh	r3, [r7, #32]
 80166c2:	4619      	mov	r1, r3
 80166c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166c6:	f7ff fd81 	bl	80161cc <ip_reass_remove_oldest_datagram>
 80166ca:	4603      	mov	r3, r0
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	f000 812d 	beq.w	801692c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80166d2:	4b97      	ldr	r3, [pc, #604]	; (8016930 <ip4_reass+0x2fc>)
 80166d4:	881b      	ldrh	r3, [r3, #0]
 80166d6:	461a      	mov	r2, r3
 80166d8:	8c3b      	ldrh	r3, [r7, #32]
 80166da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80166dc:	2b0a      	cmp	r3, #10
 80166de:	f300 8125 	bgt.w	801692c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80166e2:	4b94      	ldr	r3, [pc, #592]	; (8016934 <ip4_reass+0x300>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	633b      	str	r3, [r7, #48]	; 0x30
 80166e8:	e015      	b.n	8016716 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80166ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ec:	695a      	ldr	r2, [r3, #20]
 80166ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d10c      	bne.n	8016710 <ip4_reass+0xdc>
 80166f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f8:	699a      	ldr	r2, [r3, #24]
 80166fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fc:	691b      	ldr	r3, [r3, #16]
 80166fe:	429a      	cmp	r2, r3
 8016700:	d106      	bne.n	8016710 <ip4_reass+0xdc>
 8016702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016704:	899a      	ldrh	r2, [r3, #12]
 8016706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016708:	889b      	ldrh	r3, [r3, #4]
 801670a:	b29b      	uxth	r3, r3
 801670c:	429a      	cmp	r2, r3
 801670e:	d006      	beq.n	801671e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	633b      	str	r3, [r7, #48]	; 0x30
 8016716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016718:	2b00      	cmp	r3, #0
 801671a:	d1e6      	bne.n	80166ea <ip4_reass+0xb6>
 801671c:	e000      	b.n	8016720 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801671e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016722:	2b00      	cmp	r3, #0
 8016724:	d109      	bne.n	801673a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016726:	8c3b      	ldrh	r3, [r7, #32]
 8016728:	4619      	mov	r1, r3
 801672a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801672c:	f7ff fdb0 	bl	8016290 <ip_reass_enqueue_new_datagram>
 8016730:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016734:	2b00      	cmp	r3, #0
 8016736:	d11c      	bne.n	8016772 <ip4_reass+0x13e>
      goto nullreturn;
 8016738:	e109      	b.n	801694e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801673c:	88db      	ldrh	r3, [r3, #6]
 801673e:	b29b      	uxth	r3, r3
 8016740:	4618      	mov	r0, r3
 8016742:	f7f4 fc1d 	bl	800af80 <lwip_htons>
 8016746:	4603      	mov	r3, r0
 8016748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801674c:	2b00      	cmp	r3, #0
 801674e:	d110      	bne.n	8016772 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016752:	89db      	ldrh	r3, [r3, #14]
 8016754:	4618      	mov	r0, r3
 8016756:	f7f4 fc13 	bl	800af80 <lwip_htons>
 801675a:	4603      	mov	r3, r0
 801675c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016760:	2b00      	cmp	r3, #0
 8016762:	d006      	beq.n	8016772 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016766:	3308      	adds	r3, #8
 8016768:	2214      	movs	r2, #20
 801676a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801676c:	4618      	mov	r0, r3
 801676e:	f000 fd88 	bl	8017282 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016774:	88db      	ldrh	r3, [r3, #6]
 8016776:	b29b      	uxth	r3, r3
 8016778:	f003 0320 	and.w	r3, r3, #32
 801677c:	2b00      	cmp	r3, #0
 801677e:	bf0c      	ite	eq
 8016780:	2301      	moveq	r3, #1
 8016782:	2300      	movne	r3, #0
 8016784:	b2db      	uxtb	r3, r3
 8016786:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016788:	69fb      	ldr	r3, [r7, #28]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d00e      	beq.n	80167ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801678e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016792:	4413      	add	r3, r2
 8016794:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016796:	8b7a      	ldrh	r2, [r7, #26]
 8016798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801679a:	429a      	cmp	r2, r3
 801679c:	f0c0 80a0 	bcc.w	80168e0 <ip4_reass+0x2ac>
 80167a0:	8b7b      	ldrh	r3, [r7, #26]
 80167a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80167a6:	4293      	cmp	r3, r2
 80167a8:	f200 809a 	bhi.w	80168e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80167ac:	69fa      	ldr	r2, [r7, #28]
 80167ae:	6879      	ldr	r1, [r7, #4]
 80167b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167b2:	f7ff fdd5 	bl	8016360 <ip_reass_chain_frag_into_datagram_and_validate>
 80167b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80167b8:	697b      	ldr	r3, [r7, #20]
 80167ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167be:	f000 8091 	beq.w	80168e4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80167c2:	4b5b      	ldr	r3, [pc, #364]	; (8016930 <ip4_reass+0x2fc>)
 80167c4:	881a      	ldrh	r2, [r3, #0]
 80167c6:	8c3b      	ldrh	r3, [r7, #32]
 80167c8:	4413      	add	r3, r2
 80167ca:	b29a      	uxth	r2, r3
 80167cc:	4b58      	ldr	r3, [pc, #352]	; (8016930 <ip4_reass+0x2fc>)
 80167ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80167d0:	69fb      	ldr	r3, [r7, #28]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d00d      	beq.n	80167f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80167d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80167d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167da:	4413      	add	r3, r2
 80167dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80167de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e0:	8a7a      	ldrh	r2, [r7, #18]
 80167e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80167e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e6:	7f9b      	ldrb	r3, [r3, #30]
 80167e8:	f043 0301 	orr.w	r3, r3, #1
 80167ec:	b2da      	uxtb	r2, r3
 80167ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	d171      	bne.n	80168dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80167f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fa:	8b9b      	ldrh	r3, [r3, #28]
 80167fc:	3314      	adds	r3, #20
 80167fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016802:	685b      	ldr	r3, [r3, #4]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016814:	3308      	adds	r3, #8
 8016816:	2214      	movs	r2, #20
 8016818:	4619      	mov	r1, r3
 801681a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801681c:	f000 fd31 	bl	8017282 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016820:	8a3b      	ldrh	r3, [r7, #16]
 8016822:	4618      	mov	r0, r3
 8016824:	f7f4 fbac 	bl	800af80 <lwip_htons>
 8016828:	4603      	mov	r3, r0
 801682a:	461a      	mov	r2, r3
 801682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801682e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016832:	2200      	movs	r2, #0
 8016834:	719a      	strb	r2, [r3, #6]
 8016836:	2200      	movs	r2, #0
 8016838:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683c:	2200      	movs	r2, #0
 801683e:	729a      	strb	r2, [r3, #10]
 8016840:	2200      	movs	r2, #0
 8016842:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016846:	685b      	ldr	r3, [r3, #4]
 8016848:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801684a:	e00d      	b.n	8016868 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016852:	2114      	movs	r1, #20
 8016854:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016856:	f7f5 fec5 	bl	800c5e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801685a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	f7f6 f815 	bl	800c88c <pbuf_cat>
      r = iprh->next_pbuf;
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801686a:	2b00      	cmp	r3, #0
 801686c:	d1ee      	bne.n	801684c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801686e:	4b31      	ldr	r3, [pc, #196]	; (8016934 <ip4_reass+0x300>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016874:	429a      	cmp	r2, r3
 8016876:	d102      	bne.n	801687e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016878:	2300      	movs	r3, #0
 801687a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801687c:	e010      	b.n	80168a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801687e:	4b2d      	ldr	r3, [pc, #180]	; (8016934 <ip4_reass+0x300>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016884:	e007      	b.n	8016896 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801688c:	429a      	cmp	r2, r3
 801688e:	d006      	beq.n	801689e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016898:	2b00      	cmp	r3, #0
 801689a:	d1f4      	bne.n	8016886 <ip4_reass+0x252>
 801689c:	e000      	b.n	80168a0 <ip4_reass+0x26c>
          break;
 801689e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80168a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168a4:	f7ff fd2e 	bl	8016304 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80168a8:	6878      	ldr	r0, [r7, #4]
 80168aa:	f7f5 ffaf 	bl	800c80c <pbuf_clen>
 80168ae:	4603      	mov	r3, r0
 80168b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80168b2:	4b1f      	ldr	r3, [pc, #124]	; (8016930 <ip4_reass+0x2fc>)
 80168b4:	881b      	ldrh	r3, [r3, #0]
 80168b6:	8c3a      	ldrh	r2, [r7, #32]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d906      	bls.n	80168ca <ip4_reass+0x296>
 80168bc:	4b1e      	ldr	r3, [pc, #120]	; (8016938 <ip4_reass+0x304>)
 80168be:	f240 229b 	movw	r2, #667	; 0x29b
 80168c2:	491e      	ldr	r1, [pc, #120]	; (801693c <ip4_reass+0x308>)
 80168c4:	481e      	ldr	r0, [pc, #120]	; (8016940 <ip4_reass+0x30c>)
 80168c6:	f000 fd4d 	bl	8017364 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80168ca:	4b19      	ldr	r3, [pc, #100]	; (8016930 <ip4_reass+0x2fc>)
 80168cc:	881a      	ldrh	r2, [r3, #0]
 80168ce:	8c3b      	ldrh	r3, [r7, #32]
 80168d0:	1ad3      	subs	r3, r2, r3
 80168d2:	b29a      	uxth	r2, r3
 80168d4:	4b16      	ldr	r3, [pc, #88]	; (8016930 <ip4_reass+0x2fc>)
 80168d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	e03c      	b.n	8016956 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80168dc:	2300      	movs	r3, #0
 80168de:	e03a      	b.n	8016956 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80168e0:	bf00      	nop
 80168e2:	e000      	b.n	80168e6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80168e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80168e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d106      	bne.n	80168fa <ip4_reass+0x2c6>
 80168ec:	4b12      	ldr	r3, [pc, #72]	; (8016938 <ip4_reass+0x304>)
 80168ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80168f2:	4914      	ldr	r1, [pc, #80]	; (8016944 <ip4_reass+0x310>)
 80168f4:	4812      	ldr	r0, [pc, #72]	; (8016940 <ip4_reass+0x30c>)
 80168f6:	f000 fd35 	bl	8017364 <iprintf>
  if (ipr->p == NULL) {
 80168fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d124      	bne.n	801694c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016902:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <ip4_reass+0x300>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016908:	429a      	cmp	r2, r3
 801690a:	d006      	beq.n	801691a <ip4_reass+0x2e6>
 801690c:	4b0a      	ldr	r3, [pc, #40]	; (8016938 <ip4_reass+0x304>)
 801690e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016912:	490d      	ldr	r1, [pc, #52]	; (8016948 <ip4_reass+0x314>)
 8016914:	480a      	ldr	r0, [pc, #40]	; (8016940 <ip4_reass+0x30c>)
 8016916:	f000 fd25 	bl	8017364 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801691a:	2100      	movs	r1, #0
 801691c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801691e:	f7ff fcf1 	bl	8016304 <ip_reass_dequeue_datagram>
 8016922:	e014      	b.n	801694e <ip4_reass+0x31a>
    goto nullreturn;
 8016924:	bf00      	nop
 8016926:	e012      	b.n	801694e <ip4_reass+0x31a>
    goto nullreturn;
 8016928:	bf00      	nop
 801692a:	e010      	b.n	801694e <ip4_reass+0x31a>
      goto nullreturn;
 801692c:	bf00      	nop
 801692e:	e00e      	b.n	801694e <ip4_reass+0x31a>
 8016930:	20004c14 	.word	0x20004c14
 8016934:	20004c10 	.word	0x20004c10
 8016938:	0801ae34 	.word	0x0801ae34
 801693c:	0801afa4 	.word	0x0801afa4
 8016940:	0801ae7c 	.word	0x0801ae7c
 8016944:	0801afc0 	.word	0x0801afc0
 8016948:	0801afcc 	.word	0x0801afcc
  }

nullreturn:
 801694c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f7f5 fece 	bl	800c6f0 <pbuf_free>
  return NULL;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	3738      	adds	r7, #56	; 0x38
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}
 801695e:	bf00      	nop

08016960 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016964:	2005      	movs	r0, #5
 8016966:	f7f4 ffc1 	bl	800b8ec <memp_malloc>
 801696a:	4603      	mov	r3, r0
}
 801696c:	4618      	mov	r0, r3
 801696e:	bd80      	pop	{r7, pc}

08016970 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d106      	bne.n	801698c <ip_frag_free_pbuf_custom_ref+0x1c>
 801697e:	4b07      	ldr	r3, [pc, #28]	; (801699c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016980:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016984:	4906      	ldr	r1, [pc, #24]	; (80169a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016986:	4807      	ldr	r0, [pc, #28]	; (80169a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016988:	f000 fcec 	bl	8017364 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801698c:	6879      	ldr	r1, [r7, #4]
 801698e:	2005      	movs	r0, #5
 8016990:	f7f4 fffe 	bl	800b990 <memp_free>
}
 8016994:	bf00      	nop
 8016996:	3708      	adds	r7, #8
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}
 801699c:	0801ae34 	.word	0x0801ae34
 80169a0:	0801afec 	.word	0x0801afec
 80169a4:	0801ae7c 	.word	0x0801ae7c

080169a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b084      	sub	sp, #16
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d106      	bne.n	80169c8 <ipfrag_free_pbuf_custom+0x20>
 80169ba:	4b11      	ldr	r3, [pc, #68]	; (8016a00 <ipfrag_free_pbuf_custom+0x58>)
 80169bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80169c0:	4910      	ldr	r1, [pc, #64]	; (8016a04 <ipfrag_free_pbuf_custom+0x5c>)
 80169c2:	4811      	ldr	r0, [pc, #68]	; (8016a08 <ipfrag_free_pbuf_custom+0x60>)
 80169c4:	f000 fcce 	bl	8017364 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80169c8:	68fa      	ldr	r2, [r7, #12]
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	429a      	cmp	r2, r3
 80169ce:	d006      	beq.n	80169de <ipfrag_free_pbuf_custom+0x36>
 80169d0:	4b0b      	ldr	r3, [pc, #44]	; (8016a00 <ipfrag_free_pbuf_custom+0x58>)
 80169d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80169d6:	490d      	ldr	r1, [pc, #52]	; (8016a0c <ipfrag_free_pbuf_custom+0x64>)
 80169d8:	480b      	ldr	r0, [pc, #44]	; (8016a08 <ipfrag_free_pbuf_custom+0x60>)
 80169da:	f000 fcc3 	bl	8017364 <iprintf>
  if (pcr->original != NULL) {
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	695b      	ldr	r3, [r3, #20]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d004      	beq.n	80169f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	695b      	ldr	r3, [r3, #20]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7f5 fe80 	bl	800c6f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	f7ff ffbd 	bl	8016970 <ip_frag_free_pbuf_custom_ref>
}
 80169f6:	bf00      	nop
 80169f8:	3710      	adds	r7, #16
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}
 80169fe:	bf00      	nop
 8016a00:	0801ae34 	.word	0x0801ae34
 8016a04:	0801aff8 	.word	0x0801aff8
 8016a08:	0801ae7c 	.word	0x0801ae7c
 8016a0c:	0801b004 	.word	0x0801b004

08016a10 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b094      	sub	sp, #80	; 0x50
 8016a14:	af02      	add	r7, sp, #8
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a26:	3b14      	subs	r3, #20
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	da00      	bge.n	8016a2e <ip4_frag+0x1e>
 8016a2c:	3307      	adds	r3, #7
 8016a2e:	10db      	asrs	r3, r3, #3
 8016a30:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016a32:	2314      	movs	r3, #20
 8016a34:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	f003 030f 	and.w	r3, r3, #15
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	009b      	lsls	r3, r3, #2
 8016a4c:	b2db      	uxtb	r3, r3
 8016a4e:	2b14      	cmp	r3, #20
 8016a50:	d002      	beq.n	8016a58 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016a52:	f06f 0305 	mvn.w	r3, #5
 8016a56:	e110      	b.n	8016c7a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	895b      	ldrh	r3, [r3, #10]
 8016a5c:	2b13      	cmp	r3, #19
 8016a5e:	d809      	bhi.n	8016a74 <ip4_frag+0x64>
 8016a60:	4b88      	ldr	r3, [pc, #544]	; (8016c84 <ip4_frag+0x274>)
 8016a62:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016a66:	4988      	ldr	r1, [pc, #544]	; (8016c88 <ip4_frag+0x278>)
 8016a68:	4888      	ldr	r0, [pc, #544]	; (8016c8c <ip4_frag+0x27c>)
 8016a6a:	f000 fc7b 	bl	8017364 <iprintf>
 8016a6e:	f06f 0305 	mvn.w	r3, #5
 8016a72:	e102      	b.n	8016c7a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a76:	88db      	ldrh	r3, [r3, #6]
 8016a78:	b29b      	uxth	r3, r3
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f4 fa80 	bl	800af80 <lwip_htons>
 8016a80:	4603      	mov	r3, r0
 8016a82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016a84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016a8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016a94:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	891b      	ldrh	r3, [r3, #8]
 8016a9a:	3b14      	subs	r3, #20
 8016a9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016aa0:	e0e1      	b.n	8016c66 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016aa2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016aac:	4293      	cmp	r3, r2
 8016aae:	bf28      	it	cs
 8016ab0:	4613      	movcs	r3, r2
 8016ab2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016ab4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ab8:	2114      	movs	r1, #20
 8016aba:	200e      	movs	r0, #14
 8016abc:	f7f5 fb34 	bl	800c128 <pbuf_alloc>
 8016ac0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	f000 80d5 	beq.w	8016c74 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016acc:	895b      	ldrh	r3, [r3, #10]
 8016ace:	2b13      	cmp	r3, #19
 8016ad0:	d806      	bhi.n	8016ae0 <ip4_frag+0xd0>
 8016ad2:	4b6c      	ldr	r3, [pc, #432]	; (8016c84 <ip4_frag+0x274>)
 8016ad4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016ad8:	496d      	ldr	r1, [pc, #436]	; (8016c90 <ip4_frag+0x280>)
 8016ada:	486c      	ldr	r0, [pc, #432]	; (8016c8c <ip4_frag+0x27c>)
 8016adc:	f000 fc42 	bl	8017364 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	2214      	movs	r2, #20
 8016ae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f000 fbca 	bl	8017282 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016af4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016af6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016afa:	e064      	b.n	8016bc6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	895a      	ldrh	r2, [r3, #10]
 8016b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b02:	1ad3      	subs	r3, r2, r3
 8016b04:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	895b      	ldrh	r3, [r3, #10]
 8016b0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d906      	bls.n	8016b1e <ip4_frag+0x10e>
 8016b10:	4b5c      	ldr	r3, [pc, #368]	; (8016c84 <ip4_frag+0x274>)
 8016b12:	f240 322d 	movw	r2, #813	; 0x32d
 8016b16:	495f      	ldr	r1, [pc, #380]	; (8016c94 <ip4_frag+0x284>)
 8016b18:	485c      	ldr	r0, [pc, #368]	; (8016c8c <ip4_frag+0x27c>)
 8016b1a:	f000 fc23 	bl	8017364 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016b1e:	8bfa      	ldrh	r2, [r7, #30]
 8016b20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b24:	4293      	cmp	r3, r2
 8016b26:	bf28      	it	cs
 8016b28:	4613      	movcs	r3, r2
 8016b2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016b2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d105      	bne.n	8016b42 <ip4_frag+0x132>
        poff = 0;
 8016b36:	2300      	movs	r3, #0
 8016b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	60fb      	str	r3, [r7, #12]
        continue;
 8016b40:	e041      	b.n	8016bc6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016b42:	f7ff ff0d 	bl	8016960 <ip_frag_alloc_pbuf_custom_ref>
 8016b46:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d103      	bne.n	8016b56 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016b4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b50:	f7f5 fdce 	bl	800c6f0 <pbuf_free>
        goto memerr;
 8016b54:	e08f      	b.n	8016c76 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b56:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b5e:	4413      	add	r3, r2
 8016b60:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016b64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b68:	9201      	str	r2, [sp, #4]
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	2241      	movs	r2, #65	; 0x41
 8016b70:	2000      	movs	r0, #0
 8016b72:	f7f5 fc03 	bl	800c37c <pbuf_alloced_custom>
 8016b76:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016b78:	697b      	ldr	r3, [r7, #20]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d106      	bne.n	8016b8c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016b7e:	69b8      	ldr	r0, [r7, #24]
 8016b80:	f7ff fef6 	bl	8016970 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b86:	f7f5 fdb3 	bl	800c6f0 <pbuf_free>
        goto memerr;
 8016b8a:	e074      	b.n	8016c76 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016b8c:	68f8      	ldr	r0, [r7, #12]
 8016b8e:	f7f5 fe55 	bl	800c83c <pbuf_ref>
      pcr->original = p;
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	68fa      	ldr	r2, [r7, #12]
 8016b96:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	4a3f      	ldr	r2, [pc, #252]	; (8016c98 <ip4_frag+0x288>)
 8016b9c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016b9e:	6979      	ldr	r1, [r7, #20]
 8016ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ba2:	f7f5 fe73 	bl	800c88c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016ba6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016baa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016bae:	1ad3      	subs	r3, r2, r3
 8016bb0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016bb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d004      	beq.n	8016bc6 <ip4_frag+0x1b6>
        poff = 0;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016bc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d196      	bne.n	8016afc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016bce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016bd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016bd4:	4413      	add	r3, r2
 8016bd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bdc:	f1a3 0213 	sub.w	r2, r3, #19
 8016be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016be4:	429a      	cmp	r2, r3
 8016be6:	bfcc      	ite	gt
 8016be8:	2301      	movgt	r3, #1
 8016bea:	2300      	movle	r3, #0
 8016bec:	b2db      	uxtb	r3, r3
 8016bee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016bf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016bfa:	6a3b      	ldr	r3, [r7, #32]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d002      	beq.n	8016c06 <ip4_frag+0x1f6>
 8016c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d003      	beq.n	8016c0e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016c06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016c0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016c0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7f4 f9b5 	bl	800af80 <lwip_htons>
 8016c16:	4603      	mov	r3, r0
 8016c18:	461a      	mov	r2, r3
 8016c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016c1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c20:	3314      	adds	r3, #20
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7f4 f9ab 	bl	800af80 <lwip_htons>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c30:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c34:	2200      	movs	r2, #0
 8016c36:	729a      	strb	r2, [r3, #10]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016c3c:	68bb      	ldr	r3, [r7, #8]
 8016c3e:	695b      	ldr	r3, [r3, #20]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c44:	68b8      	ldr	r0, [r7, #8]
 8016c46:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c4a:	f7f5 fd51 	bl	800c6f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016c4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c54:	1ad3      	subs	r3, r2, r3
 8016c56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016c5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016c5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c60:	4413      	add	r3, r2
 8016c62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016c66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	f47f af19 	bne.w	8016aa2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016c70:	2300      	movs	r3, #0
 8016c72:	e002      	b.n	8016c7a <ip4_frag+0x26a>
      goto memerr;
 8016c74:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3748      	adds	r7, #72	; 0x48
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	0801ae34 	.word	0x0801ae34
 8016c88:	0801b010 	.word	0x0801b010
 8016c8c:	0801ae7c 	.word	0x0801ae7c
 8016c90:	0801b02c 	.word	0x0801b02c
 8016c94:	0801b04c 	.word	0x0801b04c
 8016c98:	080169a9 	.word	0x080169a9

08016c9c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b086      	sub	sp, #24
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016ca6:	230e      	movs	r3, #14
 8016ca8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	895b      	ldrh	r3, [r3, #10]
 8016cae:	2b0e      	cmp	r3, #14
 8016cb0:	d96e      	bls.n	8016d90 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	7bdb      	ldrb	r3, [r3, #15]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d106      	bne.n	8016cc8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016cc0:	3301      	adds	r3, #1
 8016cc2:	b2da      	uxtb	r2, r3
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	685b      	ldr	r3, [r3, #4]
 8016ccc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	7b1a      	ldrb	r2, [r3, #12]
 8016cd2:	7b5b      	ldrb	r3, [r3, #13]
 8016cd4:	021b      	lsls	r3, r3, #8
 8016cd6:	4313      	orrs	r3, r2
 8016cd8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	f003 0301 	and.w	r3, r3, #1
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d023      	beq.n	8016d2e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	d10f      	bne.n	8016d0e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	785b      	ldrb	r3, [r3, #1]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d11b      	bne.n	8016d2e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016cfa:	2b5e      	cmp	r3, #94	; 0x5e
 8016cfc:	d117      	bne.n	8016d2e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	7b5b      	ldrb	r3, [r3, #13]
 8016d02:	f043 0310 	orr.w	r3, r3, #16
 8016d06:	b2da      	uxtb	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	735a      	strb	r2, [r3, #13]
 8016d0c:	e00f      	b.n	8016d2e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	2206      	movs	r2, #6
 8016d12:	4928      	ldr	r1, [pc, #160]	; (8016db4 <ethernet_input+0x118>)
 8016d14:	4618      	mov	r0, r3
 8016d16:	f000 faa6 	bl	8017266 <memcmp>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d106      	bne.n	8016d2e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	7b5b      	ldrb	r3, [r3, #13]
 8016d24:	f043 0308 	orr.w	r3, r3, #8
 8016d28:	b2da      	uxtb	r2, r3
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016d2e:	89fb      	ldrh	r3, [r7, #14]
 8016d30:	2b08      	cmp	r3, #8
 8016d32:	d003      	beq.n	8016d3c <ethernet_input+0xa0>
 8016d34:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016d38:	d014      	beq.n	8016d64 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016d3a:	e032      	b.n	8016da2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d42:	f003 0308 	and.w	r3, r3, #8
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d024      	beq.n	8016d94 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016d4a:	8afb      	ldrh	r3, [r7, #22]
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	f7f5 fc48 	bl	800c5e4 <pbuf_remove_header>
 8016d54:	4603      	mov	r3, r0
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d11e      	bne.n	8016d98 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016d5a:	6839      	ldr	r1, [r7, #0]
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f7fe ff09 	bl	8015b74 <ip4_input>
      break;
 8016d62:	e013      	b.n	8016d8c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d64:	683b      	ldr	r3, [r7, #0]
 8016d66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d6a:	f003 0308 	and.w	r3, r3, #8
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d014      	beq.n	8016d9c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016d72:	8afb      	ldrh	r3, [r7, #22]
 8016d74:	4619      	mov	r1, r3
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f7f5 fc34 	bl	800c5e4 <pbuf_remove_header>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d10e      	bne.n	8016da0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016d82:	6839      	ldr	r1, [r7, #0]
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	f7fe f8a5 	bl	8014ed4 <etharp_input>
      break;
 8016d8a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	e00c      	b.n	8016daa <ethernet_input+0x10e>
    goto free_and_return;
 8016d90:	bf00      	nop
 8016d92:	e006      	b.n	8016da2 <ethernet_input+0x106>
        goto free_and_return;
 8016d94:	bf00      	nop
 8016d96:	e004      	b.n	8016da2 <ethernet_input+0x106>
        goto free_and_return;
 8016d98:	bf00      	nop
 8016d9a:	e002      	b.n	8016da2 <ethernet_input+0x106>
        goto free_and_return;
 8016d9c:	bf00      	nop
 8016d9e:	e000      	b.n	8016da2 <ethernet_input+0x106>
        goto free_and_return;
 8016da0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f7f5 fca4 	bl	800c6f0 <pbuf_free>
  return ERR_OK;
 8016da8:	2300      	movs	r3, #0
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3718      	adds	r7, #24
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}
 8016db2:	bf00      	nop
 8016db4:	0801b37c 	.word	0x0801b37c

08016db8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b086      	sub	sp, #24
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	60f8      	str	r0, [r7, #12]
 8016dc0:	60b9      	str	r1, [r7, #8]
 8016dc2:	607a      	str	r2, [r7, #4]
 8016dc4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016dc6:	8c3b      	ldrh	r3, [r7, #32]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7f4 f8d9 	bl	800af80 <lwip_htons>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016dd2:	210e      	movs	r1, #14
 8016dd4:	68b8      	ldr	r0, [r7, #8]
 8016dd6:	f7f5 fbf5 	bl	800c5c4 <pbuf_add_header>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d125      	bne.n	8016e2c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	8afa      	ldrh	r2, [r7, #22]
 8016dea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016dec:	693b      	ldr	r3, [r7, #16]
 8016dee:	2206      	movs	r2, #6
 8016df0:	6839      	ldr	r1, [r7, #0]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f000 fa45 	bl	8017282 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016df8:	693b      	ldr	r3, [r7, #16]
 8016dfa:	3306      	adds	r3, #6
 8016dfc:	2206      	movs	r2, #6
 8016dfe:	6879      	ldr	r1, [r7, #4]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f000 fa3e 	bl	8017282 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e0c:	2b06      	cmp	r3, #6
 8016e0e:	d006      	beq.n	8016e1e <ethernet_output+0x66>
 8016e10:	4b0a      	ldr	r3, [pc, #40]	; (8016e3c <ethernet_output+0x84>)
 8016e12:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016e16:	490a      	ldr	r1, [pc, #40]	; (8016e40 <ethernet_output+0x88>)
 8016e18:	480a      	ldr	r0, [pc, #40]	; (8016e44 <ethernet_output+0x8c>)
 8016e1a:	f000 faa3 	bl	8017364 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	699b      	ldr	r3, [r3, #24]
 8016e22:	68b9      	ldr	r1, [r7, #8]
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	4798      	blx	r3
 8016e28:	4603      	mov	r3, r0
 8016e2a:	e002      	b.n	8016e32 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016e2c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016e2e:	f06f 0301 	mvn.w	r3, #1
}
 8016e32:	4618      	mov	r0, r3
 8016e34:	3718      	adds	r7, #24
 8016e36:	46bd      	mov	sp, r7
 8016e38:	bd80      	pop	{r7, pc}
 8016e3a:	bf00      	nop
 8016e3c:	0801b05c 	.word	0x0801b05c
 8016e40:	0801b094 	.word	0x0801b094
 8016e44:	0801b0c8 	.word	0x0801b0c8

08016e48 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	2200      	movs	r2, #0
 8016e56:	2104      	movs	r1, #4
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7f0 fc43 	bl	80076e4 <osMessageQueueNew>
 8016e5e:	4602      	mov	r2, r0
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d102      	bne.n	8016e72 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e70:	e000      	b.n	8016e74 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016e72:	2300      	movs	r3, #0
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6818      	ldr	r0, [r3, #0]
 8016e8a:	4639      	mov	r1, r7
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	2200      	movs	r2, #0
 8016e90:	f7f0 fc9c 	bl	80077cc <osMessageQueuePut>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d102      	bne.n	8016ea0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	73fb      	strb	r3, [r7, #15]
 8016e9e:	e001      	b.n	8016ea4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016ea0:	23ff      	movs	r3, #255	; 0xff
 8016ea2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	3710      	adds	r7, #16
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b086      	sub	sp, #24
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	60f8      	str	r0, [r7, #12]
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016ebc:	f7f0 f922 	bl	8007104 <osKernelGetTickCount>
 8016ec0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d013      	beq.n	8016ef0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	6818      	ldr	r0, [r3, #0]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	68b9      	ldr	r1, [r7, #8]
 8016ed2:	f7f0 fcdb 	bl	800788c <osMessageQueueGet>
 8016ed6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d105      	bne.n	8016eea <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016ede:	f7f0 f911 	bl	8007104 <osKernelGetTickCount>
 8016ee2:	4602      	mov	r2, r0
 8016ee4:	697b      	ldr	r3, [r7, #20]
 8016ee6:	1ad3      	subs	r3, r2, r3
 8016ee8:	e00f      	b.n	8016f0a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016eea:	f04f 33ff 	mov.w	r3, #4294967295
 8016eee:	e00c      	b.n	8016f0a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	6818      	ldr	r0, [r3, #0]
 8016ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ef8:	2200      	movs	r2, #0
 8016efa:	68b9      	ldr	r1, [r7, #8]
 8016efc:	f7f0 fcc6 	bl	800788c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016f00:	f7f0 f900 	bl	8007104 <osKernelGetTickCount>
 8016f04:	4602      	mov	r2, r0
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3718      	adds	r7, #24
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}

08016f12 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016f12:	b480      	push	{r7}
 8016f14:	b083      	sub	sp, #12
 8016f16:	af00      	add	r7, sp, #0
 8016f18:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d101      	bne.n	8016f26 <sys_mbox_valid+0x14>
    return 0;
 8016f22:	2300      	movs	r3, #0
 8016f24:	e000      	b.n	8016f28 <sys_mbox_valid+0x16>
  else
    return 1;
 8016f26:	2301      	movs	r3, #1
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	370c      	adds	r7, #12
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f32:	4770      	bx	lr

08016f34 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016f38:	2000      	movs	r0, #0
 8016f3a:	f7f0 f9a5 	bl	8007288 <osMutexNew>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	4a01      	ldr	r2, [pc, #4]	; (8016f48 <sys_init+0x14>)
 8016f42:	6013      	str	r3, [r2, #0]
#endif
}
 8016f44:	bf00      	nop
 8016f46:	bd80      	pop	{r7, pc}
 8016f48:	2000bbe0 	.word	0x2000bbe0

08016f4c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016f54:	2000      	movs	r0, #0
 8016f56:	f7f0 f997 	bl	8007288 <osMutexNew>
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d102      	bne.n	8016f6e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016f68:	f04f 33ff 	mov.w	r3, #4294967295
 8016f6c:	e000      	b.n	8016f70 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016f6e:	2300      	movs	r3, #0
}
 8016f70:	4618      	mov	r0, r3
 8016f72:	3708      	adds	r7, #8
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}

08016f78 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b082      	sub	sp, #8
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	f04f 31ff 	mov.w	r1, #4294967295
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7f0 fa03 	bl	8007394 <osMutexAcquire>
#endif
}
 8016f8e:	bf00      	nop
 8016f90:	3708      	adds	r7, #8
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}

08016f96 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016f96:	b580      	push	{r7, lr}
 8016f98:	b082      	sub	sp, #8
 8016f9a:	af00      	add	r7, sp, #0
 8016f9c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7f0 fa41 	bl	800742a <osMutexRelease>
}
 8016fa8:	bf00      	nop
 8016faa:	3708      	adds	r7, #8
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b08e      	sub	sp, #56	; 0x38
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	607a      	str	r2, [r7, #4]
 8016fbc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016fbe:	f107 0314 	add.w	r3, r7, #20
 8016fc2:	2224      	movs	r2, #36	; 0x24
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f000 f969 	bl	801729e <memset>
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	617b      	str	r3, [r7, #20]
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8016fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016fd8:	f107 0314 	add.w	r3, r7, #20
 8016fdc:	461a      	mov	r2, r3
 8016fde:	6879      	ldr	r1, [r7, #4]
 8016fe0:	68b8      	ldr	r0, [r7, #8]
 8016fe2:	f7f0 f8a4 	bl	800712e <osThreadNew>
 8016fe6:	4603      	mov	r3, r0
#endif
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3738      	adds	r7, #56	; 0x38
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016ff4:	4b04      	ldr	r3, [pc, #16]	; (8017008 <sys_arch_protect+0x18>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7f0 f9c9 	bl	8007394 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017002:	2301      	movs	r3, #1
}
 8017004:	4618      	mov	r0, r3
 8017006:	bd80      	pop	{r7, pc}
 8017008:	2000bbe0 	.word	0x2000bbe0

0801700c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b082      	sub	sp, #8
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017014:	4b04      	ldr	r3, [pc, #16]	; (8017028 <sys_arch_unprotect+0x1c>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	4618      	mov	r0, r3
 801701a:	f7f0 fa06 	bl	800742a <osMutexRelease>
}
 801701e:	bf00      	nop
 8017020:	3708      	adds	r7, #8
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	bf00      	nop
 8017028:	2000bbe0 	.word	0x2000bbe0

0801702c <std>:
 801702c:	2300      	movs	r3, #0
 801702e:	b510      	push	{r4, lr}
 8017030:	4604      	mov	r4, r0
 8017032:	e9c0 3300 	strd	r3, r3, [r0]
 8017036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801703a:	6083      	str	r3, [r0, #8]
 801703c:	8181      	strh	r1, [r0, #12]
 801703e:	6643      	str	r3, [r0, #100]	; 0x64
 8017040:	81c2      	strh	r2, [r0, #14]
 8017042:	6183      	str	r3, [r0, #24]
 8017044:	4619      	mov	r1, r3
 8017046:	2208      	movs	r2, #8
 8017048:	305c      	adds	r0, #92	; 0x5c
 801704a:	f000 f928 	bl	801729e <memset>
 801704e:	4b05      	ldr	r3, [pc, #20]	; (8017064 <std+0x38>)
 8017050:	6263      	str	r3, [r4, #36]	; 0x24
 8017052:	4b05      	ldr	r3, [pc, #20]	; (8017068 <std+0x3c>)
 8017054:	62a3      	str	r3, [r4, #40]	; 0x28
 8017056:	4b05      	ldr	r3, [pc, #20]	; (801706c <std+0x40>)
 8017058:	62e3      	str	r3, [r4, #44]	; 0x2c
 801705a:	4b05      	ldr	r3, [pc, #20]	; (8017070 <std+0x44>)
 801705c:	6224      	str	r4, [r4, #32]
 801705e:	6323      	str	r3, [r4, #48]	; 0x30
 8017060:	bd10      	pop	{r4, pc}
 8017062:	bf00      	nop
 8017064:	08017509 	.word	0x08017509
 8017068:	0801752b 	.word	0x0801752b
 801706c:	08017563 	.word	0x08017563
 8017070:	08017587 	.word	0x08017587

08017074 <_cleanup_r>:
 8017074:	4901      	ldr	r1, [pc, #4]	; (801707c <_cleanup_r+0x8>)
 8017076:	f000 b8af 	b.w	80171d8 <_fwalk_reent>
 801707a:	bf00      	nop
 801707c:	0801771d 	.word	0x0801771d

08017080 <__sfmoreglue>:
 8017080:	b570      	push	{r4, r5, r6, lr}
 8017082:	1e4a      	subs	r2, r1, #1
 8017084:	2568      	movs	r5, #104	; 0x68
 8017086:	4355      	muls	r5, r2
 8017088:	460e      	mov	r6, r1
 801708a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801708e:	f000 f90f 	bl	80172b0 <_malloc_r>
 8017092:	4604      	mov	r4, r0
 8017094:	b140      	cbz	r0, 80170a8 <__sfmoreglue+0x28>
 8017096:	2100      	movs	r1, #0
 8017098:	e9c0 1600 	strd	r1, r6, [r0]
 801709c:	300c      	adds	r0, #12
 801709e:	60a0      	str	r0, [r4, #8]
 80170a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80170a4:	f000 f8fb 	bl	801729e <memset>
 80170a8:	4620      	mov	r0, r4
 80170aa:	bd70      	pop	{r4, r5, r6, pc}

080170ac <__sfp_lock_acquire>:
 80170ac:	4801      	ldr	r0, [pc, #4]	; (80170b4 <__sfp_lock_acquire+0x8>)
 80170ae:	f000 b8d8 	b.w	8017262 <__retarget_lock_acquire_recursive>
 80170b2:	bf00      	nop
 80170b4:	2000bbec 	.word	0x2000bbec

080170b8 <__sfp_lock_release>:
 80170b8:	4801      	ldr	r0, [pc, #4]	; (80170c0 <__sfp_lock_release+0x8>)
 80170ba:	f000 b8d3 	b.w	8017264 <__retarget_lock_release_recursive>
 80170be:	bf00      	nop
 80170c0:	2000bbec 	.word	0x2000bbec

080170c4 <__sinit_lock_acquire>:
 80170c4:	4801      	ldr	r0, [pc, #4]	; (80170cc <__sinit_lock_acquire+0x8>)
 80170c6:	f000 b8cc 	b.w	8017262 <__retarget_lock_acquire_recursive>
 80170ca:	bf00      	nop
 80170cc:	2000bbe7 	.word	0x2000bbe7

080170d0 <__sinit_lock_release>:
 80170d0:	4801      	ldr	r0, [pc, #4]	; (80170d8 <__sinit_lock_release+0x8>)
 80170d2:	f000 b8c7 	b.w	8017264 <__retarget_lock_release_recursive>
 80170d6:	bf00      	nop
 80170d8:	2000bbe7 	.word	0x2000bbe7

080170dc <__sinit>:
 80170dc:	b510      	push	{r4, lr}
 80170de:	4604      	mov	r4, r0
 80170e0:	f7ff fff0 	bl	80170c4 <__sinit_lock_acquire>
 80170e4:	69a3      	ldr	r3, [r4, #24]
 80170e6:	b11b      	cbz	r3, 80170f0 <__sinit+0x14>
 80170e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170ec:	f7ff bff0 	b.w	80170d0 <__sinit_lock_release>
 80170f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170f4:	6523      	str	r3, [r4, #80]	; 0x50
 80170f6:	4b13      	ldr	r3, [pc, #76]	; (8017144 <__sinit+0x68>)
 80170f8:	4a13      	ldr	r2, [pc, #76]	; (8017148 <__sinit+0x6c>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80170fe:	42a3      	cmp	r3, r4
 8017100:	bf04      	itt	eq
 8017102:	2301      	moveq	r3, #1
 8017104:	61a3      	streq	r3, [r4, #24]
 8017106:	4620      	mov	r0, r4
 8017108:	f000 f820 	bl	801714c <__sfp>
 801710c:	6060      	str	r0, [r4, #4]
 801710e:	4620      	mov	r0, r4
 8017110:	f000 f81c 	bl	801714c <__sfp>
 8017114:	60a0      	str	r0, [r4, #8]
 8017116:	4620      	mov	r0, r4
 8017118:	f000 f818 	bl	801714c <__sfp>
 801711c:	2200      	movs	r2, #0
 801711e:	60e0      	str	r0, [r4, #12]
 8017120:	2104      	movs	r1, #4
 8017122:	6860      	ldr	r0, [r4, #4]
 8017124:	f7ff ff82 	bl	801702c <std>
 8017128:	68a0      	ldr	r0, [r4, #8]
 801712a:	2201      	movs	r2, #1
 801712c:	2109      	movs	r1, #9
 801712e:	f7ff ff7d 	bl	801702c <std>
 8017132:	68e0      	ldr	r0, [r4, #12]
 8017134:	2202      	movs	r2, #2
 8017136:	2112      	movs	r1, #18
 8017138:	f7ff ff78 	bl	801702c <std>
 801713c:	2301      	movs	r3, #1
 801713e:	61a3      	str	r3, [r4, #24]
 8017140:	e7d2      	b.n	80170e8 <__sinit+0xc>
 8017142:	bf00      	nop
 8017144:	0801b3ec 	.word	0x0801b3ec
 8017148:	08017075 	.word	0x08017075

0801714c <__sfp>:
 801714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801714e:	4607      	mov	r7, r0
 8017150:	f7ff ffac 	bl	80170ac <__sfp_lock_acquire>
 8017154:	4b1e      	ldr	r3, [pc, #120]	; (80171d0 <__sfp+0x84>)
 8017156:	681e      	ldr	r6, [r3, #0]
 8017158:	69b3      	ldr	r3, [r6, #24]
 801715a:	b913      	cbnz	r3, 8017162 <__sfp+0x16>
 801715c:	4630      	mov	r0, r6
 801715e:	f7ff ffbd 	bl	80170dc <__sinit>
 8017162:	3648      	adds	r6, #72	; 0x48
 8017164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017168:	3b01      	subs	r3, #1
 801716a:	d503      	bpl.n	8017174 <__sfp+0x28>
 801716c:	6833      	ldr	r3, [r6, #0]
 801716e:	b30b      	cbz	r3, 80171b4 <__sfp+0x68>
 8017170:	6836      	ldr	r6, [r6, #0]
 8017172:	e7f7      	b.n	8017164 <__sfp+0x18>
 8017174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017178:	b9d5      	cbnz	r5, 80171b0 <__sfp+0x64>
 801717a:	4b16      	ldr	r3, [pc, #88]	; (80171d4 <__sfp+0x88>)
 801717c:	60e3      	str	r3, [r4, #12]
 801717e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017182:	6665      	str	r5, [r4, #100]	; 0x64
 8017184:	f000 f86c 	bl	8017260 <__retarget_lock_init_recursive>
 8017188:	f7ff ff96 	bl	80170b8 <__sfp_lock_release>
 801718c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017194:	6025      	str	r5, [r4, #0]
 8017196:	61a5      	str	r5, [r4, #24]
 8017198:	2208      	movs	r2, #8
 801719a:	4629      	mov	r1, r5
 801719c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80171a0:	f000 f87d 	bl	801729e <memset>
 80171a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80171a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80171ac:	4620      	mov	r0, r4
 80171ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b0:	3468      	adds	r4, #104	; 0x68
 80171b2:	e7d9      	b.n	8017168 <__sfp+0x1c>
 80171b4:	2104      	movs	r1, #4
 80171b6:	4638      	mov	r0, r7
 80171b8:	f7ff ff62 	bl	8017080 <__sfmoreglue>
 80171bc:	4604      	mov	r4, r0
 80171be:	6030      	str	r0, [r6, #0]
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d1d5      	bne.n	8017170 <__sfp+0x24>
 80171c4:	f7ff ff78 	bl	80170b8 <__sfp_lock_release>
 80171c8:	230c      	movs	r3, #12
 80171ca:	603b      	str	r3, [r7, #0]
 80171cc:	e7ee      	b.n	80171ac <__sfp+0x60>
 80171ce:	bf00      	nop
 80171d0:	0801b3ec 	.word	0x0801b3ec
 80171d4:	ffff0001 	.word	0xffff0001

080171d8 <_fwalk_reent>:
 80171d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171dc:	4606      	mov	r6, r0
 80171de:	4688      	mov	r8, r1
 80171e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80171e4:	2700      	movs	r7, #0
 80171e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171ea:	f1b9 0901 	subs.w	r9, r9, #1
 80171ee:	d505      	bpl.n	80171fc <_fwalk_reent+0x24>
 80171f0:	6824      	ldr	r4, [r4, #0]
 80171f2:	2c00      	cmp	r4, #0
 80171f4:	d1f7      	bne.n	80171e6 <_fwalk_reent+0xe>
 80171f6:	4638      	mov	r0, r7
 80171f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171fc:	89ab      	ldrh	r3, [r5, #12]
 80171fe:	2b01      	cmp	r3, #1
 8017200:	d907      	bls.n	8017212 <_fwalk_reent+0x3a>
 8017202:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017206:	3301      	adds	r3, #1
 8017208:	d003      	beq.n	8017212 <_fwalk_reent+0x3a>
 801720a:	4629      	mov	r1, r5
 801720c:	4630      	mov	r0, r6
 801720e:	47c0      	blx	r8
 8017210:	4307      	orrs	r7, r0
 8017212:	3568      	adds	r5, #104	; 0x68
 8017214:	e7e9      	b.n	80171ea <_fwalk_reent+0x12>
	...

08017218 <__libc_init_array>:
 8017218:	b570      	push	{r4, r5, r6, lr}
 801721a:	4d0d      	ldr	r5, [pc, #52]	; (8017250 <__libc_init_array+0x38>)
 801721c:	4c0d      	ldr	r4, [pc, #52]	; (8017254 <__libc_init_array+0x3c>)
 801721e:	1b64      	subs	r4, r4, r5
 8017220:	10a4      	asrs	r4, r4, #2
 8017222:	2600      	movs	r6, #0
 8017224:	42a6      	cmp	r6, r4
 8017226:	d109      	bne.n	801723c <__libc_init_array+0x24>
 8017228:	4d0b      	ldr	r5, [pc, #44]	; (8017258 <__libc_init_array+0x40>)
 801722a:	4c0c      	ldr	r4, [pc, #48]	; (801725c <__libc_init_array+0x44>)
 801722c:	f000 ffcc 	bl	80181c8 <_init>
 8017230:	1b64      	subs	r4, r4, r5
 8017232:	10a4      	asrs	r4, r4, #2
 8017234:	2600      	movs	r6, #0
 8017236:	42a6      	cmp	r6, r4
 8017238:	d105      	bne.n	8017246 <__libc_init_array+0x2e>
 801723a:	bd70      	pop	{r4, r5, r6, pc}
 801723c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017240:	4798      	blx	r3
 8017242:	3601      	adds	r6, #1
 8017244:	e7ee      	b.n	8017224 <__libc_init_array+0xc>
 8017246:	f855 3b04 	ldr.w	r3, [r5], #4
 801724a:	4798      	blx	r3
 801724c:	3601      	adds	r6, #1
 801724e:	e7f2      	b.n	8017236 <__libc_init_array+0x1e>
 8017250:	0801b4e0 	.word	0x0801b4e0
 8017254:	0801b4e0 	.word	0x0801b4e0
 8017258:	0801b4e0 	.word	0x0801b4e0
 801725c:	0801b4e4 	.word	0x0801b4e4

08017260 <__retarget_lock_init_recursive>:
 8017260:	4770      	bx	lr

08017262 <__retarget_lock_acquire_recursive>:
 8017262:	4770      	bx	lr

08017264 <__retarget_lock_release_recursive>:
 8017264:	4770      	bx	lr

08017266 <memcmp>:
 8017266:	b530      	push	{r4, r5, lr}
 8017268:	3901      	subs	r1, #1
 801726a:	2400      	movs	r4, #0
 801726c:	42a2      	cmp	r2, r4
 801726e:	d101      	bne.n	8017274 <memcmp+0xe>
 8017270:	2000      	movs	r0, #0
 8017272:	e005      	b.n	8017280 <memcmp+0x1a>
 8017274:	5d03      	ldrb	r3, [r0, r4]
 8017276:	3401      	adds	r4, #1
 8017278:	5d0d      	ldrb	r5, [r1, r4]
 801727a:	42ab      	cmp	r3, r5
 801727c:	d0f6      	beq.n	801726c <memcmp+0x6>
 801727e:	1b58      	subs	r0, r3, r5
 8017280:	bd30      	pop	{r4, r5, pc}

08017282 <memcpy>:
 8017282:	440a      	add	r2, r1
 8017284:	4291      	cmp	r1, r2
 8017286:	f100 33ff 	add.w	r3, r0, #4294967295
 801728a:	d100      	bne.n	801728e <memcpy+0xc>
 801728c:	4770      	bx	lr
 801728e:	b510      	push	{r4, lr}
 8017290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017298:	4291      	cmp	r1, r2
 801729a:	d1f9      	bne.n	8017290 <memcpy+0xe>
 801729c:	bd10      	pop	{r4, pc}

0801729e <memset>:
 801729e:	4402      	add	r2, r0
 80172a0:	4603      	mov	r3, r0
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d100      	bne.n	80172a8 <memset+0xa>
 80172a6:	4770      	bx	lr
 80172a8:	f803 1b01 	strb.w	r1, [r3], #1
 80172ac:	e7f9      	b.n	80172a2 <memset+0x4>
	...

080172b0 <_malloc_r>:
 80172b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172b2:	1ccd      	adds	r5, r1, #3
 80172b4:	f025 0503 	bic.w	r5, r5, #3
 80172b8:	3508      	adds	r5, #8
 80172ba:	2d0c      	cmp	r5, #12
 80172bc:	bf38      	it	cc
 80172be:	250c      	movcc	r5, #12
 80172c0:	2d00      	cmp	r5, #0
 80172c2:	4606      	mov	r6, r0
 80172c4:	db01      	blt.n	80172ca <_malloc_r+0x1a>
 80172c6:	42a9      	cmp	r1, r5
 80172c8:	d903      	bls.n	80172d2 <_malloc_r+0x22>
 80172ca:	230c      	movs	r3, #12
 80172cc:	6033      	str	r3, [r6, #0]
 80172ce:	2000      	movs	r0, #0
 80172d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172d2:	f000 fa8b 	bl	80177ec <__malloc_lock>
 80172d6:	4921      	ldr	r1, [pc, #132]	; (801735c <_malloc_r+0xac>)
 80172d8:	680a      	ldr	r2, [r1, #0]
 80172da:	4614      	mov	r4, r2
 80172dc:	b99c      	cbnz	r4, 8017306 <_malloc_r+0x56>
 80172de:	4f20      	ldr	r7, [pc, #128]	; (8017360 <_malloc_r+0xb0>)
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	b923      	cbnz	r3, 80172ee <_malloc_r+0x3e>
 80172e4:	4621      	mov	r1, r4
 80172e6:	4630      	mov	r0, r6
 80172e8:	f000 f8fe 	bl	80174e8 <_sbrk_r>
 80172ec:	6038      	str	r0, [r7, #0]
 80172ee:	4629      	mov	r1, r5
 80172f0:	4630      	mov	r0, r6
 80172f2:	f000 f8f9 	bl	80174e8 <_sbrk_r>
 80172f6:	1c43      	adds	r3, r0, #1
 80172f8:	d123      	bne.n	8017342 <_malloc_r+0x92>
 80172fa:	230c      	movs	r3, #12
 80172fc:	6033      	str	r3, [r6, #0]
 80172fe:	4630      	mov	r0, r6
 8017300:	f000 fa7a 	bl	80177f8 <__malloc_unlock>
 8017304:	e7e3      	b.n	80172ce <_malloc_r+0x1e>
 8017306:	6823      	ldr	r3, [r4, #0]
 8017308:	1b5b      	subs	r3, r3, r5
 801730a:	d417      	bmi.n	801733c <_malloc_r+0x8c>
 801730c:	2b0b      	cmp	r3, #11
 801730e:	d903      	bls.n	8017318 <_malloc_r+0x68>
 8017310:	6023      	str	r3, [r4, #0]
 8017312:	441c      	add	r4, r3
 8017314:	6025      	str	r5, [r4, #0]
 8017316:	e004      	b.n	8017322 <_malloc_r+0x72>
 8017318:	6863      	ldr	r3, [r4, #4]
 801731a:	42a2      	cmp	r2, r4
 801731c:	bf0c      	ite	eq
 801731e:	600b      	streq	r3, [r1, #0]
 8017320:	6053      	strne	r3, [r2, #4]
 8017322:	4630      	mov	r0, r6
 8017324:	f000 fa68 	bl	80177f8 <__malloc_unlock>
 8017328:	f104 000b 	add.w	r0, r4, #11
 801732c:	1d23      	adds	r3, r4, #4
 801732e:	f020 0007 	bic.w	r0, r0, #7
 8017332:	1ac2      	subs	r2, r0, r3
 8017334:	d0cc      	beq.n	80172d0 <_malloc_r+0x20>
 8017336:	1a1b      	subs	r3, r3, r0
 8017338:	50a3      	str	r3, [r4, r2]
 801733a:	e7c9      	b.n	80172d0 <_malloc_r+0x20>
 801733c:	4622      	mov	r2, r4
 801733e:	6864      	ldr	r4, [r4, #4]
 8017340:	e7cc      	b.n	80172dc <_malloc_r+0x2c>
 8017342:	1cc4      	adds	r4, r0, #3
 8017344:	f024 0403 	bic.w	r4, r4, #3
 8017348:	42a0      	cmp	r0, r4
 801734a:	d0e3      	beq.n	8017314 <_malloc_r+0x64>
 801734c:	1a21      	subs	r1, r4, r0
 801734e:	4630      	mov	r0, r6
 8017350:	f000 f8ca 	bl	80174e8 <_sbrk_r>
 8017354:	3001      	adds	r0, #1
 8017356:	d1dd      	bne.n	8017314 <_malloc_r+0x64>
 8017358:	e7cf      	b.n	80172fa <_malloc_r+0x4a>
 801735a:	bf00      	nop
 801735c:	20004c18 	.word	0x20004c18
 8017360:	20004c1c 	.word	0x20004c1c

08017364 <iprintf>:
 8017364:	b40f      	push	{r0, r1, r2, r3}
 8017366:	4b0a      	ldr	r3, [pc, #40]	; (8017390 <iprintf+0x2c>)
 8017368:	b513      	push	{r0, r1, r4, lr}
 801736a:	681c      	ldr	r4, [r3, #0]
 801736c:	b124      	cbz	r4, 8017378 <iprintf+0x14>
 801736e:	69a3      	ldr	r3, [r4, #24]
 8017370:	b913      	cbnz	r3, 8017378 <iprintf+0x14>
 8017372:	4620      	mov	r0, r4
 8017374:	f7ff feb2 	bl	80170dc <__sinit>
 8017378:	ab05      	add	r3, sp, #20
 801737a:	9a04      	ldr	r2, [sp, #16]
 801737c:	68a1      	ldr	r1, [r4, #8]
 801737e:	9301      	str	r3, [sp, #4]
 8017380:	4620      	mov	r0, r4
 8017382:	f000 fab9 	bl	80178f8 <_vfiprintf_r>
 8017386:	b002      	add	sp, #8
 8017388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801738c:	b004      	add	sp, #16
 801738e:	4770      	bx	lr
 8017390:	20000020 	.word	0x20000020

08017394 <rand>:
 8017394:	4b17      	ldr	r3, [pc, #92]	; (80173f4 <rand+0x60>)
 8017396:	b510      	push	{r4, lr}
 8017398:	681c      	ldr	r4, [r3, #0]
 801739a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801739c:	b9b3      	cbnz	r3, 80173cc <rand+0x38>
 801739e:	2018      	movs	r0, #24
 80173a0:	f000 fa1c 	bl	80177dc <malloc>
 80173a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80173a6:	b928      	cbnz	r0, 80173b4 <rand+0x20>
 80173a8:	4602      	mov	r2, r0
 80173aa:	4b13      	ldr	r3, [pc, #76]	; (80173f8 <rand+0x64>)
 80173ac:	4813      	ldr	r0, [pc, #76]	; (80173fc <rand+0x68>)
 80173ae:	214e      	movs	r1, #78	; 0x4e
 80173b0:	f000 f900 	bl	80175b4 <__assert_func>
 80173b4:	4a12      	ldr	r2, [pc, #72]	; (8017400 <rand+0x6c>)
 80173b6:	4b13      	ldr	r3, [pc, #76]	; (8017404 <rand+0x70>)
 80173b8:	e9c0 2300 	strd	r2, r3, [r0]
 80173bc:	4b12      	ldr	r3, [pc, #72]	; (8017408 <rand+0x74>)
 80173be:	6083      	str	r3, [r0, #8]
 80173c0:	230b      	movs	r3, #11
 80173c2:	8183      	strh	r3, [r0, #12]
 80173c4:	2201      	movs	r2, #1
 80173c6:	2300      	movs	r3, #0
 80173c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80173cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80173ce:	480f      	ldr	r0, [pc, #60]	; (801740c <rand+0x78>)
 80173d0:	690a      	ldr	r2, [r1, #16]
 80173d2:	694b      	ldr	r3, [r1, #20]
 80173d4:	4c0e      	ldr	r4, [pc, #56]	; (8017410 <rand+0x7c>)
 80173d6:	4350      	muls	r0, r2
 80173d8:	fb04 0003 	mla	r0, r4, r3, r0
 80173dc:	fba2 3404 	umull	r3, r4, r2, r4
 80173e0:	1c5a      	adds	r2, r3, #1
 80173e2:	4404      	add	r4, r0
 80173e4:	f144 0000 	adc.w	r0, r4, #0
 80173e8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80173ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80173f0:	bd10      	pop	{r4, pc}
 80173f2:	bf00      	nop
 80173f4:	20000020 	.word	0x20000020
 80173f8:	0801b3f0 	.word	0x0801b3f0
 80173fc:	0801b407 	.word	0x0801b407
 8017400:	abcd330e 	.word	0xabcd330e
 8017404:	e66d1234 	.word	0xe66d1234
 8017408:	0005deec 	.word	0x0005deec
 801740c:	5851f42d 	.word	0x5851f42d
 8017410:	4c957f2d 	.word	0x4c957f2d

08017414 <cleanup_glue>:
 8017414:	b538      	push	{r3, r4, r5, lr}
 8017416:	460c      	mov	r4, r1
 8017418:	6809      	ldr	r1, [r1, #0]
 801741a:	4605      	mov	r5, r0
 801741c:	b109      	cbz	r1, 8017422 <cleanup_glue+0xe>
 801741e:	f7ff fff9 	bl	8017414 <cleanup_glue>
 8017422:	4621      	mov	r1, r4
 8017424:	4628      	mov	r0, r5
 8017426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801742a:	f000 b9eb 	b.w	8017804 <_free_r>
	...

08017430 <_reclaim_reent>:
 8017430:	4b2c      	ldr	r3, [pc, #176]	; (80174e4 <_reclaim_reent+0xb4>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	4283      	cmp	r3, r0
 8017436:	b570      	push	{r4, r5, r6, lr}
 8017438:	4604      	mov	r4, r0
 801743a:	d051      	beq.n	80174e0 <_reclaim_reent+0xb0>
 801743c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801743e:	b143      	cbz	r3, 8017452 <_reclaim_reent+0x22>
 8017440:	68db      	ldr	r3, [r3, #12]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d14a      	bne.n	80174dc <_reclaim_reent+0xac>
 8017446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017448:	6819      	ldr	r1, [r3, #0]
 801744a:	b111      	cbz	r1, 8017452 <_reclaim_reent+0x22>
 801744c:	4620      	mov	r0, r4
 801744e:	f000 f9d9 	bl	8017804 <_free_r>
 8017452:	6961      	ldr	r1, [r4, #20]
 8017454:	b111      	cbz	r1, 801745c <_reclaim_reent+0x2c>
 8017456:	4620      	mov	r0, r4
 8017458:	f000 f9d4 	bl	8017804 <_free_r>
 801745c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801745e:	b111      	cbz	r1, 8017466 <_reclaim_reent+0x36>
 8017460:	4620      	mov	r0, r4
 8017462:	f000 f9cf 	bl	8017804 <_free_r>
 8017466:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017468:	b111      	cbz	r1, 8017470 <_reclaim_reent+0x40>
 801746a:	4620      	mov	r0, r4
 801746c:	f000 f9ca 	bl	8017804 <_free_r>
 8017470:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017472:	b111      	cbz	r1, 801747a <_reclaim_reent+0x4a>
 8017474:	4620      	mov	r0, r4
 8017476:	f000 f9c5 	bl	8017804 <_free_r>
 801747a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801747c:	b111      	cbz	r1, 8017484 <_reclaim_reent+0x54>
 801747e:	4620      	mov	r0, r4
 8017480:	f000 f9c0 	bl	8017804 <_free_r>
 8017484:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017486:	b111      	cbz	r1, 801748e <_reclaim_reent+0x5e>
 8017488:	4620      	mov	r0, r4
 801748a:	f000 f9bb 	bl	8017804 <_free_r>
 801748e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017490:	b111      	cbz	r1, 8017498 <_reclaim_reent+0x68>
 8017492:	4620      	mov	r0, r4
 8017494:	f000 f9b6 	bl	8017804 <_free_r>
 8017498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801749a:	b111      	cbz	r1, 80174a2 <_reclaim_reent+0x72>
 801749c:	4620      	mov	r0, r4
 801749e:	f000 f9b1 	bl	8017804 <_free_r>
 80174a2:	69a3      	ldr	r3, [r4, #24]
 80174a4:	b1e3      	cbz	r3, 80174e0 <_reclaim_reent+0xb0>
 80174a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80174a8:	4620      	mov	r0, r4
 80174aa:	4798      	blx	r3
 80174ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80174ae:	b1b9      	cbz	r1, 80174e0 <_reclaim_reent+0xb0>
 80174b0:	4620      	mov	r0, r4
 80174b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174b6:	f7ff bfad 	b.w	8017414 <cleanup_glue>
 80174ba:	5949      	ldr	r1, [r1, r5]
 80174bc:	b941      	cbnz	r1, 80174d0 <_reclaim_reent+0xa0>
 80174be:	3504      	adds	r5, #4
 80174c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174c2:	2d80      	cmp	r5, #128	; 0x80
 80174c4:	68d9      	ldr	r1, [r3, #12]
 80174c6:	d1f8      	bne.n	80174ba <_reclaim_reent+0x8a>
 80174c8:	4620      	mov	r0, r4
 80174ca:	f000 f99b 	bl	8017804 <_free_r>
 80174ce:	e7ba      	b.n	8017446 <_reclaim_reent+0x16>
 80174d0:	680e      	ldr	r6, [r1, #0]
 80174d2:	4620      	mov	r0, r4
 80174d4:	f000 f996 	bl	8017804 <_free_r>
 80174d8:	4631      	mov	r1, r6
 80174da:	e7ef      	b.n	80174bc <_reclaim_reent+0x8c>
 80174dc:	2500      	movs	r5, #0
 80174de:	e7ef      	b.n	80174c0 <_reclaim_reent+0x90>
 80174e0:	bd70      	pop	{r4, r5, r6, pc}
 80174e2:	bf00      	nop
 80174e4:	20000020 	.word	0x20000020

080174e8 <_sbrk_r>:
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4d06      	ldr	r5, [pc, #24]	; (8017504 <_sbrk_r+0x1c>)
 80174ec:	2300      	movs	r3, #0
 80174ee:	4604      	mov	r4, r0
 80174f0:	4608      	mov	r0, r1
 80174f2:	602b      	str	r3, [r5, #0]
 80174f4:	f7e9 ff46 	bl	8001384 <_sbrk>
 80174f8:	1c43      	adds	r3, r0, #1
 80174fa:	d102      	bne.n	8017502 <_sbrk_r+0x1a>
 80174fc:	682b      	ldr	r3, [r5, #0]
 80174fe:	b103      	cbz	r3, 8017502 <_sbrk_r+0x1a>
 8017500:	6023      	str	r3, [r4, #0]
 8017502:	bd38      	pop	{r3, r4, r5, pc}
 8017504:	2000bbdc 	.word	0x2000bbdc

08017508 <__sread>:
 8017508:	b510      	push	{r4, lr}
 801750a:	460c      	mov	r4, r1
 801750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017510:	f000 fcb6 	bl	8017e80 <_read_r>
 8017514:	2800      	cmp	r0, #0
 8017516:	bfab      	itete	ge
 8017518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801751a:	89a3      	ldrhlt	r3, [r4, #12]
 801751c:	181b      	addge	r3, r3, r0
 801751e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017522:	bfac      	ite	ge
 8017524:	6563      	strge	r3, [r4, #84]	; 0x54
 8017526:	81a3      	strhlt	r3, [r4, #12]
 8017528:	bd10      	pop	{r4, pc}

0801752a <__swrite>:
 801752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801752e:	461f      	mov	r7, r3
 8017530:	898b      	ldrh	r3, [r1, #12]
 8017532:	05db      	lsls	r3, r3, #23
 8017534:	4605      	mov	r5, r0
 8017536:	460c      	mov	r4, r1
 8017538:	4616      	mov	r6, r2
 801753a:	d505      	bpl.n	8017548 <__swrite+0x1e>
 801753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017540:	2302      	movs	r3, #2
 8017542:	2200      	movs	r2, #0
 8017544:	f000 f938 	bl	80177b8 <_lseek_r>
 8017548:	89a3      	ldrh	r3, [r4, #12]
 801754a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801754e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017552:	81a3      	strh	r3, [r4, #12]
 8017554:	4632      	mov	r2, r6
 8017556:	463b      	mov	r3, r7
 8017558:	4628      	mov	r0, r5
 801755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801755e:	f000 b817 	b.w	8017590 <_write_r>

08017562 <__sseek>:
 8017562:	b510      	push	{r4, lr}
 8017564:	460c      	mov	r4, r1
 8017566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801756a:	f000 f925 	bl	80177b8 <_lseek_r>
 801756e:	1c43      	adds	r3, r0, #1
 8017570:	89a3      	ldrh	r3, [r4, #12]
 8017572:	bf15      	itete	ne
 8017574:	6560      	strne	r0, [r4, #84]	; 0x54
 8017576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801757a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801757e:	81a3      	strheq	r3, [r4, #12]
 8017580:	bf18      	it	ne
 8017582:	81a3      	strhne	r3, [r4, #12]
 8017584:	bd10      	pop	{r4, pc}

08017586 <__sclose>:
 8017586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801758a:	f000 b831 	b.w	80175f0 <_close_r>
	...

08017590 <_write_r>:
 8017590:	b538      	push	{r3, r4, r5, lr}
 8017592:	4d07      	ldr	r5, [pc, #28]	; (80175b0 <_write_r+0x20>)
 8017594:	4604      	mov	r4, r0
 8017596:	4608      	mov	r0, r1
 8017598:	4611      	mov	r1, r2
 801759a:	2200      	movs	r2, #0
 801759c:	602a      	str	r2, [r5, #0]
 801759e:	461a      	mov	r2, r3
 80175a0:	f7e9 fe9f 	bl	80012e2 <_write>
 80175a4:	1c43      	adds	r3, r0, #1
 80175a6:	d102      	bne.n	80175ae <_write_r+0x1e>
 80175a8:	682b      	ldr	r3, [r5, #0]
 80175aa:	b103      	cbz	r3, 80175ae <_write_r+0x1e>
 80175ac:	6023      	str	r3, [r4, #0]
 80175ae:	bd38      	pop	{r3, r4, r5, pc}
 80175b0:	2000bbdc 	.word	0x2000bbdc

080175b4 <__assert_func>:
 80175b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80175b6:	4614      	mov	r4, r2
 80175b8:	461a      	mov	r2, r3
 80175ba:	4b09      	ldr	r3, [pc, #36]	; (80175e0 <__assert_func+0x2c>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	4605      	mov	r5, r0
 80175c0:	68d8      	ldr	r0, [r3, #12]
 80175c2:	b14c      	cbz	r4, 80175d8 <__assert_func+0x24>
 80175c4:	4b07      	ldr	r3, [pc, #28]	; (80175e4 <__assert_func+0x30>)
 80175c6:	9100      	str	r1, [sp, #0]
 80175c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80175cc:	4906      	ldr	r1, [pc, #24]	; (80175e8 <__assert_func+0x34>)
 80175ce:	462b      	mov	r3, r5
 80175d0:	f000 f8e0 	bl	8017794 <fiprintf>
 80175d4:	f000 fd26 	bl	8018024 <abort>
 80175d8:	4b04      	ldr	r3, [pc, #16]	; (80175ec <__assert_func+0x38>)
 80175da:	461c      	mov	r4, r3
 80175dc:	e7f3      	b.n	80175c6 <__assert_func+0x12>
 80175de:	bf00      	nop
 80175e0:	20000020 	.word	0x20000020
 80175e4:	0801b466 	.word	0x0801b466
 80175e8:	0801b473 	.word	0x0801b473
 80175ec:	0801b4a1 	.word	0x0801b4a1

080175f0 <_close_r>:
 80175f0:	b538      	push	{r3, r4, r5, lr}
 80175f2:	4d06      	ldr	r5, [pc, #24]	; (801760c <_close_r+0x1c>)
 80175f4:	2300      	movs	r3, #0
 80175f6:	4604      	mov	r4, r0
 80175f8:	4608      	mov	r0, r1
 80175fa:	602b      	str	r3, [r5, #0]
 80175fc:	f7e9 fe8d 	bl	800131a <_close>
 8017600:	1c43      	adds	r3, r0, #1
 8017602:	d102      	bne.n	801760a <_close_r+0x1a>
 8017604:	682b      	ldr	r3, [r5, #0]
 8017606:	b103      	cbz	r3, 801760a <_close_r+0x1a>
 8017608:	6023      	str	r3, [r4, #0]
 801760a:	bd38      	pop	{r3, r4, r5, pc}
 801760c:	2000bbdc 	.word	0x2000bbdc

08017610 <__sflush_r>:
 8017610:	898a      	ldrh	r2, [r1, #12]
 8017612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017616:	4605      	mov	r5, r0
 8017618:	0710      	lsls	r0, r2, #28
 801761a:	460c      	mov	r4, r1
 801761c:	d458      	bmi.n	80176d0 <__sflush_r+0xc0>
 801761e:	684b      	ldr	r3, [r1, #4]
 8017620:	2b00      	cmp	r3, #0
 8017622:	dc05      	bgt.n	8017630 <__sflush_r+0x20>
 8017624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017626:	2b00      	cmp	r3, #0
 8017628:	dc02      	bgt.n	8017630 <__sflush_r+0x20>
 801762a:	2000      	movs	r0, #0
 801762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017632:	2e00      	cmp	r6, #0
 8017634:	d0f9      	beq.n	801762a <__sflush_r+0x1a>
 8017636:	2300      	movs	r3, #0
 8017638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801763c:	682f      	ldr	r7, [r5, #0]
 801763e:	602b      	str	r3, [r5, #0]
 8017640:	d032      	beq.n	80176a8 <__sflush_r+0x98>
 8017642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017644:	89a3      	ldrh	r3, [r4, #12]
 8017646:	075a      	lsls	r2, r3, #29
 8017648:	d505      	bpl.n	8017656 <__sflush_r+0x46>
 801764a:	6863      	ldr	r3, [r4, #4]
 801764c:	1ac0      	subs	r0, r0, r3
 801764e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017650:	b10b      	cbz	r3, 8017656 <__sflush_r+0x46>
 8017652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017654:	1ac0      	subs	r0, r0, r3
 8017656:	2300      	movs	r3, #0
 8017658:	4602      	mov	r2, r0
 801765a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801765c:	6a21      	ldr	r1, [r4, #32]
 801765e:	4628      	mov	r0, r5
 8017660:	47b0      	blx	r6
 8017662:	1c43      	adds	r3, r0, #1
 8017664:	89a3      	ldrh	r3, [r4, #12]
 8017666:	d106      	bne.n	8017676 <__sflush_r+0x66>
 8017668:	6829      	ldr	r1, [r5, #0]
 801766a:	291d      	cmp	r1, #29
 801766c:	d82c      	bhi.n	80176c8 <__sflush_r+0xb8>
 801766e:	4a2a      	ldr	r2, [pc, #168]	; (8017718 <__sflush_r+0x108>)
 8017670:	40ca      	lsrs	r2, r1
 8017672:	07d6      	lsls	r6, r2, #31
 8017674:	d528      	bpl.n	80176c8 <__sflush_r+0xb8>
 8017676:	2200      	movs	r2, #0
 8017678:	6062      	str	r2, [r4, #4]
 801767a:	04d9      	lsls	r1, r3, #19
 801767c:	6922      	ldr	r2, [r4, #16]
 801767e:	6022      	str	r2, [r4, #0]
 8017680:	d504      	bpl.n	801768c <__sflush_r+0x7c>
 8017682:	1c42      	adds	r2, r0, #1
 8017684:	d101      	bne.n	801768a <__sflush_r+0x7a>
 8017686:	682b      	ldr	r3, [r5, #0]
 8017688:	b903      	cbnz	r3, 801768c <__sflush_r+0x7c>
 801768a:	6560      	str	r0, [r4, #84]	; 0x54
 801768c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801768e:	602f      	str	r7, [r5, #0]
 8017690:	2900      	cmp	r1, #0
 8017692:	d0ca      	beq.n	801762a <__sflush_r+0x1a>
 8017694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017698:	4299      	cmp	r1, r3
 801769a:	d002      	beq.n	80176a2 <__sflush_r+0x92>
 801769c:	4628      	mov	r0, r5
 801769e:	f000 f8b1 	bl	8017804 <_free_r>
 80176a2:	2000      	movs	r0, #0
 80176a4:	6360      	str	r0, [r4, #52]	; 0x34
 80176a6:	e7c1      	b.n	801762c <__sflush_r+0x1c>
 80176a8:	6a21      	ldr	r1, [r4, #32]
 80176aa:	2301      	movs	r3, #1
 80176ac:	4628      	mov	r0, r5
 80176ae:	47b0      	blx	r6
 80176b0:	1c41      	adds	r1, r0, #1
 80176b2:	d1c7      	bne.n	8017644 <__sflush_r+0x34>
 80176b4:	682b      	ldr	r3, [r5, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d0c4      	beq.n	8017644 <__sflush_r+0x34>
 80176ba:	2b1d      	cmp	r3, #29
 80176bc:	d001      	beq.n	80176c2 <__sflush_r+0xb2>
 80176be:	2b16      	cmp	r3, #22
 80176c0:	d101      	bne.n	80176c6 <__sflush_r+0xb6>
 80176c2:	602f      	str	r7, [r5, #0]
 80176c4:	e7b1      	b.n	801762a <__sflush_r+0x1a>
 80176c6:	89a3      	ldrh	r3, [r4, #12]
 80176c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176cc:	81a3      	strh	r3, [r4, #12]
 80176ce:	e7ad      	b.n	801762c <__sflush_r+0x1c>
 80176d0:	690f      	ldr	r7, [r1, #16]
 80176d2:	2f00      	cmp	r7, #0
 80176d4:	d0a9      	beq.n	801762a <__sflush_r+0x1a>
 80176d6:	0793      	lsls	r3, r2, #30
 80176d8:	680e      	ldr	r6, [r1, #0]
 80176da:	bf08      	it	eq
 80176dc:	694b      	ldreq	r3, [r1, #20]
 80176de:	600f      	str	r7, [r1, #0]
 80176e0:	bf18      	it	ne
 80176e2:	2300      	movne	r3, #0
 80176e4:	eba6 0807 	sub.w	r8, r6, r7
 80176e8:	608b      	str	r3, [r1, #8]
 80176ea:	f1b8 0f00 	cmp.w	r8, #0
 80176ee:	dd9c      	ble.n	801762a <__sflush_r+0x1a>
 80176f0:	6a21      	ldr	r1, [r4, #32]
 80176f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80176f4:	4643      	mov	r3, r8
 80176f6:	463a      	mov	r2, r7
 80176f8:	4628      	mov	r0, r5
 80176fa:	47b0      	blx	r6
 80176fc:	2800      	cmp	r0, #0
 80176fe:	dc06      	bgt.n	801770e <__sflush_r+0xfe>
 8017700:	89a3      	ldrh	r3, [r4, #12]
 8017702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017706:	81a3      	strh	r3, [r4, #12]
 8017708:	f04f 30ff 	mov.w	r0, #4294967295
 801770c:	e78e      	b.n	801762c <__sflush_r+0x1c>
 801770e:	4407      	add	r7, r0
 8017710:	eba8 0800 	sub.w	r8, r8, r0
 8017714:	e7e9      	b.n	80176ea <__sflush_r+0xda>
 8017716:	bf00      	nop
 8017718:	20400001 	.word	0x20400001

0801771c <_fflush_r>:
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	690b      	ldr	r3, [r1, #16]
 8017720:	4605      	mov	r5, r0
 8017722:	460c      	mov	r4, r1
 8017724:	b913      	cbnz	r3, 801772c <_fflush_r+0x10>
 8017726:	2500      	movs	r5, #0
 8017728:	4628      	mov	r0, r5
 801772a:	bd38      	pop	{r3, r4, r5, pc}
 801772c:	b118      	cbz	r0, 8017736 <_fflush_r+0x1a>
 801772e:	6983      	ldr	r3, [r0, #24]
 8017730:	b90b      	cbnz	r3, 8017736 <_fflush_r+0x1a>
 8017732:	f7ff fcd3 	bl	80170dc <__sinit>
 8017736:	4b14      	ldr	r3, [pc, #80]	; (8017788 <_fflush_r+0x6c>)
 8017738:	429c      	cmp	r4, r3
 801773a:	d11b      	bne.n	8017774 <_fflush_r+0x58>
 801773c:	686c      	ldr	r4, [r5, #4]
 801773e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d0ef      	beq.n	8017726 <_fflush_r+0xa>
 8017746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017748:	07d0      	lsls	r0, r2, #31
 801774a:	d404      	bmi.n	8017756 <_fflush_r+0x3a>
 801774c:	0599      	lsls	r1, r3, #22
 801774e:	d402      	bmi.n	8017756 <_fflush_r+0x3a>
 8017750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017752:	f7ff fd86 	bl	8017262 <__retarget_lock_acquire_recursive>
 8017756:	4628      	mov	r0, r5
 8017758:	4621      	mov	r1, r4
 801775a:	f7ff ff59 	bl	8017610 <__sflush_r>
 801775e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017760:	07da      	lsls	r2, r3, #31
 8017762:	4605      	mov	r5, r0
 8017764:	d4e0      	bmi.n	8017728 <_fflush_r+0xc>
 8017766:	89a3      	ldrh	r3, [r4, #12]
 8017768:	059b      	lsls	r3, r3, #22
 801776a:	d4dd      	bmi.n	8017728 <_fflush_r+0xc>
 801776c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801776e:	f7ff fd79 	bl	8017264 <__retarget_lock_release_recursive>
 8017772:	e7d9      	b.n	8017728 <_fflush_r+0xc>
 8017774:	4b05      	ldr	r3, [pc, #20]	; (801778c <_fflush_r+0x70>)
 8017776:	429c      	cmp	r4, r3
 8017778:	d101      	bne.n	801777e <_fflush_r+0x62>
 801777a:	68ac      	ldr	r4, [r5, #8]
 801777c:	e7df      	b.n	801773e <_fflush_r+0x22>
 801777e:	4b04      	ldr	r3, [pc, #16]	; (8017790 <_fflush_r+0x74>)
 8017780:	429c      	cmp	r4, r3
 8017782:	bf08      	it	eq
 8017784:	68ec      	ldreq	r4, [r5, #12]
 8017786:	e7da      	b.n	801773e <_fflush_r+0x22>
 8017788:	0801b3ac 	.word	0x0801b3ac
 801778c:	0801b3cc 	.word	0x0801b3cc
 8017790:	0801b38c 	.word	0x0801b38c

08017794 <fiprintf>:
 8017794:	b40e      	push	{r1, r2, r3}
 8017796:	b503      	push	{r0, r1, lr}
 8017798:	4601      	mov	r1, r0
 801779a:	ab03      	add	r3, sp, #12
 801779c:	4805      	ldr	r0, [pc, #20]	; (80177b4 <fiprintf+0x20>)
 801779e:	f853 2b04 	ldr.w	r2, [r3], #4
 80177a2:	6800      	ldr	r0, [r0, #0]
 80177a4:	9301      	str	r3, [sp, #4]
 80177a6:	f000 f8a7 	bl	80178f8 <_vfiprintf_r>
 80177aa:	b002      	add	sp, #8
 80177ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80177b0:	b003      	add	sp, #12
 80177b2:	4770      	bx	lr
 80177b4:	20000020 	.word	0x20000020

080177b8 <_lseek_r>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4d07      	ldr	r5, [pc, #28]	; (80177d8 <_lseek_r+0x20>)
 80177bc:	4604      	mov	r4, r0
 80177be:	4608      	mov	r0, r1
 80177c0:	4611      	mov	r1, r2
 80177c2:	2200      	movs	r2, #0
 80177c4:	602a      	str	r2, [r5, #0]
 80177c6:	461a      	mov	r2, r3
 80177c8:	f7e9 fdce 	bl	8001368 <_lseek>
 80177cc:	1c43      	adds	r3, r0, #1
 80177ce:	d102      	bne.n	80177d6 <_lseek_r+0x1e>
 80177d0:	682b      	ldr	r3, [r5, #0]
 80177d2:	b103      	cbz	r3, 80177d6 <_lseek_r+0x1e>
 80177d4:	6023      	str	r3, [r4, #0]
 80177d6:	bd38      	pop	{r3, r4, r5, pc}
 80177d8:	2000bbdc 	.word	0x2000bbdc

080177dc <malloc>:
 80177dc:	4b02      	ldr	r3, [pc, #8]	; (80177e8 <malloc+0xc>)
 80177de:	4601      	mov	r1, r0
 80177e0:	6818      	ldr	r0, [r3, #0]
 80177e2:	f7ff bd65 	b.w	80172b0 <_malloc_r>
 80177e6:	bf00      	nop
 80177e8:	20000020 	.word	0x20000020

080177ec <__malloc_lock>:
 80177ec:	4801      	ldr	r0, [pc, #4]	; (80177f4 <__malloc_lock+0x8>)
 80177ee:	f7ff bd38 	b.w	8017262 <__retarget_lock_acquire_recursive>
 80177f2:	bf00      	nop
 80177f4:	2000bbe8 	.word	0x2000bbe8

080177f8 <__malloc_unlock>:
 80177f8:	4801      	ldr	r0, [pc, #4]	; (8017800 <__malloc_unlock+0x8>)
 80177fa:	f7ff bd33 	b.w	8017264 <__retarget_lock_release_recursive>
 80177fe:	bf00      	nop
 8017800:	2000bbe8 	.word	0x2000bbe8

08017804 <_free_r>:
 8017804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017806:	2900      	cmp	r1, #0
 8017808:	d048      	beq.n	801789c <_free_r+0x98>
 801780a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801780e:	9001      	str	r0, [sp, #4]
 8017810:	2b00      	cmp	r3, #0
 8017812:	f1a1 0404 	sub.w	r4, r1, #4
 8017816:	bfb8      	it	lt
 8017818:	18e4      	addlt	r4, r4, r3
 801781a:	f7ff ffe7 	bl	80177ec <__malloc_lock>
 801781e:	4a20      	ldr	r2, [pc, #128]	; (80178a0 <_free_r+0x9c>)
 8017820:	9801      	ldr	r0, [sp, #4]
 8017822:	6813      	ldr	r3, [r2, #0]
 8017824:	4615      	mov	r5, r2
 8017826:	b933      	cbnz	r3, 8017836 <_free_r+0x32>
 8017828:	6063      	str	r3, [r4, #4]
 801782a:	6014      	str	r4, [r2, #0]
 801782c:	b003      	add	sp, #12
 801782e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017832:	f7ff bfe1 	b.w	80177f8 <__malloc_unlock>
 8017836:	42a3      	cmp	r3, r4
 8017838:	d90b      	bls.n	8017852 <_free_r+0x4e>
 801783a:	6821      	ldr	r1, [r4, #0]
 801783c:	1862      	adds	r2, r4, r1
 801783e:	4293      	cmp	r3, r2
 8017840:	bf04      	itt	eq
 8017842:	681a      	ldreq	r2, [r3, #0]
 8017844:	685b      	ldreq	r3, [r3, #4]
 8017846:	6063      	str	r3, [r4, #4]
 8017848:	bf04      	itt	eq
 801784a:	1852      	addeq	r2, r2, r1
 801784c:	6022      	streq	r2, [r4, #0]
 801784e:	602c      	str	r4, [r5, #0]
 8017850:	e7ec      	b.n	801782c <_free_r+0x28>
 8017852:	461a      	mov	r2, r3
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	b10b      	cbz	r3, 801785c <_free_r+0x58>
 8017858:	42a3      	cmp	r3, r4
 801785a:	d9fa      	bls.n	8017852 <_free_r+0x4e>
 801785c:	6811      	ldr	r1, [r2, #0]
 801785e:	1855      	adds	r5, r2, r1
 8017860:	42a5      	cmp	r5, r4
 8017862:	d10b      	bne.n	801787c <_free_r+0x78>
 8017864:	6824      	ldr	r4, [r4, #0]
 8017866:	4421      	add	r1, r4
 8017868:	1854      	adds	r4, r2, r1
 801786a:	42a3      	cmp	r3, r4
 801786c:	6011      	str	r1, [r2, #0]
 801786e:	d1dd      	bne.n	801782c <_free_r+0x28>
 8017870:	681c      	ldr	r4, [r3, #0]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	6053      	str	r3, [r2, #4]
 8017876:	4421      	add	r1, r4
 8017878:	6011      	str	r1, [r2, #0]
 801787a:	e7d7      	b.n	801782c <_free_r+0x28>
 801787c:	d902      	bls.n	8017884 <_free_r+0x80>
 801787e:	230c      	movs	r3, #12
 8017880:	6003      	str	r3, [r0, #0]
 8017882:	e7d3      	b.n	801782c <_free_r+0x28>
 8017884:	6825      	ldr	r5, [r4, #0]
 8017886:	1961      	adds	r1, r4, r5
 8017888:	428b      	cmp	r3, r1
 801788a:	bf04      	itt	eq
 801788c:	6819      	ldreq	r1, [r3, #0]
 801788e:	685b      	ldreq	r3, [r3, #4]
 8017890:	6063      	str	r3, [r4, #4]
 8017892:	bf04      	itt	eq
 8017894:	1949      	addeq	r1, r1, r5
 8017896:	6021      	streq	r1, [r4, #0]
 8017898:	6054      	str	r4, [r2, #4]
 801789a:	e7c7      	b.n	801782c <_free_r+0x28>
 801789c:	b003      	add	sp, #12
 801789e:	bd30      	pop	{r4, r5, pc}
 80178a0:	20004c18 	.word	0x20004c18

080178a4 <__sfputc_r>:
 80178a4:	6893      	ldr	r3, [r2, #8]
 80178a6:	3b01      	subs	r3, #1
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	b410      	push	{r4}
 80178ac:	6093      	str	r3, [r2, #8]
 80178ae:	da08      	bge.n	80178c2 <__sfputc_r+0x1e>
 80178b0:	6994      	ldr	r4, [r2, #24]
 80178b2:	42a3      	cmp	r3, r4
 80178b4:	db01      	blt.n	80178ba <__sfputc_r+0x16>
 80178b6:	290a      	cmp	r1, #10
 80178b8:	d103      	bne.n	80178c2 <__sfputc_r+0x1e>
 80178ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178be:	f000 baf1 	b.w	8017ea4 <__swbuf_r>
 80178c2:	6813      	ldr	r3, [r2, #0]
 80178c4:	1c58      	adds	r0, r3, #1
 80178c6:	6010      	str	r0, [r2, #0]
 80178c8:	7019      	strb	r1, [r3, #0]
 80178ca:	4608      	mov	r0, r1
 80178cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178d0:	4770      	bx	lr

080178d2 <__sfputs_r>:
 80178d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d4:	4606      	mov	r6, r0
 80178d6:	460f      	mov	r7, r1
 80178d8:	4614      	mov	r4, r2
 80178da:	18d5      	adds	r5, r2, r3
 80178dc:	42ac      	cmp	r4, r5
 80178de:	d101      	bne.n	80178e4 <__sfputs_r+0x12>
 80178e0:	2000      	movs	r0, #0
 80178e2:	e007      	b.n	80178f4 <__sfputs_r+0x22>
 80178e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178e8:	463a      	mov	r2, r7
 80178ea:	4630      	mov	r0, r6
 80178ec:	f7ff ffda 	bl	80178a4 <__sfputc_r>
 80178f0:	1c43      	adds	r3, r0, #1
 80178f2:	d1f3      	bne.n	80178dc <__sfputs_r+0xa>
 80178f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178f8 <_vfiprintf_r>:
 80178f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178fc:	460d      	mov	r5, r1
 80178fe:	b09d      	sub	sp, #116	; 0x74
 8017900:	4614      	mov	r4, r2
 8017902:	4698      	mov	r8, r3
 8017904:	4606      	mov	r6, r0
 8017906:	b118      	cbz	r0, 8017910 <_vfiprintf_r+0x18>
 8017908:	6983      	ldr	r3, [r0, #24]
 801790a:	b90b      	cbnz	r3, 8017910 <_vfiprintf_r+0x18>
 801790c:	f7ff fbe6 	bl	80170dc <__sinit>
 8017910:	4b89      	ldr	r3, [pc, #548]	; (8017b38 <_vfiprintf_r+0x240>)
 8017912:	429d      	cmp	r5, r3
 8017914:	d11b      	bne.n	801794e <_vfiprintf_r+0x56>
 8017916:	6875      	ldr	r5, [r6, #4]
 8017918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801791a:	07d9      	lsls	r1, r3, #31
 801791c:	d405      	bmi.n	801792a <_vfiprintf_r+0x32>
 801791e:	89ab      	ldrh	r3, [r5, #12]
 8017920:	059a      	lsls	r2, r3, #22
 8017922:	d402      	bmi.n	801792a <_vfiprintf_r+0x32>
 8017924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017926:	f7ff fc9c 	bl	8017262 <__retarget_lock_acquire_recursive>
 801792a:	89ab      	ldrh	r3, [r5, #12]
 801792c:	071b      	lsls	r3, r3, #28
 801792e:	d501      	bpl.n	8017934 <_vfiprintf_r+0x3c>
 8017930:	692b      	ldr	r3, [r5, #16]
 8017932:	b9eb      	cbnz	r3, 8017970 <_vfiprintf_r+0x78>
 8017934:	4629      	mov	r1, r5
 8017936:	4630      	mov	r0, r6
 8017938:	f000 fb06 	bl	8017f48 <__swsetup_r>
 801793c:	b1c0      	cbz	r0, 8017970 <_vfiprintf_r+0x78>
 801793e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017940:	07dc      	lsls	r4, r3, #31
 8017942:	d50e      	bpl.n	8017962 <_vfiprintf_r+0x6a>
 8017944:	f04f 30ff 	mov.w	r0, #4294967295
 8017948:	b01d      	add	sp, #116	; 0x74
 801794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801794e:	4b7b      	ldr	r3, [pc, #492]	; (8017b3c <_vfiprintf_r+0x244>)
 8017950:	429d      	cmp	r5, r3
 8017952:	d101      	bne.n	8017958 <_vfiprintf_r+0x60>
 8017954:	68b5      	ldr	r5, [r6, #8]
 8017956:	e7df      	b.n	8017918 <_vfiprintf_r+0x20>
 8017958:	4b79      	ldr	r3, [pc, #484]	; (8017b40 <_vfiprintf_r+0x248>)
 801795a:	429d      	cmp	r5, r3
 801795c:	bf08      	it	eq
 801795e:	68f5      	ldreq	r5, [r6, #12]
 8017960:	e7da      	b.n	8017918 <_vfiprintf_r+0x20>
 8017962:	89ab      	ldrh	r3, [r5, #12]
 8017964:	0598      	lsls	r0, r3, #22
 8017966:	d4ed      	bmi.n	8017944 <_vfiprintf_r+0x4c>
 8017968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801796a:	f7ff fc7b 	bl	8017264 <__retarget_lock_release_recursive>
 801796e:	e7e9      	b.n	8017944 <_vfiprintf_r+0x4c>
 8017970:	2300      	movs	r3, #0
 8017972:	9309      	str	r3, [sp, #36]	; 0x24
 8017974:	2320      	movs	r3, #32
 8017976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801797a:	f8cd 800c 	str.w	r8, [sp, #12]
 801797e:	2330      	movs	r3, #48	; 0x30
 8017980:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017b44 <_vfiprintf_r+0x24c>
 8017984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017988:	f04f 0901 	mov.w	r9, #1
 801798c:	4623      	mov	r3, r4
 801798e:	469a      	mov	sl, r3
 8017990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017994:	b10a      	cbz	r2, 801799a <_vfiprintf_r+0xa2>
 8017996:	2a25      	cmp	r2, #37	; 0x25
 8017998:	d1f9      	bne.n	801798e <_vfiprintf_r+0x96>
 801799a:	ebba 0b04 	subs.w	fp, sl, r4
 801799e:	d00b      	beq.n	80179b8 <_vfiprintf_r+0xc0>
 80179a0:	465b      	mov	r3, fp
 80179a2:	4622      	mov	r2, r4
 80179a4:	4629      	mov	r1, r5
 80179a6:	4630      	mov	r0, r6
 80179a8:	f7ff ff93 	bl	80178d2 <__sfputs_r>
 80179ac:	3001      	adds	r0, #1
 80179ae:	f000 80aa 	beq.w	8017b06 <_vfiprintf_r+0x20e>
 80179b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179b4:	445a      	add	r2, fp
 80179b6:	9209      	str	r2, [sp, #36]	; 0x24
 80179b8:	f89a 3000 	ldrb.w	r3, [sl]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	f000 80a2 	beq.w	8017b06 <_vfiprintf_r+0x20e>
 80179c2:	2300      	movs	r3, #0
 80179c4:	f04f 32ff 	mov.w	r2, #4294967295
 80179c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179cc:	f10a 0a01 	add.w	sl, sl, #1
 80179d0:	9304      	str	r3, [sp, #16]
 80179d2:	9307      	str	r3, [sp, #28]
 80179d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179d8:	931a      	str	r3, [sp, #104]	; 0x68
 80179da:	4654      	mov	r4, sl
 80179dc:	2205      	movs	r2, #5
 80179de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179e2:	4858      	ldr	r0, [pc, #352]	; (8017b44 <_vfiprintf_r+0x24c>)
 80179e4:	f7e8 fbf4 	bl	80001d0 <memchr>
 80179e8:	9a04      	ldr	r2, [sp, #16]
 80179ea:	b9d8      	cbnz	r0, 8017a24 <_vfiprintf_r+0x12c>
 80179ec:	06d1      	lsls	r1, r2, #27
 80179ee:	bf44      	itt	mi
 80179f0:	2320      	movmi	r3, #32
 80179f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179f6:	0713      	lsls	r3, r2, #28
 80179f8:	bf44      	itt	mi
 80179fa:	232b      	movmi	r3, #43	; 0x2b
 80179fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a00:	f89a 3000 	ldrb.w	r3, [sl]
 8017a04:	2b2a      	cmp	r3, #42	; 0x2a
 8017a06:	d015      	beq.n	8017a34 <_vfiprintf_r+0x13c>
 8017a08:	9a07      	ldr	r2, [sp, #28]
 8017a0a:	4654      	mov	r4, sl
 8017a0c:	2000      	movs	r0, #0
 8017a0e:	f04f 0c0a 	mov.w	ip, #10
 8017a12:	4621      	mov	r1, r4
 8017a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a18:	3b30      	subs	r3, #48	; 0x30
 8017a1a:	2b09      	cmp	r3, #9
 8017a1c:	d94e      	bls.n	8017abc <_vfiprintf_r+0x1c4>
 8017a1e:	b1b0      	cbz	r0, 8017a4e <_vfiprintf_r+0x156>
 8017a20:	9207      	str	r2, [sp, #28]
 8017a22:	e014      	b.n	8017a4e <_vfiprintf_r+0x156>
 8017a24:	eba0 0308 	sub.w	r3, r0, r8
 8017a28:	fa09 f303 	lsl.w	r3, r9, r3
 8017a2c:	4313      	orrs	r3, r2
 8017a2e:	9304      	str	r3, [sp, #16]
 8017a30:	46a2      	mov	sl, r4
 8017a32:	e7d2      	b.n	80179da <_vfiprintf_r+0xe2>
 8017a34:	9b03      	ldr	r3, [sp, #12]
 8017a36:	1d19      	adds	r1, r3, #4
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	9103      	str	r1, [sp, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	bfbb      	ittet	lt
 8017a40:	425b      	neglt	r3, r3
 8017a42:	f042 0202 	orrlt.w	r2, r2, #2
 8017a46:	9307      	strge	r3, [sp, #28]
 8017a48:	9307      	strlt	r3, [sp, #28]
 8017a4a:	bfb8      	it	lt
 8017a4c:	9204      	strlt	r2, [sp, #16]
 8017a4e:	7823      	ldrb	r3, [r4, #0]
 8017a50:	2b2e      	cmp	r3, #46	; 0x2e
 8017a52:	d10c      	bne.n	8017a6e <_vfiprintf_r+0x176>
 8017a54:	7863      	ldrb	r3, [r4, #1]
 8017a56:	2b2a      	cmp	r3, #42	; 0x2a
 8017a58:	d135      	bne.n	8017ac6 <_vfiprintf_r+0x1ce>
 8017a5a:	9b03      	ldr	r3, [sp, #12]
 8017a5c:	1d1a      	adds	r2, r3, #4
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	9203      	str	r2, [sp, #12]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	bfb8      	it	lt
 8017a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a6a:	3402      	adds	r4, #2
 8017a6c:	9305      	str	r3, [sp, #20]
 8017a6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017b54 <_vfiprintf_r+0x25c>
 8017a72:	7821      	ldrb	r1, [r4, #0]
 8017a74:	2203      	movs	r2, #3
 8017a76:	4650      	mov	r0, sl
 8017a78:	f7e8 fbaa 	bl	80001d0 <memchr>
 8017a7c:	b140      	cbz	r0, 8017a90 <_vfiprintf_r+0x198>
 8017a7e:	2340      	movs	r3, #64	; 0x40
 8017a80:	eba0 000a 	sub.w	r0, r0, sl
 8017a84:	fa03 f000 	lsl.w	r0, r3, r0
 8017a88:	9b04      	ldr	r3, [sp, #16]
 8017a8a:	4303      	orrs	r3, r0
 8017a8c:	3401      	adds	r4, #1
 8017a8e:	9304      	str	r3, [sp, #16]
 8017a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a94:	482c      	ldr	r0, [pc, #176]	; (8017b48 <_vfiprintf_r+0x250>)
 8017a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a9a:	2206      	movs	r2, #6
 8017a9c:	f7e8 fb98 	bl	80001d0 <memchr>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d03f      	beq.n	8017b24 <_vfiprintf_r+0x22c>
 8017aa4:	4b29      	ldr	r3, [pc, #164]	; (8017b4c <_vfiprintf_r+0x254>)
 8017aa6:	bb1b      	cbnz	r3, 8017af0 <_vfiprintf_r+0x1f8>
 8017aa8:	9b03      	ldr	r3, [sp, #12]
 8017aaa:	3307      	adds	r3, #7
 8017aac:	f023 0307 	bic.w	r3, r3, #7
 8017ab0:	3308      	adds	r3, #8
 8017ab2:	9303      	str	r3, [sp, #12]
 8017ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ab6:	443b      	add	r3, r7
 8017ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8017aba:	e767      	b.n	801798c <_vfiprintf_r+0x94>
 8017abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ac0:	460c      	mov	r4, r1
 8017ac2:	2001      	movs	r0, #1
 8017ac4:	e7a5      	b.n	8017a12 <_vfiprintf_r+0x11a>
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	3401      	adds	r4, #1
 8017aca:	9305      	str	r3, [sp, #20]
 8017acc:	4619      	mov	r1, r3
 8017ace:	f04f 0c0a 	mov.w	ip, #10
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ad8:	3a30      	subs	r2, #48	; 0x30
 8017ada:	2a09      	cmp	r2, #9
 8017adc:	d903      	bls.n	8017ae6 <_vfiprintf_r+0x1ee>
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d0c5      	beq.n	8017a6e <_vfiprintf_r+0x176>
 8017ae2:	9105      	str	r1, [sp, #20]
 8017ae4:	e7c3      	b.n	8017a6e <_vfiprintf_r+0x176>
 8017ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017aea:	4604      	mov	r4, r0
 8017aec:	2301      	movs	r3, #1
 8017aee:	e7f0      	b.n	8017ad2 <_vfiprintf_r+0x1da>
 8017af0:	ab03      	add	r3, sp, #12
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	462a      	mov	r2, r5
 8017af6:	4b16      	ldr	r3, [pc, #88]	; (8017b50 <_vfiprintf_r+0x258>)
 8017af8:	a904      	add	r1, sp, #16
 8017afa:	4630      	mov	r0, r6
 8017afc:	f3af 8000 	nop.w
 8017b00:	4607      	mov	r7, r0
 8017b02:	1c78      	adds	r0, r7, #1
 8017b04:	d1d6      	bne.n	8017ab4 <_vfiprintf_r+0x1bc>
 8017b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b08:	07d9      	lsls	r1, r3, #31
 8017b0a:	d405      	bmi.n	8017b18 <_vfiprintf_r+0x220>
 8017b0c:	89ab      	ldrh	r3, [r5, #12]
 8017b0e:	059a      	lsls	r2, r3, #22
 8017b10:	d402      	bmi.n	8017b18 <_vfiprintf_r+0x220>
 8017b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b14:	f7ff fba6 	bl	8017264 <__retarget_lock_release_recursive>
 8017b18:	89ab      	ldrh	r3, [r5, #12]
 8017b1a:	065b      	lsls	r3, r3, #25
 8017b1c:	f53f af12 	bmi.w	8017944 <_vfiprintf_r+0x4c>
 8017b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b22:	e711      	b.n	8017948 <_vfiprintf_r+0x50>
 8017b24:	ab03      	add	r3, sp, #12
 8017b26:	9300      	str	r3, [sp, #0]
 8017b28:	462a      	mov	r2, r5
 8017b2a:	4b09      	ldr	r3, [pc, #36]	; (8017b50 <_vfiprintf_r+0x258>)
 8017b2c:	a904      	add	r1, sp, #16
 8017b2e:	4630      	mov	r0, r6
 8017b30:	f000 f880 	bl	8017c34 <_printf_i>
 8017b34:	e7e4      	b.n	8017b00 <_vfiprintf_r+0x208>
 8017b36:	bf00      	nop
 8017b38:	0801b3ac 	.word	0x0801b3ac
 8017b3c:	0801b3cc 	.word	0x0801b3cc
 8017b40:	0801b38c 	.word	0x0801b38c
 8017b44:	0801b4a2 	.word	0x0801b4a2
 8017b48:	0801b4ac 	.word	0x0801b4ac
 8017b4c:	00000000 	.word	0x00000000
 8017b50:	080178d3 	.word	0x080178d3
 8017b54:	0801b4a8 	.word	0x0801b4a8

08017b58 <_printf_common>:
 8017b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b5c:	4616      	mov	r6, r2
 8017b5e:	4699      	mov	r9, r3
 8017b60:	688a      	ldr	r2, [r1, #8]
 8017b62:	690b      	ldr	r3, [r1, #16]
 8017b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b68:	4293      	cmp	r3, r2
 8017b6a:	bfb8      	it	lt
 8017b6c:	4613      	movlt	r3, r2
 8017b6e:	6033      	str	r3, [r6, #0]
 8017b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b74:	4607      	mov	r7, r0
 8017b76:	460c      	mov	r4, r1
 8017b78:	b10a      	cbz	r2, 8017b7e <_printf_common+0x26>
 8017b7a:	3301      	adds	r3, #1
 8017b7c:	6033      	str	r3, [r6, #0]
 8017b7e:	6823      	ldr	r3, [r4, #0]
 8017b80:	0699      	lsls	r1, r3, #26
 8017b82:	bf42      	ittt	mi
 8017b84:	6833      	ldrmi	r3, [r6, #0]
 8017b86:	3302      	addmi	r3, #2
 8017b88:	6033      	strmi	r3, [r6, #0]
 8017b8a:	6825      	ldr	r5, [r4, #0]
 8017b8c:	f015 0506 	ands.w	r5, r5, #6
 8017b90:	d106      	bne.n	8017ba0 <_printf_common+0x48>
 8017b92:	f104 0a19 	add.w	sl, r4, #25
 8017b96:	68e3      	ldr	r3, [r4, #12]
 8017b98:	6832      	ldr	r2, [r6, #0]
 8017b9a:	1a9b      	subs	r3, r3, r2
 8017b9c:	42ab      	cmp	r3, r5
 8017b9e:	dc26      	bgt.n	8017bee <_printf_common+0x96>
 8017ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ba4:	1e13      	subs	r3, r2, #0
 8017ba6:	6822      	ldr	r2, [r4, #0]
 8017ba8:	bf18      	it	ne
 8017baa:	2301      	movne	r3, #1
 8017bac:	0692      	lsls	r2, r2, #26
 8017bae:	d42b      	bmi.n	8017c08 <_printf_common+0xb0>
 8017bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017bb4:	4649      	mov	r1, r9
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	47c0      	blx	r8
 8017bba:	3001      	adds	r0, #1
 8017bbc:	d01e      	beq.n	8017bfc <_printf_common+0xa4>
 8017bbe:	6823      	ldr	r3, [r4, #0]
 8017bc0:	68e5      	ldr	r5, [r4, #12]
 8017bc2:	6832      	ldr	r2, [r6, #0]
 8017bc4:	f003 0306 	and.w	r3, r3, #6
 8017bc8:	2b04      	cmp	r3, #4
 8017bca:	bf08      	it	eq
 8017bcc:	1aad      	subeq	r5, r5, r2
 8017bce:	68a3      	ldr	r3, [r4, #8]
 8017bd0:	6922      	ldr	r2, [r4, #16]
 8017bd2:	bf0c      	ite	eq
 8017bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017bd8:	2500      	movne	r5, #0
 8017bda:	4293      	cmp	r3, r2
 8017bdc:	bfc4      	itt	gt
 8017bde:	1a9b      	subgt	r3, r3, r2
 8017be0:	18ed      	addgt	r5, r5, r3
 8017be2:	2600      	movs	r6, #0
 8017be4:	341a      	adds	r4, #26
 8017be6:	42b5      	cmp	r5, r6
 8017be8:	d11a      	bne.n	8017c20 <_printf_common+0xc8>
 8017bea:	2000      	movs	r0, #0
 8017bec:	e008      	b.n	8017c00 <_printf_common+0xa8>
 8017bee:	2301      	movs	r3, #1
 8017bf0:	4652      	mov	r2, sl
 8017bf2:	4649      	mov	r1, r9
 8017bf4:	4638      	mov	r0, r7
 8017bf6:	47c0      	blx	r8
 8017bf8:	3001      	adds	r0, #1
 8017bfa:	d103      	bne.n	8017c04 <_printf_common+0xac>
 8017bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8017c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c04:	3501      	adds	r5, #1
 8017c06:	e7c6      	b.n	8017b96 <_printf_common+0x3e>
 8017c08:	18e1      	adds	r1, r4, r3
 8017c0a:	1c5a      	adds	r2, r3, #1
 8017c0c:	2030      	movs	r0, #48	; 0x30
 8017c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017c12:	4422      	add	r2, r4
 8017c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017c1c:	3302      	adds	r3, #2
 8017c1e:	e7c7      	b.n	8017bb0 <_printf_common+0x58>
 8017c20:	2301      	movs	r3, #1
 8017c22:	4622      	mov	r2, r4
 8017c24:	4649      	mov	r1, r9
 8017c26:	4638      	mov	r0, r7
 8017c28:	47c0      	blx	r8
 8017c2a:	3001      	adds	r0, #1
 8017c2c:	d0e6      	beq.n	8017bfc <_printf_common+0xa4>
 8017c2e:	3601      	adds	r6, #1
 8017c30:	e7d9      	b.n	8017be6 <_printf_common+0x8e>
	...

08017c34 <_printf_i>:
 8017c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c38:	460c      	mov	r4, r1
 8017c3a:	4691      	mov	r9, r2
 8017c3c:	7e27      	ldrb	r7, [r4, #24]
 8017c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017c40:	2f78      	cmp	r7, #120	; 0x78
 8017c42:	4680      	mov	r8, r0
 8017c44:	469a      	mov	sl, r3
 8017c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c4a:	d807      	bhi.n	8017c5c <_printf_i+0x28>
 8017c4c:	2f62      	cmp	r7, #98	; 0x62
 8017c4e:	d80a      	bhi.n	8017c66 <_printf_i+0x32>
 8017c50:	2f00      	cmp	r7, #0
 8017c52:	f000 80d8 	beq.w	8017e06 <_printf_i+0x1d2>
 8017c56:	2f58      	cmp	r7, #88	; 0x58
 8017c58:	f000 80a3 	beq.w	8017da2 <_printf_i+0x16e>
 8017c5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017c64:	e03a      	b.n	8017cdc <_printf_i+0xa8>
 8017c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017c6a:	2b15      	cmp	r3, #21
 8017c6c:	d8f6      	bhi.n	8017c5c <_printf_i+0x28>
 8017c6e:	a001      	add	r0, pc, #4	; (adr r0, 8017c74 <_printf_i+0x40>)
 8017c70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017c74:	08017ccd 	.word	0x08017ccd
 8017c78:	08017ce1 	.word	0x08017ce1
 8017c7c:	08017c5d 	.word	0x08017c5d
 8017c80:	08017c5d 	.word	0x08017c5d
 8017c84:	08017c5d 	.word	0x08017c5d
 8017c88:	08017c5d 	.word	0x08017c5d
 8017c8c:	08017ce1 	.word	0x08017ce1
 8017c90:	08017c5d 	.word	0x08017c5d
 8017c94:	08017c5d 	.word	0x08017c5d
 8017c98:	08017c5d 	.word	0x08017c5d
 8017c9c:	08017c5d 	.word	0x08017c5d
 8017ca0:	08017ded 	.word	0x08017ded
 8017ca4:	08017d11 	.word	0x08017d11
 8017ca8:	08017dcf 	.word	0x08017dcf
 8017cac:	08017c5d 	.word	0x08017c5d
 8017cb0:	08017c5d 	.word	0x08017c5d
 8017cb4:	08017e0f 	.word	0x08017e0f
 8017cb8:	08017c5d 	.word	0x08017c5d
 8017cbc:	08017d11 	.word	0x08017d11
 8017cc0:	08017c5d 	.word	0x08017c5d
 8017cc4:	08017c5d 	.word	0x08017c5d
 8017cc8:	08017dd7 	.word	0x08017dd7
 8017ccc:	680b      	ldr	r3, [r1, #0]
 8017cce:	1d1a      	adds	r2, r3, #4
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	600a      	str	r2, [r1, #0]
 8017cd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017cdc:	2301      	movs	r3, #1
 8017cde:	e0a3      	b.n	8017e28 <_printf_i+0x1f4>
 8017ce0:	6825      	ldr	r5, [r4, #0]
 8017ce2:	6808      	ldr	r0, [r1, #0]
 8017ce4:	062e      	lsls	r6, r5, #24
 8017ce6:	f100 0304 	add.w	r3, r0, #4
 8017cea:	d50a      	bpl.n	8017d02 <_printf_i+0xce>
 8017cec:	6805      	ldr	r5, [r0, #0]
 8017cee:	600b      	str	r3, [r1, #0]
 8017cf0:	2d00      	cmp	r5, #0
 8017cf2:	da03      	bge.n	8017cfc <_printf_i+0xc8>
 8017cf4:	232d      	movs	r3, #45	; 0x2d
 8017cf6:	426d      	negs	r5, r5
 8017cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cfc:	485e      	ldr	r0, [pc, #376]	; (8017e78 <_printf_i+0x244>)
 8017cfe:	230a      	movs	r3, #10
 8017d00:	e019      	b.n	8017d36 <_printf_i+0x102>
 8017d02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017d06:	6805      	ldr	r5, [r0, #0]
 8017d08:	600b      	str	r3, [r1, #0]
 8017d0a:	bf18      	it	ne
 8017d0c:	b22d      	sxthne	r5, r5
 8017d0e:	e7ef      	b.n	8017cf0 <_printf_i+0xbc>
 8017d10:	680b      	ldr	r3, [r1, #0]
 8017d12:	6825      	ldr	r5, [r4, #0]
 8017d14:	1d18      	adds	r0, r3, #4
 8017d16:	6008      	str	r0, [r1, #0]
 8017d18:	0628      	lsls	r0, r5, #24
 8017d1a:	d501      	bpl.n	8017d20 <_printf_i+0xec>
 8017d1c:	681d      	ldr	r5, [r3, #0]
 8017d1e:	e002      	b.n	8017d26 <_printf_i+0xf2>
 8017d20:	0669      	lsls	r1, r5, #25
 8017d22:	d5fb      	bpl.n	8017d1c <_printf_i+0xe8>
 8017d24:	881d      	ldrh	r5, [r3, #0]
 8017d26:	4854      	ldr	r0, [pc, #336]	; (8017e78 <_printf_i+0x244>)
 8017d28:	2f6f      	cmp	r7, #111	; 0x6f
 8017d2a:	bf0c      	ite	eq
 8017d2c:	2308      	moveq	r3, #8
 8017d2e:	230a      	movne	r3, #10
 8017d30:	2100      	movs	r1, #0
 8017d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017d36:	6866      	ldr	r6, [r4, #4]
 8017d38:	60a6      	str	r6, [r4, #8]
 8017d3a:	2e00      	cmp	r6, #0
 8017d3c:	bfa2      	ittt	ge
 8017d3e:	6821      	ldrge	r1, [r4, #0]
 8017d40:	f021 0104 	bicge.w	r1, r1, #4
 8017d44:	6021      	strge	r1, [r4, #0]
 8017d46:	b90d      	cbnz	r5, 8017d4c <_printf_i+0x118>
 8017d48:	2e00      	cmp	r6, #0
 8017d4a:	d04d      	beq.n	8017de8 <_printf_i+0x1b4>
 8017d4c:	4616      	mov	r6, r2
 8017d4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017d52:	fb03 5711 	mls	r7, r3, r1, r5
 8017d56:	5dc7      	ldrb	r7, [r0, r7]
 8017d58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017d5c:	462f      	mov	r7, r5
 8017d5e:	42bb      	cmp	r3, r7
 8017d60:	460d      	mov	r5, r1
 8017d62:	d9f4      	bls.n	8017d4e <_printf_i+0x11a>
 8017d64:	2b08      	cmp	r3, #8
 8017d66:	d10b      	bne.n	8017d80 <_printf_i+0x14c>
 8017d68:	6823      	ldr	r3, [r4, #0]
 8017d6a:	07df      	lsls	r7, r3, #31
 8017d6c:	d508      	bpl.n	8017d80 <_printf_i+0x14c>
 8017d6e:	6923      	ldr	r3, [r4, #16]
 8017d70:	6861      	ldr	r1, [r4, #4]
 8017d72:	4299      	cmp	r1, r3
 8017d74:	bfde      	ittt	le
 8017d76:	2330      	movle	r3, #48	; 0x30
 8017d78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017d7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017d80:	1b92      	subs	r2, r2, r6
 8017d82:	6122      	str	r2, [r4, #16]
 8017d84:	f8cd a000 	str.w	sl, [sp]
 8017d88:	464b      	mov	r3, r9
 8017d8a:	aa03      	add	r2, sp, #12
 8017d8c:	4621      	mov	r1, r4
 8017d8e:	4640      	mov	r0, r8
 8017d90:	f7ff fee2 	bl	8017b58 <_printf_common>
 8017d94:	3001      	adds	r0, #1
 8017d96:	d14c      	bne.n	8017e32 <_printf_i+0x1fe>
 8017d98:	f04f 30ff 	mov.w	r0, #4294967295
 8017d9c:	b004      	add	sp, #16
 8017d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017da2:	4835      	ldr	r0, [pc, #212]	; (8017e78 <_printf_i+0x244>)
 8017da4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	680e      	ldr	r6, [r1, #0]
 8017dac:	061f      	lsls	r7, r3, #24
 8017dae:	f856 5b04 	ldr.w	r5, [r6], #4
 8017db2:	600e      	str	r6, [r1, #0]
 8017db4:	d514      	bpl.n	8017de0 <_printf_i+0x1ac>
 8017db6:	07d9      	lsls	r1, r3, #31
 8017db8:	bf44      	itt	mi
 8017dba:	f043 0320 	orrmi.w	r3, r3, #32
 8017dbe:	6023      	strmi	r3, [r4, #0]
 8017dc0:	b91d      	cbnz	r5, 8017dca <_printf_i+0x196>
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	f023 0320 	bic.w	r3, r3, #32
 8017dc8:	6023      	str	r3, [r4, #0]
 8017dca:	2310      	movs	r3, #16
 8017dcc:	e7b0      	b.n	8017d30 <_printf_i+0xfc>
 8017dce:	6823      	ldr	r3, [r4, #0]
 8017dd0:	f043 0320 	orr.w	r3, r3, #32
 8017dd4:	6023      	str	r3, [r4, #0]
 8017dd6:	2378      	movs	r3, #120	; 0x78
 8017dd8:	4828      	ldr	r0, [pc, #160]	; (8017e7c <_printf_i+0x248>)
 8017dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017dde:	e7e3      	b.n	8017da8 <_printf_i+0x174>
 8017de0:	065e      	lsls	r6, r3, #25
 8017de2:	bf48      	it	mi
 8017de4:	b2ad      	uxthmi	r5, r5
 8017de6:	e7e6      	b.n	8017db6 <_printf_i+0x182>
 8017de8:	4616      	mov	r6, r2
 8017dea:	e7bb      	b.n	8017d64 <_printf_i+0x130>
 8017dec:	680b      	ldr	r3, [r1, #0]
 8017dee:	6826      	ldr	r6, [r4, #0]
 8017df0:	6960      	ldr	r0, [r4, #20]
 8017df2:	1d1d      	adds	r5, r3, #4
 8017df4:	600d      	str	r5, [r1, #0]
 8017df6:	0635      	lsls	r5, r6, #24
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	d501      	bpl.n	8017e00 <_printf_i+0x1cc>
 8017dfc:	6018      	str	r0, [r3, #0]
 8017dfe:	e002      	b.n	8017e06 <_printf_i+0x1d2>
 8017e00:	0671      	lsls	r1, r6, #25
 8017e02:	d5fb      	bpl.n	8017dfc <_printf_i+0x1c8>
 8017e04:	8018      	strh	r0, [r3, #0]
 8017e06:	2300      	movs	r3, #0
 8017e08:	6123      	str	r3, [r4, #16]
 8017e0a:	4616      	mov	r6, r2
 8017e0c:	e7ba      	b.n	8017d84 <_printf_i+0x150>
 8017e0e:	680b      	ldr	r3, [r1, #0]
 8017e10:	1d1a      	adds	r2, r3, #4
 8017e12:	600a      	str	r2, [r1, #0]
 8017e14:	681e      	ldr	r6, [r3, #0]
 8017e16:	6862      	ldr	r2, [r4, #4]
 8017e18:	2100      	movs	r1, #0
 8017e1a:	4630      	mov	r0, r6
 8017e1c:	f7e8 f9d8 	bl	80001d0 <memchr>
 8017e20:	b108      	cbz	r0, 8017e26 <_printf_i+0x1f2>
 8017e22:	1b80      	subs	r0, r0, r6
 8017e24:	6060      	str	r0, [r4, #4]
 8017e26:	6863      	ldr	r3, [r4, #4]
 8017e28:	6123      	str	r3, [r4, #16]
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e30:	e7a8      	b.n	8017d84 <_printf_i+0x150>
 8017e32:	6923      	ldr	r3, [r4, #16]
 8017e34:	4632      	mov	r2, r6
 8017e36:	4649      	mov	r1, r9
 8017e38:	4640      	mov	r0, r8
 8017e3a:	47d0      	blx	sl
 8017e3c:	3001      	adds	r0, #1
 8017e3e:	d0ab      	beq.n	8017d98 <_printf_i+0x164>
 8017e40:	6823      	ldr	r3, [r4, #0]
 8017e42:	079b      	lsls	r3, r3, #30
 8017e44:	d413      	bmi.n	8017e6e <_printf_i+0x23a>
 8017e46:	68e0      	ldr	r0, [r4, #12]
 8017e48:	9b03      	ldr	r3, [sp, #12]
 8017e4a:	4298      	cmp	r0, r3
 8017e4c:	bfb8      	it	lt
 8017e4e:	4618      	movlt	r0, r3
 8017e50:	e7a4      	b.n	8017d9c <_printf_i+0x168>
 8017e52:	2301      	movs	r3, #1
 8017e54:	4632      	mov	r2, r6
 8017e56:	4649      	mov	r1, r9
 8017e58:	4640      	mov	r0, r8
 8017e5a:	47d0      	blx	sl
 8017e5c:	3001      	adds	r0, #1
 8017e5e:	d09b      	beq.n	8017d98 <_printf_i+0x164>
 8017e60:	3501      	adds	r5, #1
 8017e62:	68e3      	ldr	r3, [r4, #12]
 8017e64:	9903      	ldr	r1, [sp, #12]
 8017e66:	1a5b      	subs	r3, r3, r1
 8017e68:	42ab      	cmp	r3, r5
 8017e6a:	dcf2      	bgt.n	8017e52 <_printf_i+0x21e>
 8017e6c:	e7eb      	b.n	8017e46 <_printf_i+0x212>
 8017e6e:	2500      	movs	r5, #0
 8017e70:	f104 0619 	add.w	r6, r4, #25
 8017e74:	e7f5      	b.n	8017e62 <_printf_i+0x22e>
 8017e76:	bf00      	nop
 8017e78:	0801b4b3 	.word	0x0801b4b3
 8017e7c:	0801b4c4 	.word	0x0801b4c4

08017e80 <_read_r>:
 8017e80:	b538      	push	{r3, r4, r5, lr}
 8017e82:	4d07      	ldr	r5, [pc, #28]	; (8017ea0 <_read_r+0x20>)
 8017e84:	4604      	mov	r4, r0
 8017e86:	4608      	mov	r0, r1
 8017e88:	4611      	mov	r1, r2
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	602a      	str	r2, [r5, #0]
 8017e8e:	461a      	mov	r2, r3
 8017e90:	f7e9 fa0a 	bl	80012a8 <_read>
 8017e94:	1c43      	adds	r3, r0, #1
 8017e96:	d102      	bne.n	8017e9e <_read_r+0x1e>
 8017e98:	682b      	ldr	r3, [r5, #0]
 8017e9a:	b103      	cbz	r3, 8017e9e <_read_r+0x1e>
 8017e9c:	6023      	str	r3, [r4, #0]
 8017e9e:	bd38      	pop	{r3, r4, r5, pc}
 8017ea0:	2000bbdc 	.word	0x2000bbdc

08017ea4 <__swbuf_r>:
 8017ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea6:	460e      	mov	r6, r1
 8017ea8:	4614      	mov	r4, r2
 8017eaa:	4605      	mov	r5, r0
 8017eac:	b118      	cbz	r0, 8017eb6 <__swbuf_r+0x12>
 8017eae:	6983      	ldr	r3, [r0, #24]
 8017eb0:	b90b      	cbnz	r3, 8017eb6 <__swbuf_r+0x12>
 8017eb2:	f7ff f913 	bl	80170dc <__sinit>
 8017eb6:	4b21      	ldr	r3, [pc, #132]	; (8017f3c <__swbuf_r+0x98>)
 8017eb8:	429c      	cmp	r4, r3
 8017eba:	d12b      	bne.n	8017f14 <__swbuf_r+0x70>
 8017ebc:	686c      	ldr	r4, [r5, #4]
 8017ebe:	69a3      	ldr	r3, [r4, #24]
 8017ec0:	60a3      	str	r3, [r4, #8]
 8017ec2:	89a3      	ldrh	r3, [r4, #12]
 8017ec4:	071a      	lsls	r2, r3, #28
 8017ec6:	d52f      	bpl.n	8017f28 <__swbuf_r+0x84>
 8017ec8:	6923      	ldr	r3, [r4, #16]
 8017eca:	b36b      	cbz	r3, 8017f28 <__swbuf_r+0x84>
 8017ecc:	6923      	ldr	r3, [r4, #16]
 8017ece:	6820      	ldr	r0, [r4, #0]
 8017ed0:	1ac0      	subs	r0, r0, r3
 8017ed2:	6963      	ldr	r3, [r4, #20]
 8017ed4:	b2f6      	uxtb	r6, r6
 8017ed6:	4283      	cmp	r3, r0
 8017ed8:	4637      	mov	r7, r6
 8017eda:	dc04      	bgt.n	8017ee6 <__swbuf_r+0x42>
 8017edc:	4621      	mov	r1, r4
 8017ede:	4628      	mov	r0, r5
 8017ee0:	f7ff fc1c 	bl	801771c <_fflush_r>
 8017ee4:	bb30      	cbnz	r0, 8017f34 <__swbuf_r+0x90>
 8017ee6:	68a3      	ldr	r3, [r4, #8]
 8017ee8:	3b01      	subs	r3, #1
 8017eea:	60a3      	str	r3, [r4, #8]
 8017eec:	6823      	ldr	r3, [r4, #0]
 8017eee:	1c5a      	adds	r2, r3, #1
 8017ef0:	6022      	str	r2, [r4, #0]
 8017ef2:	701e      	strb	r6, [r3, #0]
 8017ef4:	6963      	ldr	r3, [r4, #20]
 8017ef6:	3001      	adds	r0, #1
 8017ef8:	4283      	cmp	r3, r0
 8017efa:	d004      	beq.n	8017f06 <__swbuf_r+0x62>
 8017efc:	89a3      	ldrh	r3, [r4, #12]
 8017efe:	07db      	lsls	r3, r3, #31
 8017f00:	d506      	bpl.n	8017f10 <__swbuf_r+0x6c>
 8017f02:	2e0a      	cmp	r6, #10
 8017f04:	d104      	bne.n	8017f10 <__swbuf_r+0x6c>
 8017f06:	4621      	mov	r1, r4
 8017f08:	4628      	mov	r0, r5
 8017f0a:	f7ff fc07 	bl	801771c <_fflush_r>
 8017f0e:	b988      	cbnz	r0, 8017f34 <__swbuf_r+0x90>
 8017f10:	4638      	mov	r0, r7
 8017f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f14:	4b0a      	ldr	r3, [pc, #40]	; (8017f40 <__swbuf_r+0x9c>)
 8017f16:	429c      	cmp	r4, r3
 8017f18:	d101      	bne.n	8017f1e <__swbuf_r+0x7a>
 8017f1a:	68ac      	ldr	r4, [r5, #8]
 8017f1c:	e7cf      	b.n	8017ebe <__swbuf_r+0x1a>
 8017f1e:	4b09      	ldr	r3, [pc, #36]	; (8017f44 <__swbuf_r+0xa0>)
 8017f20:	429c      	cmp	r4, r3
 8017f22:	bf08      	it	eq
 8017f24:	68ec      	ldreq	r4, [r5, #12]
 8017f26:	e7ca      	b.n	8017ebe <__swbuf_r+0x1a>
 8017f28:	4621      	mov	r1, r4
 8017f2a:	4628      	mov	r0, r5
 8017f2c:	f000 f80c 	bl	8017f48 <__swsetup_r>
 8017f30:	2800      	cmp	r0, #0
 8017f32:	d0cb      	beq.n	8017ecc <__swbuf_r+0x28>
 8017f34:	f04f 37ff 	mov.w	r7, #4294967295
 8017f38:	e7ea      	b.n	8017f10 <__swbuf_r+0x6c>
 8017f3a:	bf00      	nop
 8017f3c:	0801b3ac 	.word	0x0801b3ac
 8017f40:	0801b3cc 	.word	0x0801b3cc
 8017f44:	0801b38c 	.word	0x0801b38c

08017f48 <__swsetup_r>:
 8017f48:	4b32      	ldr	r3, [pc, #200]	; (8018014 <__swsetup_r+0xcc>)
 8017f4a:	b570      	push	{r4, r5, r6, lr}
 8017f4c:	681d      	ldr	r5, [r3, #0]
 8017f4e:	4606      	mov	r6, r0
 8017f50:	460c      	mov	r4, r1
 8017f52:	b125      	cbz	r5, 8017f5e <__swsetup_r+0x16>
 8017f54:	69ab      	ldr	r3, [r5, #24]
 8017f56:	b913      	cbnz	r3, 8017f5e <__swsetup_r+0x16>
 8017f58:	4628      	mov	r0, r5
 8017f5a:	f7ff f8bf 	bl	80170dc <__sinit>
 8017f5e:	4b2e      	ldr	r3, [pc, #184]	; (8018018 <__swsetup_r+0xd0>)
 8017f60:	429c      	cmp	r4, r3
 8017f62:	d10f      	bne.n	8017f84 <__swsetup_r+0x3c>
 8017f64:	686c      	ldr	r4, [r5, #4]
 8017f66:	89a3      	ldrh	r3, [r4, #12]
 8017f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f6c:	0719      	lsls	r1, r3, #28
 8017f6e:	d42c      	bmi.n	8017fca <__swsetup_r+0x82>
 8017f70:	06dd      	lsls	r5, r3, #27
 8017f72:	d411      	bmi.n	8017f98 <__swsetup_r+0x50>
 8017f74:	2309      	movs	r3, #9
 8017f76:	6033      	str	r3, [r6, #0]
 8017f78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f7c:	81a3      	strh	r3, [r4, #12]
 8017f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f82:	e03e      	b.n	8018002 <__swsetup_r+0xba>
 8017f84:	4b25      	ldr	r3, [pc, #148]	; (801801c <__swsetup_r+0xd4>)
 8017f86:	429c      	cmp	r4, r3
 8017f88:	d101      	bne.n	8017f8e <__swsetup_r+0x46>
 8017f8a:	68ac      	ldr	r4, [r5, #8]
 8017f8c:	e7eb      	b.n	8017f66 <__swsetup_r+0x1e>
 8017f8e:	4b24      	ldr	r3, [pc, #144]	; (8018020 <__swsetup_r+0xd8>)
 8017f90:	429c      	cmp	r4, r3
 8017f92:	bf08      	it	eq
 8017f94:	68ec      	ldreq	r4, [r5, #12]
 8017f96:	e7e6      	b.n	8017f66 <__swsetup_r+0x1e>
 8017f98:	0758      	lsls	r0, r3, #29
 8017f9a:	d512      	bpl.n	8017fc2 <__swsetup_r+0x7a>
 8017f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f9e:	b141      	cbz	r1, 8017fb2 <__swsetup_r+0x6a>
 8017fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fa4:	4299      	cmp	r1, r3
 8017fa6:	d002      	beq.n	8017fae <__swsetup_r+0x66>
 8017fa8:	4630      	mov	r0, r6
 8017faa:	f7ff fc2b 	bl	8017804 <_free_r>
 8017fae:	2300      	movs	r3, #0
 8017fb0:	6363      	str	r3, [r4, #52]	; 0x34
 8017fb2:	89a3      	ldrh	r3, [r4, #12]
 8017fb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017fb8:	81a3      	strh	r3, [r4, #12]
 8017fba:	2300      	movs	r3, #0
 8017fbc:	6063      	str	r3, [r4, #4]
 8017fbe:	6923      	ldr	r3, [r4, #16]
 8017fc0:	6023      	str	r3, [r4, #0]
 8017fc2:	89a3      	ldrh	r3, [r4, #12]
 8017fc4:	f043 0308 	orr.w	r3, r3, #8
 8017fc8:	81a3      	strh	r3, [r4, #12]
 8017fca:	6923      	ldr	r3, [r4, #16]
 8017fcc:	b94b      	cbnz	r3, 8017fe2 <__swsetup_r+0x9a>
 8017fce:	89a3      	ldrh	r3, [r4, #12]
 8017fd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fd8:	d003      	beq.n	8017fe2 <__swsetup_r+0x9a>
 8017fda:	4621      	mov	r1, r4
 8017fdc:	4630      	mov	r0, r6
 8017fde:	f000 f84d 	bl	801807c <__smakebuf_r>
 8017fe2:	89a0      	ldrh	r0, [r4, #12]
 8017fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017fe8:	f010 0301 	ands.w	r3, r0, #1
 8017fec:	d00a      	beq.n	8018004 <__swsetup_r+0xbc>
 8017fee:	2300      	movs	r3, #0
 8017ff0:	60a3      	str	r3, [r4, #8]
 8017ff2:	6963      	ldr	r3, [r4, #20]
 8017ff4:	425b      	negs	r3, r3
 8017ff6:	61a3      	str	r3, [r4, #24]
 8017ff8:	6923      	ldr	r3, [r4, #16]
 8017ffa:	b943      	cbnz	r3, 801800e <__swsetup_r+0xc6>
 8017ffc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018000:	d1ba      	bne.n	8017f78 <__swsetup_r+0x30>
 8018002:	bd70      	pop	{r4, r5, r6, pc}
 8018004:	0781      	lsls	r1, r0, #30
 8018006:	bf58      	it	pl
 8018008:	6963      	ldrpl	r3, [r4, #20]
 801800a:	60a3      	str	r3, [r4, #8]
 801800c:	e7f4      	b.n	8017ff8 <__swsetup_r+0xb0>
 801800e:	2000      	movs	r0, #0
 8018010:	e7f7      	b.n	8018002 <__swsetup_r+0xba>
 8018012:	bf00      	nop
 8018014:	20000020 	.word	0x20000020
 8018018:	0801b3ac 	.word	0x0801b3ac
 801801c:	0801b3cc 	.word	0x0801b3cc
 8018020:	0801b38c 	.word	0x0801b38c

08018024 <abort>:
 8018024:	b508      	push	{r3, lr}
 8018026:	2006      	movs	r0, #6
 8018028:	f000 f890 	bl	801814c <raise>
 801802c:	2001      	movs	r0, #1
 801802e:	f7e9 f931 	bl	8001294 <_exit>

08018032 <__swhatbuf_r>:
 8018032:	b570      	push	{r4, r5, r6, lr}
 8018034:	460e      	mov	r6, r1
 8018036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801803a:	2900      	cmp	r1, #0
 801803c:	b096      	sub	sp, #88	; 0x58
 801803e:	4614      	mov	r4, r2
 8018040:	461d      	mov	r5, r3
 8018042:	da07      	bge.n	8018054 <__swhatbuf_r+0x22>
 8018044:	2300      	movs	r3, #0
 8018046:	602b      	str	r3, [r5, #0]
 8018048:	89b3      	ldrh	r3, [r6, #12]
 801804a:	061a      	lsls	r2, r3, #24
 801804c:	d410      	bmi.n	8018070 <__swhatbuf_r+0x3e>
 801804e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018052:	e00e      	b.n	8018072 <__swhatbuf_r+0x40>
 8018054:	466a      	mov	r2, sp
 8018056:	f000 f895 	bl	8018184 <_fstat_r>
 801805a:	2800      	cmp	r0, #0
 801805c:	dbf2      	blt.n	8018044 <__swhatbuf_r+0x12>
 801805e:	9a01      	ldr	r2, [sp, #4]
 8018060:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018064:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018068:	425a      	negs	r2, r3
 801806a:	415a      	adcs	r2, r3
 801806c:	602a      	str	r2, [r5, #0]
 801806e:	e7ee      	b.n	801804e <__swhatbuf_r+0x1c>
 8018070:	2340      	movs	r3, #64	; 0x40
 8018072:	2000      	movs	r0, #0
 8018074:	6023      	str	r3, [r4, #0]
 8018076:	b016      	add	sp, #88	; 0x58
 8018078:	bd70      	pop	{r4, r5, r6, pc}
	...

0801807c <__smakebuf_r>:
 801807c:	898b      	ldrh	r3, [r1, #12]
 801807e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018080:	079d      	lsls	r5, r3, #30
 8018082:	4606      	mov	r6, r0
 8018084:	460c      	mov	r4, r1
 8018086:	d507      	bpl.n	8018098 <__smakebuf_r+0x1c>
 8018088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801808c:	6023      	str	r3, [r4, #0]
 801808e:	6123      	str	r3, [r4, #16]
 8018090:	2301      	movs	r3, #1
 8018092:	6163      	str	r3, [r4, #20]
 8018094:	b002      	add	sp, #8
 8018096:	bd70      	pop	{r4, r5, r6, pc}
 8018098:	ab01      	add	r3, sp, #4
 801809a:	466a      	mov	r2, sp
 801809c:	f7ff ffc9 	bl	8018032 <__swhatbuf_r>
 80180a0:	9900      	ldr	r1, [sp, #0]
 80180a2:	4605      	mov	r5, r0
 80180a4:	4630      	mov	r0, r6
 80180a6:	f7ff f903 	bl	80172b0 <_malloc_r>
 80180aa:	b948      	cbnz	r0, 80180c0 <__smakebuf_r+0x44>
 80180ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180b0:	059a      	lsls	r2, r3, #22
 80180b2:	d4ef      	bmi.n	8018094 <__smakebuf_r+0x18>
 80180b4:	f023 0303 	bic.w	r3, r3, #3
 80180b8:	f043 0302 	orr.w	r3, r3, #2
 80180bc:	81a3      	strh	r3, [r4, #12]
 80180be:	e7e3      	b.n	8018088 <__smakebuf_r+0xc>
 80180c0:	4b0d      	ldr	r3, [pc, #52]	; (80180f8 <__smakebuf_r+0x7c>)
 80180c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80180c4:	89a3      	ldrh	r3, [r4, #12]
 80180c6:	6020      	str	r0, [r4, #0]
 80180c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180cc:	81a3      	strh	r3, [r4, #12]
 80180ce:	9b00      	ldr	r3, [sp, #0]
 80180d0:	6163      	str	r3, [r4, #20]
 80180d2:	9b01      	ldr	r3, [sp, #4]
 80180d4:	6120      	str	r0, [r4, #16]
 80180d6:	b15b      	cbz	r3, 80180f0 <__smakebuf_r+0x74>
 80180d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180dc:	4630      	mov	r0, r6
 80180de:	f000 f863 	bl	80181a8 <_isatty_r>
 80180e2:	b128      	cbz	r0, 80180f0 <__smakebuf_r+0x74>
 80180e4:	89a3      	ldrh	r3, [r4, #12]
 80180e6:	f023 0303 	bic.w	r3, r3, #3
 80180ea:	f043 0301 	orr.w	r3, r3, #1
 80180ee:	81a3      	strh	r3, [r4, #12]
 80180f0:	89a0      	ldrh	r0, [r4, #12]
 80180f2:	4305      	orrs	r5, r0
 80180f4:	81a5      	strh	r5, [r4, #12]
 80180f6:	e7cd      	b.n	8018094 <__smakebuf_r+0x18>
 80180f8:	08017075 	.word	0x08017075

080180fc <_raise_r>:
 80180fc:	291f      	cmp	r1, #31
 80180fe:	b538      	push	{r3, r4, r5, lr}
 8018100:	4604      	mov	r4, r0
 8018102:	460d      	mov	r5, r1
 8018104:	d904      	bls.n	8018110 <_raise_r+0x14>
 8018106:	2316      	movs	r3, #22
 8018108:	6003      	str	r3, [r0, #0]
 801810a:	f04f 30ff 	mov.w	r0, #4294967295
 801810e:	bd38      	pop	{r3, r4, r5, pc}
 8018110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018112:	b112      	cbz	r2, 801811a <_raise_r+0x1e>
 8018114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018118:	b94b      	cbnz	r3, 801812e <_raise_r+0x32>
 801811a:	4620      	mov	r0, r4
 801811c:	f000 f830 	bl	8018180 <_getpid_r>
 8018120:	462a      	mov	r2, r5
 8018122:	4601      	mov	r1, r0
 8018124:	4620      	mov	r0, r4
 8018126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801812a:	f000 b817 	b.w	801815c <_kill_r>
 801812e:	2b01      	cmp	r3, #1
 8018130:	d00a      	beq.n	8018148 <_raise_r+0x4c>
 8018132:	1c59      	adds	r1, r3, #1
 8018134:	d103      	bne.n	801813e <_raise_r+0x42>
 8018136:	2316      	movs	r3, #22
 8018138:	6003      	str	r3, [r0, #0]
 801813a:	2001      	movs	r0, #1
 801813c:	e7e7      	b.n	801810e <_raise_r+0x12>
 801813e:	2400      	movs	r4, #0
 8018140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018144:	4628      	mov	r0, r5
 8018146:	4798      	blx	r3
 8018148:	2000      	movs	r0, #0
 801814a:	e7e0      	b.n	801810e <_raise_r+0x12>

0801814c <raise>:
 801814c:	4b02      	ldr	r3, [pc, #8]	; (8018158 <raise+0xc>)
 801814e:	4601      	mov	r1, r0
 8018150:	6818      	ldr	r0, [r3, #0]
 8018152:	f7ff bfd3 	b.w	80180fc <_raise_r>
 8018156:	bf00      	nop
 8018158:	20000020 	.word	0x20000020

0801815c <_kill_r>:
 801815c:	b538      	push	{r3, r4, r5, lr}
 801815e:	4d07      	ldr	r5, [pc, #28]	; (801817c <_kill_r+0x20>)
 8018160:	2300      	movs	r3, #0
 8018162:	4604      	mov	r4, r0
 8018164:	4608      	mov	r0, r1
 8018166:	4611      	mov	r1, r2
 8018168:	602b      	str	r3, [r5, #0]
 801816a:	f7e9 f881 	bl	8001270 <_kill>
 801816e:	1c43      	adds	r3, r0, #1
 8018170:	d102      	bne.n	8018178 <_kill_r+0x1c>
 8018172:	682b      	ldr	r3, [r5, #0]
 8018174:	b103      	cbz	r3, 8018178 <_kill_r+0x1c>
 8018176:	6023      	str	r3, [r4, #0]
 8018178:	bd38      	pop	{r3, r4, r5, pc}
 801817a:	bf00      	nop
 801817c:	2000bbdc 	.word	0x2000bbdc

08018180 <_getpid_r>:
 8018180:	f7e9 b86e 	b.w	8001260 <_getpid>

08018184 <_fstat_r>:
 8018184:	b538      	push	{r3, r4, r5, lr}
 8018186:	4d07      	ldr	r5, [pc, #28]	; (80181a4 <_fstat_r+0x20>)
 8018188:	2300      	movs	r3, #0
 801818a:	4604      	mov	r4, r0
 801818c:	4608      	mov	r0, r1
 801818e:	4611      	mov	r1, r2
 8018190:	602b      	str	r3, [r5, #0]
 8018192:	f7e9 f8ce 	bl	8001332 <_fstat>
 8018196:	1c43      	adds	r3, r0, #1
 8018198:	d102      	bne.n	80181a0 <_fstat_r+0x1c>
 801819a:	682b      	ldr	r3, [r5, #0]
 801819c:	b103      	cbz	r3, 80181a0 <_fstat_r+0x1c>
 801819e:	6023      	str	r3, [r4, #0]
 80181a0:	bd38      	pop	{r3, r4, r5, pc}
 80181a2:	bf00      	nop
 80181a4:	2000bbdc 	.word	0x2000bbdc

080181a8 <_isatty_r>:
 80181a8:	b538      	push	{r3, r4, r5, lr}
 80181aa:	4d06      	ldr	r5, [pc, #24]	; (80181c4 <_isatty_r+0x1c>)
 80181ac:	2300      	movs	r3, #0
 80181ae:	4604      	mov	r4, r0
 80181b0:	4608      	mov	r0, r1
 80181b2:	602b      	str	r3, [r5, #0]
 80181b4:	f7e9 f8cd 	bl	8001352 <_isatty>
 80181b8:	1c43      	adds	r3, r0, #1
 80181ba:	d102      	bne.n	80181c2 <_isatty_r+0x1a>
 80181bc:	682b      	ldr	r3, [r5, #0]
 80181be:	b103      	cbz	r3, 80181c2 <_isatty_r+0x1a>
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	bd38      	pop	{r3, r4, r5, pc}
 80181c4:	2000bbdc 	.word	0x2000bbdc

080181c8 <_init>:
 80181c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ca:	bf00      	nop
 80181cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ce:	bc08      	pop	{r3}
 80181d0:	469e      	mov	lr, r3
 80181d2:	4770      	bx	lr

080181d4 <_fini>:
 80181d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d6:	bf00      	nop
 80181d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181da:	bc08      	pop	{r3}
 80181dc:	469e      	mov	lr, r3
 80181de:	4770      	bx	lr
